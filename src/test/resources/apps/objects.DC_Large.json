{
  "objects": {
    "collections": [
      {
        "id": "DC_Large",
        "createdAt": "2020-05-05T22:41:35.680Z",
        "searchClusterId": "default",
        "commitWithin": 10000,
        "solrParams": {
          "name": "DC_Large",
          "numShards": 1,
          "replicationFactor": 1
        },
        "type": "DATA",
        "metadata": {},
        "updates": [
          {
            "userId": "ashumway",
            "timestamp": "2022-02-08T18:36:17.933Z"
          },
          {
            "userId": "ashumway",
            "timestamp": "2022-02-08T18:36:17.940Z"
          }
        ]
      },
      {
        "id": "DC_Large_ALS_grid_items_for_item_recommendations",
        "createdAt": "2020-06-05T06:39:13.949Z",
        "searchClusterId": "default",
        "commitWithin": 10000,
        "solrParams": {
          "name": "DC_Large_ALS_grid_items_for_item_recommendations",
          "numShards": 1,
          "replicationFactor": 1
        },
        "type": "DATA",
        "metadata": {},
        "updates": [
          {
            "userId": "ashumway",
            "timestamp": "2022-02-08T18:35:27.732Z"
          },
          {
            "userId": "ashumway",
            "timestamp": "2022-02-08T18:35:27.738Z"
          }
        ]
      },
      {
        "id": "DC_Large_ALS_grid_items_for_item_recommendations_logs",
        "createdAt": "2020-06-05T06:39:19.796Z",
        "searchClusterId": "default",
        "commitWithin": 10000,
        "solrParams": {
          "name": "DC_Large_ALS_grid_items_for_item_recommendations_logs",
          "numShards": 2,
          "replicationFactor": 1,
          "maxShardsPerNode": 2
        },
        "type": "SEARCHLOGS",
        "relatedCollectionId": "DC_Large_ALS_grid_items_for_item_recommendations",
        "metadata": {},
        "updates": [
          {
            "userId": "ashumway",
            "timestamp": "2022-02-08T18:35:30.648Z"
          },
          {
            "userId": "ashumway",
            "timestamp": "2022-02-08T18:35:30.654Z"
          }
        ]
      },
      {
        "id": "DC_Large_ALS_grid_items_for_user_recommendations",
        "createdAt": "2020-06-05T06:34:42.796Z",
        "searchClusterId": "default",
        "commitWithin": 10000,
        "solrParams": {
          "name": "DC_Large_ALS_grid_items_for_user_recommendations",
          "numShards": 1,
          "replicationFactor": 1
        },
        "type": "DATA",
        "metadata": {},
        "updates": [
          {
            "userId": "ashumway",
            "timestamp": "2022-02-08T18:35:33.727Z"
          },
          {
            "userId": "ashumway",
            "timestamp": "2022-02-08T18:35:33.733Z"
          }
        ]
      },
      {
        "id": "DC_Large_ALS_grid_items_for_user_recommendations_logs",
        "createdAt": "2020-06-05T06:34:56.556Z",
        "searchClusterId": "default",
        "commitWithin": 10000,
        "solrParams": {
          "name": "DC_Large_ALS_grid_items_for_user_recommendations_logs",
          "numShards": 2,
          "replicationFactor": 1,
          "maxShardsPerNode": 2
        },
        "type": "SEARCHLOGS",
        "relatedCollectionId": "DC_Large_ALS_grid_items_for_user_recommendations",
        "metadata": {},
        "updates": [
          {
            "userId": "ashumway",
            "timestamp": "2022-02-08T18:35:36.638Z"
          },
          {
            "userId": "ashumway",
            "timestamp": "2022-02-08T18:35:36.644Z"
          }
        ]
      },
      {
        "id": "DC_Large_ALS_items_for_item_recommendations",
        "createdAt": "2020-06-05T06:42:38.998Z",
        "searchClusterId": "default",
        "commitWithin": 10000,
        "solrParams": {
          "name": "DC_Large_ALS_items_for_item_recommendations",
          "numShards": 1,
          "replicationFactor": 1
        },
        "type": "DATA",
        "metadata": {},
        "updates": [
          {
            "userId": "ashumway",
            "timestamp": "2022-02-08T18:35:40.036Z"
          },
          {
            "userId": "ashumway",
            "timestamp": "2022-02-08T18:35:40.042Z"
          }
        ]
      },
      {
        "id": "DC_Large_ALS_items_for_item_recommendations_logs",
        "createdAt": "2020-06-05T06:42:43.688Z",
        "searchClusterId": "default",
        "commitWithin": 10000,
        "solrParams": {
          "name": "DC_Large_ALS_items_for_item_recommendations_logs",
          "numShards": 2,
          "replicationFactor": 1,
          "maxShardsPerNode": 2
        },
        "type": "SEARCHLOGS",
        "relatedCollectionId": "DC_Large_ALS_items_for_item_recommendations",
        "metadata": {},
        "updates": [
          {
            "userId": "ashumway",
            "timestamp": "2022-02-08T18:35:43.030Z"
          },
          {
            "userId": "ashumway",
            "timestamp": "2022-02-08T18:35:43.035Z"
          }
        ]
      },
      {
        "id": "DC_Large_ALS_items_for_user_recommendations",
        "createdAt": "2020-06-05T06:38:34.403Z",
        "searchClusterId": "default",
        "commitWithin": 10000,
        "solrParams": {
          "name": "DC_Large_ALS_items_for_user_recommendations",
          "numShards": 1,
          "replicationFactor": 1
        },
        "type": "DATA",
        "metadata": {},
        "updates": [
          {
            "userId": "ashumway",
            "timestamp": "2022-02-08T18:35:46.185Z"
          },
          {
            "userId": "ashumway",
            "timestamp": "2022-02-08T18:35:46.191Z"
          }
        ]
      },
      {
        "id": "DC_Large_ALS_items_for_user_recommendations_logs",
        "createdAt": "2020-06-05T06:38:39.853Z",
        "searchClusterId": "default",
        "commitWithin": 10000,
        "solrParams": {
          "name": "DC_Large_ALS_items_for_user_recommendations_logs",
          "numShards": 2,
          "replicationFactor": 1,
          "maxShardsPerNode": 2
        },
        "type": "SEARCHLOGS",
        "relatedCollectionId": "DC_Large_ALS_items_for_user_recommendations",
        "metadata": {},
        "updates": [
          {
            "userId": "ashumway",
            "timestamp": "2022-02-08T18:35:49.225Z"
          },
          {
            "userId": "ashumway",
            "timestamp": "2022-02-08T18:35:49.231Z"
          }
        ]
      },
      {
        "id": "DC_Large_ALS_run_1_items_for_item_recommendations",
        "createdAt": "2020-06-05T06:40:54.673Z",
        "searchClusterId": "default",
        "commitWithin": 10000,
        "solrParams": {
          "name": "DC_Large_ALS_run_1_items_for_item_recommendations",
          "numShards": 1,
          "replicationFactor": 1
        },
        "type": "DATA",
        "metadata": {},
        "updates": [
          {
            "userId": "ashumway",
            "timestamp": "2022-02-08T18:35:52.278Z"
          },
          {
            "userId": "ashumway",
            "timestamp": "2022-02-08T18:35:52.284Z"
          }
        ]
      },
      {
        "id": "DC_Large_ALS_run_1_items_for_item_recommendations_logs",
        "createdAt": "2020-06-05T06:41:00.489Z",
        "searchClusterId": "default",
        "commitWithin": 10000,
        "solrParams": {
          "name": "DC_Large_ALS_run_1_items_for_item_recommendations_logs",
          "numShards": 2,
          "replicationFactor": 1,
          "maxShardsPerNode": 2
        },
        "type": "SEARCHLOGS",
        "relatedCollectionId": "DC_Large_ALS_run_1_items_for_item_recommendations",
        "metadata": {},
        "updates": [
          {
            "userId": "ashumway",
            "timestamp": "2022-02-08T18:35:55.441Z"
          },
          {
            "userId": "ashumway",
            "timestamp": "2022-02-08T18:35:55.448Z"
          }
        ]
      },
      {
        "id": "DC_Large_ALS_run_1_items_for_user_recommendations",
        "createdAt": "2020-06-05T06:36:33.666Z",
        "searchClusterId": "default",
        "commitWithin": 10000,
        "solrParams": {
          "name": "DC_Large_ALS_run_1_items_for_user_recommendations",
          "numShards": 1,
          "replicationFactor": 1
        },
        "type": "DATA",
        "metadata": {},
        "updates": [
          {
            "userId": "ashumway",
            "timestamp": "2022-02-08T18:35:58.816Z"
          },
          {
            "userId": "ashumway",
            "timestamp": "2022-02-08T18:35:58.822Z"
          }
        ]
      },
      {
        "id": "DC_Large_ALS_run_1_items_for_user_recommendations_logs",
        "createdAt": "2020-06-05T06:36:39.754Z",
        "searchClusterId": "default",
        "commitWithin": 10000,
        "solrParams": {
          "name": "DC_Large_ALS_run_1_items_for_user_recommendations_logs",
          "numShards": 2,
          "replicationFactor": 1,
          "maxShardsPerNode": 2
        },
        "type": "SEARCHLOGS",
        "relatedCollectionId": "DC_Large_ALS_run_1_items_for_user_recommendations",
        "metadata": {},
        "updates": [
          {
            "userId": "ashumway",
            "timestamp": "2022-02-08T18:36:01.812Z"
          },
          {
            "userId": "ashumway",
            "timestamp": "2022-02-08T18:36:01.818Z"
          }
        ]
      },
      {
        "id": "DC_Large_ALS_run_2_items_for_item_recommendations",
        "createdAt": "2020-06-05T06:42:13.923Z",
        "searchClusterId": "default",
        "commitWithin": 10000,
        "solrParams": {
          "name": "DC_Large_ALS_run_2_items_for_item_recommendations",
          "numShards": 1,
          "replicationFactor": 1
        },
        "type": "DATA",
        "metadata": {},
        "updates": [
          {
            "userId": "ashumway",
            "timestamp": "2022-02-08T18:36:05.085Z"
          },
          {
            "userId": "ashumway",
            "timestamp": "2022-02-08T18:36:05.092Z"
          }
        ]
      },
      {
        "id": "DC_Large_ALS_run_2_items_for_item_recommendations_logs",
        "createdAt": "2020-06-05T06:42:19.305Z",
        "searchClusterId": "default",
        "commitWithin": 10000,
        "solrParams": {
          "name": "DC_Large_ALS_run_2_items_for_item_recommendations_logs",
          "numShards": 2,
          "replicationFactor": 1,
          "maxShardsPerNode": 2
        },
        "type": "SEARCHLOGS",
        "relatedCollectionId": "DC_Large_ALS_run_2_items_for_item_recommendations",
        "metadata": {},
        "updates": [
          {
            "userId": "ashumway",
            "timestamp": "2022-02-08T18:36:07.984Z"
          },
          {
            "userId": "ashumway",
            "timestamp": "2022-02-08T18:36:07.990Z"
          }
        ]
      },
      {
        "id": "DC_Large_ALS_run_2_items_for_user_recommendations",
        "createdAt": "2020-06-05T06:37:33.991Z",
        "searchClusterId": "default",
        "commitWithin": 10000,
        "solrParams": {
          "name": "DC_Large_ALS_run_2_items_for_user_recommendations",
          "numShards": 1,
          "replicationFactor": 1
        },
        "type": "DATA",
        "metadata": {},
        "updates": [
          {
            "userId": "ashumway",
            "timestamp": "2022-02-08T18:36:11.447Z"
          },
          {
            "userId": "ashumway",
            "timestamp": "2022-02-08T18:36:11.454Z"
          }
        ]
      },
      {
        "id": "DC_Large_ALS_run_2_items_for_user_recommendations_logs",
        "createdAt": "2020-06-05T06:37:39.764Z",
        "searchClusterId": "default",
        "commitWithin": 10000,
        "solrParams": {
          "name": "DC_Large_ALS_run_2_items_for_user_recommendations_logs",
          "numShards": 2,
          "replicationFactor": 1,
          "maxShardsPerNode": 2
        },
        "type": "SEARCHLOGS",
        "relatedCollectionId": "DC_Large_ALS_run_2_items_for_user_recommendations",
        "metadata": {},
        "updates": [
          {
            "userId": "ashumway",
            "timestamp": "2022-02-08T18:36:14.604Z"
          },
          {
            "userId": "ashumway",
            "timestamp": "2022-02-08T18:36:14.611Z"
          }
        ]
      },
      {
        "id": "DC_Large_Populate_Signals_DS_job_state",
        "createdAt": "2021-04-08T00:57:25.012Z",
        "searchClusterId": "default",
        "commitWithin": 10000,
        "solrParams": {
          "name": "DC_Large_Populate_Signals_DS_job_state",
          "numShards": 1,
          "replicationFactor": 1
        },
        "type": "CRAWL_DB",
        "relatedCollectionId": "DC_Large",
        "metadata": {},
        "updates": [
          {
            "userId": "admin",
            "timestamp": "2021-04-08T00:57:28.676Z"
          },
          {
            "userId": "ashumway",
            "timestamp": "2022-02-08T18:36:25.431Z"
          },
          {
            "userId": "ashumway",
            "timestamp": "2022-02-08T18:36:25.438Z"
          }
        ]
      },
      {
        "id": "DC_Large_TYPEAHEAD_v3_signals",
        "createdAt": "2021-04-05T20:40:39.493Z",
        "searchClusterId": "default",
        "commitWithin": 300000,
        "solrParams": {
          "name": "DC_Large_TYPEAHEAD_v3_signals",
          "numShards": 2,
          "replicationFactor": 2,
          "maxShardsPerNode": 2,
          "configTemplate": "solr/conf/insights.zip"
        },
        "type": "SIGNALS",
        "relatedCollectionId": "DC_Large_TYPEAHEAD_v3",
        "metadata": {},
        "updates": [
          {
            "userId": "admin",
            "timestamp": "2021-04-05T20:40:45.866Z"
          },
          {
            "userId": "ashumway",
            "timestamp": "2021-12-09T01:14:39.913Z"
          },
          {
            "userId": "ashumway",
            "timestamp": "2021-12-09T01:14:39.916Z"
          },
          {
            "userId": "ashumway",
            "timestamp": "2021-12-14T22:16:37.290Z"
          },
          {
            "userId": "ashumway",
            "timestamp": "2021-12-14T22:16:37.294Z"
          },
          {
            "userId": "ashumway",
            "timestamp": "2022-02-08T18:34:54.680Z"
          },
          {
            "userId": "ashumway",
            "timestamp": "2022-02-08T18:34:54.687Z"
          }
        ]
      },
      {
        "id": "DC_Large_TYPEAHEAD_v3_signals_aggr",
        "createdAt": "2021-04-05T20:40:46.092Z",
        "searchClusterId": "default",
        "commitWithin": 300000,
        "solrParams": {
          "name": "DC_Large_TYPEAHEAD_v3_signals_aggr",
          "numShards": 1,
          "replicationFactor": 2,
          "maxShardsPerNode": 1
        },
        "type": "SIGNALS_AGGREGATION",
        "relatedCollectionId": "DC_Large_TYPEAHEAD_v3",
        "metadata": {},
        "updates": [
          {
            "userId": "admin",
            "timestamp": "2021-04-05T20:40:50.679Z"
          },
          {
            "userId": "ashumway",
            "timestamp": "2021-12-09T01:14:43.175Z"
          },
          {
            "userId": "ashumway",
            "timestamp": "2021-12-09T01:14:43.180Z"
          },
          {
            "userId": "ashumway",
            "timestamp": "2021-12-14T22:16:40.633Z"
          },
          {
            "userId": "ashumway",
            "timestamp": "2021-12-14T22:16:40.638Z"
          },
          {
            "userId": "ashumway",
            "timestamp": "2022-02-08T18:34:58.097Z"
          },
          {
            "userId": "ashumway",
            "timestamp": "2022-02-08T18:34:58.103Z"
          }
        ]
      },
      {
        "id": "DC_Large_TYPEAHEAD_v4",
        "createdAt": "2021-02-11T22:10:02.772Z",
        "searchClusterId": "default",
        "commitWithin": 10000,
        "solrParams": {
          "name": "DC_Large_TYPEAHEAD_v4",
          "numShards": 2,
          "replicationFactor": 1,
          "maxShardsPerNode": 2
        },
        "type": "DATA",
        "metadata": {},
        "updates": [
          {
            "userId": "admin",
            "timestamp": "2021-02-11T22:10:07.065Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-02-11T22:10:07.495Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-02-11T22:10:07.498Z"
          },
          {
            "userId": "ashumway",
            "timestamp": "2022-02-08T18:36:27.705Z"
          },
          {
            "userId": "ashumway",
            "timestamp": "2022-02-08T18:36:27.711Z"
          }
        ]
      },
      {
        "id": "DC_Large_TYPEAHEAD_v4_signals",
        "createdAt": "2021-07-14T21:32:45.454Z",
        "searchClusterId": "default",
        "commitWithin": 300000,
        "solrParams": {
          "name": "DC_Large_TYPEAHEAD_v4_signals",
          "numShards": 2,
          "replicationFactor": 2,
          "maxShardsPerNode": 2,
          "configTemplate": "solr/conf/insights.zip"
        },
        "type": "SIGNALS",
        "relatedCollectionId": "DC_Large_TYPEAHEAD_v4",
        "metadata": {},
        "updates": [
          {
            "userId": "admin",
            "timestamp": "2021-07-14T21:32:53.169Z"
          },
          {
            "userId": "ashumway",
            "timestamp": "2021-12-09T01:14:47.106Z"
          },
          {
            "userId": "ashumway",
            "timestamp": "2021-12-09T01:14:47.110Z"
          },
          {
            "userId": "ashumway",
            "timestamp": "2021-12-14T22:16:46.442Z"
          },
          {
            "userId": "ashumway",
            "timestamp": "2021-12-14T22:16:46.446Z"
          },
          {
            "userId": "ashumway",
            "timestamp": "2022-02-08T18:35:01.381Z"
          },
          {
            "userId": "ashumway",
            "timestamp": "2022-02-08T18:35:01.386Z"
          }
        ]
      },
      {
        "id": "DC_Large_TYPEAHEAD_v4_signals_aggr",
        "createdAt": "2021-07-14T21:32:53.298Z",
        "searchClusterId": "default",
        "commitWithin": 300000,
        "solrParams": {
          "name": "DC_Large_TYPEAHEAD_v4_signals_aggr",
          "numShards": 1,
          "replicationFactor": 2,
          "maxShardsPerNode": 1
        },
        "type": "SIGNALS_AGGREGATION",
        "relatedCollectionId": "DC_Large_TYPEAHEAD_v4",
        "metadata": {},
        "updates": [
          {
            "userId": "admin",
            "timestamp": "2021-07-14T21:32:59.689Z"
          },
          {
            "userId": "ashumway",
            "timestamp": "2021-12-09T01:14:59.464Z"
          },
          {
            "userId": "ashumway",
            "timestamp": "2021-12-09T01:14:59.468Z"
          },
          {
            "userId": "ashumway",
            "timestamp": "2021-12-14T22:17:10.388Z"
          },
          {
            "userId": "ashumway",
            "timestamp": "2021-12-14T22:17:10.392Z"
          },
          {
            "userId": "ashumway",
            "timestamp": "2022-02-08T18:35:04.544Z"
          },
          {
            "userId": "ashumway",
            "timestamp": "2022-02-08T18:35:04.550Z"
          }
        ]
      },
      {
        "id": "DC_Large_job_reports",
        "createdAt": "2020-05-05T22:41:35.704Z",
        "searchClusterId": "default",
        "commitWithin": 10000,
        "solrParams": {
          "name": "DC_Large_job_reports",
          "numShards": 1,
          "replicationFactor": 1
        },
        "type": "JOB_REPORTS",
        "relatedCollectionId": "DC_Large",
        "metadata": {},
        "updates": [
          {
            "userId": "ashumway",
            "timestamp": "2022-02-08T18:36:30.399Z"
          },
          {
            "userId": "ashumway",
            "timestamp": "2022-02-08T18:36:30.406Z"
          }
        ]
      },
      {
        "id": "DC_Large_query_rewrite",
        "createdAt": "2020-05-05T22:41:35.713Z",
        "searchClusterId": "default",
        "commitWithin": 10000,
        "solrParams": {
          "name": "DC_Large_query_rewrite",
          "numShards": 1,
          "replicationFactor": 1,
          "configTemplate": "solr/conf/query_rewrite.zip"
        },
        "type": "QUERY_REWRITE",
        "relatedCollectionId": "DC_Large",
        "metadata": {},
        "updates": [
          {
            "userId": "ashumway",
            "timestamp": "2022-02-08T18:35:07.513Z"
          },
          {
            "userId": "ashumway",
            "timestamp": "2022-02-08T18:35:07.520Z"
          }
        ]
      },
      {
        "id": "DC_Large_query_rewrite_staging",
        "createdAt": "2020-05-05T22:41:35.719Z",
        "searchClusterId": "default",
        "commitWithin": 10000,
        "solrParams": {
          "name": "DC_Large_query_rewrite_staging",
          "numShards": 1,
          "replicationFactor": 1,
          "configTemplate": "solr/conf/query_rewrite.zip"
        },
        "type": "QUERY_REWRITE",
        "relatedCollectionId": "DC_Large",
        "metadata": {},
        "updates": [
          {
            "userId": "ashumway",
            "timestamp": "2022-02-08T18:35:09.985Z"
          },
          {
            "userId": "ashumway",
            "timestamp": "2022-02-08T18:35:09.992Z"
          }
        ]
      },
      {
        "id": "DC_Large_signals",
        "createdAt": "2020-05-05T22:41:49.659Z",
        "searchClusterId": "default",
        "commitWithin": 300000,
        "solrParams": {
          "name": "DC_Large_signals",
          "numShards": 2,
          "replicationFactor": 1,
          "maxShardsPerNode": 2,
          "configTemplate": "solr/conf/insights.zip"
        },
        "type": "SIGNALS",
        "relatedCollectionId": "DC_Large",
        "metadata": {},
        "updates": [
          {
            "userId": "ashumway",
            "timestamp": "2021-12-09T01:15:07.960Z"
          },
          {
            "userId": "ashumway",
            "timestamp": "2021-12-09T01:15:07.965Z"
          },
          {
            "userId": "ashumway",
            "timestamp": "2021-12-14T22:17:36.158Z"
          },
          {
            "userId": "ashumway",
            "timestamp": "2021-12-14T22:17:36.162Z"
          },
          {
            "userId": "ashumway",
            "timestamp": "2022-02-08T18:35:12.439Z"
          },
          {
            "userId": "ashumway",
            "timestamp": "2022-02-08T18:35:12.446Z"
          }
        ]
      },
      {
        "id": "DC_Large_signals_aggr",
        "createdAt": "2020-05-05T22:41:59.218Z",
        "searchClusterId": "default",
        "commitWithin": 300000,
        "solrParams": {
          "name": "DC_Large_signals_aggr",
          "numShards": 1,
          "replicationFactor": 1,
          "maxShardsPerNode": 1
        },
        "type": "SIGNALS_AGGREGATION",
        "relatedCollectionId": "DC_Large",
        "metadata": {},
        "updates": [
          {
            "userId": "ashumway",
            "timestamp": "2021-12-09T01:14:38.526Z"
          },
          {
            "userId": "ashumway",
            "timestamp": "2021-12-09T01:14:38.531Z"
          },
          {
            "userId": "ashumway",
            "timestamp": "2021-12-14T22:16:35.087Z"
          },
          {
            "userId": "ashumway",
            "timestamp": "2021-12-14T22:16:35.091Z"
          },
          {
            "userId": "ashumway",
            "timestamp": "2022-02-08T18:35:15.943Z"
          },
          {
            "userId": "ashumway",
            "timestamp": "2022-02-08T18:35:15.949Z"
          }
        ]
      },
      {
        "id": "DC_Large_user_prefs",
        "createdAt": "2020-05-05T22:41:35.698Z",
        "searchClusterId": "default",
        "commitWithin": 10000,
        "solrParams": {
          "name": "DC_Large_user_prefs",
          "numShards": 1,
          "replicationFactor": 1,
          "configTemplate": "solr/conf/user_prefs.zip"
        },
        "type": "USER_PREFS",
        "relatedCollectionId": "DC_Large",
        "metadata": {},
        "updates": [
          {
            "userId": "ashumway",
            "timestamp": "2022-02-08T18:36:32.800Z"
          },
          {
            "userId": "ashumway",
            "timestamp": "2022-02-08T18:36:32.807Z"
          }
        ]
      },
      {
        "id": "DW_Large_signals",
        "createdAt": "2020-05-05T22:41:49.659Z",
        "searchClusterId": "default",
        "commitWithin": 300000,
        "solrParams": {
          "name": "DW_Large_signals",
          "numShards": 2,
          "replicationFactor": 1,
          "maxShardsPerNode": 2,
          "configTemplate": "solr/conf/insights.zip"
        },
        "type": "SIGNALS",
        "relatedCollectionId": "DW_Large",
        "metadata": {},
        "updates": [
          {
            "userId": "ashumway",
            "timestamp": "2021-12-09T01:15:03.487Z"
          },
          {
            "userId": "ashumway",
            "timestamp": "2021-12-09T01:15:03.491Z"
          },
          {
            "userId": "ashumway",
            "timestamp": "2021-12-14T22:17:21.675Z"
          },
          {
            "userId": "ashumway",
            "timestamp": "2021-12-14T22:17:21.679Z"
          },
          {
            "userId": "ashumway",
            "timestamp": "2022-02-08T18:35:19.083Z"
          },
          {
            "userId": "ashumway",
            "timestamp": "2022-02-08T18:35:19.089Z"
          }
        ]
      },
      {
        "id": "DW_Large_signals_aggr",
        "createdAt": "2020-05-05T22:41:59.218Z",
        "searchClusterId": "default",
        "commitWithin": 300000,
        "solrParams": {
          "name": "DW_Large_signals_aggr",
          "numShards": 1,
          "replicationFactor": 1,
          "maxShardsPerNode": 1
        },
        "type": "SIGNALS_AGGREGATION",
        "relatedCollectionId": "DW_Large",
        "metadata": {},
        "updates": [
          {
            "userId": "ashumway",
            "timestamp": "2021-12-09T01:15:04.950Z"
          },
          {
            "userId": "ashumway",
            "timestamp": "2021-12-09T01:15:04.954Z"
          },
          {
            "userId": "ashumway",
            "timestamp": "2021-12-14T22:17:27.228Z"
          },
          {
            "userId": "ashumway",
            "timestamp": "2021-12-14T22:17:27.232Z"
          },
          {
            "userId": "ashumway",
            "timestamp": "2022-02-08T18:35:21.981Z"
          },
          {
            "userId": "ashumway",
            "timestamp": "2022-02-08T18:35:21.987Z"
          }
        ]
      }
    ],
    "indexPipelines": [
      {
        "id": "DC_Large",
        "stages": [
          {
            "id": "623d9b25-25da-4ee8-a49b-7c582510a5cc",
            "ref": "lib/index/FusionServiceLib.js",
            "type": "managed-js-index",
            "skip": false,
            "label": "* Load FusionServiceLib JS",
            "secretSourceStageId": "623d9b25-25da-4ee8-a49b-7c582510a5cc"
          },
          {
            "id": "babdb074-8732-4fda-bf5a-cc39775d5708",
            "dataModelType": "dc_datamodel",
            "matchTrigger": {
              "fieldToMatch": "*",
              "valueToMatch": "*"
            },
            "mappings": [
              {
                "sourceField": "Name",
                "dataModelField": "name"
              },
              {
                "sourceField": "GroupId",
                "dataModelField": "productID"
              },
              {
                "sourceField": "SKU",
                "dataModelField": "skuID"
              },
              {
                "sourceField": "Image",
                "dataModelField": "images"
              },
              {
                "sourceField": "Categories",
                "dataModelField": "categoryID"
              },
              {
                "sourceField": "productType",
                "dataModelField": "type"
              },
              {
                "sourceField": "Price",
                "dataModelField": "price"
              },
              {
                "sourceField": "PriceRange",
                "dataModelField": "priceBucket"
              },
              {
                "sourceField": "InStock",
                "dataModelField": "inStock"
              },
              {
                "sourceField": "LastUpdated",
                "dataModelField": "lastModified"
              }
            ],
            "keepUnmappedFields": true,
            "type": "datamodel-mapping",
            "skip": false,
            "secretSourceStageId": "babdb074-8732-4fda-bf5a-cc39775d5708"
          },
          {
            "id": "acc32315-8a2b-4386-8fcb-8089b932b572",
            "translationMappings": [
              {
                "source": "productID",
                "target": "productRollup_s",
                "operation": "copy"
              },
              {
                "source": "ItemId",
                "target": "id",
                "operation": "copy"
              },
              {
                "source": "category",
                "target": "exact_category_ss",
                "operation": "copy"
              }
            ],
            "retentionMappings": [],
            "updateMappings": [],
            "unmappedRule": {
              "keep": true,
              "delete": false,
              "fieldToMoveValuesTo": "",
              "fieldToCopyValuesTo": "",
              "valueToAddToUnmappedFields": "",
              "valueToSetOnUnmappedFields": ""
            },
            "reservedFieldsMappingAllowed": false,
            "type": "field-mapping",
            "skip": false,
            "label": "General Field Mapping",
            "secretSourceStageId": "acc32315-8a2b-4386-8fcb-8089b932b572"
          },
          {
            "id": "6a965eda-fdde-4fc7-8e90-5c8ce4d5d1c1",
            "translationMappings": [
              {
                "source": "ItemId",
                "target": "id",
                "operation": "copy"
              }
            ],
            "retentionMappings": [],
            "updateMappings": [],
            "unmappedRule": {
              "keep": true,
              "delete": false,
              "fieldToMoveValuesTo": "",
              "fieldToCopyValuesTo": "",
              "valueToAddToUnmappedFields": "",
              "valueToSetOnUnmappedFields": ""
            },
            "reservedFieldsMappingAllowed": true,
            "type": "field-mapping",
            "skip": false,
            "label": "Assign ID",
            "secretSourceStageId": "6a965eda-fdde-4fc7-8e90-5c8ce4d5d1c1"
          },
          {
            "id": "b2f89a8c-0bc3-4cfa-8079-1cb5d79b84c2",
            "translationMappings": [
              {
                "source": "lastModified",
                "target": "recentDate_dt",
                "operation": "copy"
              }
            ],
            "retentionMappings": [],
            "updateMappings": [],
            "unmappedRule": {
              "keep": true,
              "delete": false,
              "fieldToMoveValuesTo": "",
              "fieldToCopyValuesTo": "",
              "valueToAddToUnmappedFields": "",
              "valueToSetOnUnmappedFields": ""
            },
            "reservedFieldsMappingAllowed": false,
            "type": "field-mapping",
            "skip": false,
            "label": "Set Recency",
            "secretSourceStageId": "b2f89a8c-0bc3-4cfa-8079-1cb5d79b84c2"
          },
          {
            "id": "0af91d4e-27dd-4e63-82e5-230bf2226c9d",
            "script": "(function () {\n    \"use strict\";\n    var UtilLib\n\n   /**********************************\n    * set a date field used for recency boosting.  THis field will be first of several candidate date fields which is also:\n    *   - not the epoch date i.e. Jan 1 1970\n    *   - at least one hour old (to avoid dates defaulting to (NOW))  \n    */\n\n    //TODO: set dateField to the name of the field which will hold the data showing how recent a document is\n    var dateField = \"recentDate_dt\";\n\n    var isDebug=false\n    function logIfDebug(message){\n      if( isDebug){\n        var args = Array.prototype.slice.call(arguments)\n        if(args.length > 0){\n           logger.info(args[0],args.slice(1));\n        }\n      }\n    }\n\n    /**\n     * @return a Joda time DateTime object if dateString can be parsed as a date, is not the epoch date and is before NOW - 1HOUR\n     */\n    function getValidDateIfPast(dateString,NOW,ctx){\n      //See if we can parse this as a date\n      logIfDebug(\"\\nchecking DateString: {}\\n\",dateString)\n      var dt = UtilLib.parseDate(dateString)\n      logIfDebug(\"\\n\\nDateString: {} parsed to {}\\n\\n\",dateString,dt)\n      // perform validation checks\n      if(dt){\n        logIfDebug(\"\\ndt is {} of type {}\\n\",dtTime,UtilLib.getTypeOf(dt,true))\n        var dtTime = dt.getMillis()\n        //reject epoch times and \"future\" times where \"future\" is NOW - 1 hour\n        logIfDebug(\"\\ndtTime milliseconds is {}\\n\",dtTime)\n      \tif(dtTime == 0 || dtTime > (NOW.getTime() - (1000*60*60))){\n          dt = null;\n        }\n      }\n      return dt\n    }\n    /**\n     * param doc - the doc being indexed\n     * param dates - an array of date field names to check\n     * param NOW the current date/time as a java.util.Date\n     * @return a Map with \"validDate\" holding the first date from the dates fields  which is valid and \"validDateSource\" containing the field      */\n    function getValidPastDate(doc,dates,NOW,ctx){\n      NOW = NOW | new java.util.Date()\n\n      for(var i = 0; i < dates.length; i++){\n        var dt = dates[i]\n        //grab the date string from the doc and check it\n        var ds = doc.getFirstFieldValue(dt)\n        logIfDebug(\"\\n\\nchecking field {} with value {}\\n\\n\",dt,ds)\n        if(ds){\n          var vdt = getValidDateIfPast(ds,NOW,ctx)\n          if(vdt){\n            return {\"validDate\":ds,\"validDateSource\":dt}\n          }\n        }\n      }\n      return null\n    }\n  \n return function(doc, ctx, collection, solrServer, solrServerFactory) {\n  \n   if(! UtilLib){UtilLib = ctx.get(\"UtilLib\")}\n   if(UtilLib){UtilLib.setDebugLogging(isDebug)}else{ throw(\"unable to load required JS dependency UtilLib\");}\n   // pick a date field for the date range histogram facet and set dateField_dt\n\n    var NOW = new java.util.Date()\n   \n   /********\n   * TODO Onsite\n   *  replace the list of fields in candidateModDtField array with the ordered list of the best fields from the various\n   *  websites crawled onsite.  These will be evaluated in order and the first one which is not an epoch date and is also\n   * in the past will be selected.\n   ********/\n    // make a list of candidate fields which will be used to determine dateField\n    // the intent is to find the most accurate modified date but to ignore dates using \n    // the default Jan 1 1970 epoc.  We should also ignore dates which are within one Hour of NOW as they are \n    // likely just using the current time to populate the date.\n \n    var candidateModDtFields = [\"lastModified_dt\"\n                               ,'Last-Modified'\n                               ,'tags_DC.date.created'\n                               ,'tags_og:updated_time'\n                               ,'tags_article:modified_time'\n                               ,'tags_article:published_time'\n                               ,'tags_publicationDate'\n                               ,'fetchedDate_dt'\n                              ]\n    \n    // first check and see if the doc ID url contains a date format CCYY-MM-DD\n    var id = doc.getId();\n    logIfDebug(\"\\n\\nChecking for date in {}\\n\\n\",id)\n  \tvar aurldate = \"\";\n    if (id) {\n      //TODO. adjust the regex which finds a date in the URL.  Or get rid of this block if your id/URLs don't have \"as-of\" in the path\n      var myRegex = RegExp('([0-9]{4})/([0-9]{2})/([0-9]{2})/');\n      var match = myRegex.exec(id);\n      if (match) {\n        var year = match[1];\n        var month = match[2];\n        var day = match[3];\n        aurldate = year+\"-\"+month+\"-\"+day+\"T\"+\"12:00:00Z\";\n      }\n    }\n    \n    doc.removeFields(dateField)\n    if (aurldate) { \n      doc.setField(dateField, aurldate);\n      doc.setField(dateField + \"_source_s\",\"id\")\n    }\n    else {\n      var latest = getValidPastDate(doc,candidateModDtFields,NOW,ctx)\n      if(latest){\n        doc.setField(dateField,latest.validDate)\n        doc.setField(dateField + \"_source_s\",latest.validDateSource)\n      }\n    }\n  \n    return doc;\n\n  };\n})();\n",
            "type": "javascript-index",
            "skip": true,
            "label": "RECENCY JS:calculate recency date",
            "condition": "true\n/* TODO: populate the candidateModDtFields array with\nfield names that reflect how recent a document is.  The script\nwill set recentDate_dt to the value of the first candidate which\nis not:\n* blank or null\n* set to the date epoc of Jan 1 1970\n* not after 10 minutes before NOW (to avoid grabbing dates set as NOW by the source being crawled)\n*/",
            "scriptAsArray": [
              "(function () {",
              "    \"use strict\";",
              "    var UtilLib",
              "",
              "   /**********************************",
              "    * set a date field used for recency boosting.  THis field will be first of several candidate date fields which is also:",
              "    *   - not the epoch date i.e. Jan 1 1970",
              "    *   - at least one hour old (to avoid dates defaulting to (NOW))  ",
              "    */",
              "",
              "    //TODO: set dateField to the name of the field which will hold the data showing how recent a document is",
              "    var dateField = \"recentDate_dt\";",
              "",
              "    var isDebug=false",
              "    function logIfDebug(message){",
              "      if( isDebug){",
              "        var args = Array.prototype.slice.call(arguments)",
              "        if(args.length > 0){",
              "           logger.info(args[0],args.slice(1));",
              "        }",
              "      }",
              "    }",
              "",
              "    /**",
              "     * @return a Joda time DateTime object if dateString can be parsed as a date, is not the epoch date and is before NOW - 1HOUR",
              "     */",
              "    function getValidDateIfPast(dateString,NOW,ctx){",
              "      //See if we can parse this as a date",
              "      logIfDebug(\"\\nchecking DateString: {}\\n\",dateString)",
              "      var dt = UtilLib.parseDate(dateString)",
              "      logIfDebug(\"\\n\\nDateString: {} parsed to {}\\n\\n\",dateString,dt)",
              "      // perform validation checks",
              "      if(dt){",
              "        logIfDebug(\"\\ndt is {} of type {}\\n\",dtTime,UtilLib.getTypeOf(dt,true))",
              "        var dtTime = dt.getMillis()",
              "        //reject epoch times and \"future\" times where \"future\" is NOW - 1 hour",
              "        logIfDebug(\"\\ndtTime milliseconds is {}\\n\",dtTime)",
              "      \tif(dtTime == 0 || dtTime > (NOW.getTime() - (1000*60*60))){",
              "          dt = null;",
              "        }",
              "      }",
              "      return dt",
              "    }",
              "    /**",
              "     * param doc - the doc being indexed",
              "     * param dates - an array of date field names to check",
              "     * param NOW the current date/time as a java.util.Date",
              "     * @return a Map with \"validDate\" holding the first date from the dates fields  which is valid and \"validDateSource\" containing the field      */",
              "    function getValidPastDate(doc,dates,NOW,ctx){",
              "      NOW = NOW | new java.util.Date()",
              "",
              "      for(var i = 0; i < dates.length; i++){",
              "        var dt = dates[i]",
              "        //grab the date string from the doc and check it",
              "        var ds = doc.getFirstFieldValue(dt)",
              "        logIfDebug(\"\\n\\nchecking field {} with value {}\\n\\n\",dt,ds)",
              "        if(ds){",
              "          var vdt = getValidDateIfPast(ds,NOW,ctx)",
              "          if(vdt){",
              "            return {\"validDate\":ds,\"validDateSource\":dt}",
              "          }",
              "        }",
              "      }",
              "      return null",
              "    }",
              "  ",
              " return function(doc, ctx, collection, solrServer, solrServerFactory) {",
              "  ",
              "   if(! UtilLib){UtilLib = ctx.get(\"UtilLib\")}",
              "   if(UtilLib){UtilLib.setDebugLogging(isDebug)}else{ throw(\"unable to load required JS dependency UtilLib\");}",
              "   // pick a date field for the date range histogram facet and set dateField_dt",
              "",
              "    var NOW = new java.util.Date()",
              "   ",
              "   /********",
              "   * TODO Onsite",
              "   *  replace the list of fields in candidateModDtField array with the ordered list of the best fields from the various",
              "   *  websites crawled onsite.  These will be evaluated in order and the first one which is not an epoch date and is also",
              "   * in the past will be selected.",
              "   ********/",
              "    // make a list of candidate fields which will be used to determine dateField",
              "    // the intent is to find the most accurate modified date but to ignore dates using ",
              "    // the default Jan 1 1970 epoc.  We should also ignore dates which are within one Hour of NOW as they are ",
              "    // likely just using the current time to populate the date.",
              " ",
              "    var candidateModDtFields = [\"lastModified_dt\"",
              "                               ,'Last-Modified'",
              "                               ,'tags_DC.date.created'",
              "                               ,'tags_og:updated_time'",
              "                               ,'tags_article:modified_time'",
              "                               ,'tags_article:published_time'",
              "                               ,'tags_publicationDate'",
              "                               ,'fetchedDate_dt'",
              "                              ]",
              "    ",
              "    // first check and see if the doc ID url contains a date format CCYY-MM-DD",
              "    var id = doc.getId();",
              "    logIfDebug(\"\\n\\nChecking for date in {}\\n\\n\",id)",
              "  \tvar aurldate = \"\";",
              "    if (id) {",
              "      //TODO. adjust the regex which finds a date in the URL.  Or get rid of this block if your id/URLs don't have \"as-of\" in the path",
              "      var myRegex = RegExp('([0-9]{4})/([0-9]{2})/([0-9]{2})/');",
              "      var match = myRegex.exec(id);",
              "      if (match) {",
              "        var year = match[1];",
              "        var month = match[2];",
              "        var day = match[3];",
              "        aurldate = year+\"-\"+month+\"-\"+day+\"T\"+\"12:00:00Z\";",
              "      }",
              "    }",
              "    ",
              "    doc.removeFields(dateField)",
              "    if (aurldate) { ",
              "      doc.setField(dateField, aurldate);",
              "      doc.setField(dateField + \"_source_s\",\"id\")",
              "    }",
              "    else {",
              "      var latest = getValidPastDate(doc,candidateModDtFields,NOW,ctx)",
              "      if(latest){",
              "        doc.setField(dateField,latest.validDate)",
              "        doc.setField(dateField + \"_source_s\",latest.validDateSource)",
              "      }",
              "    }",
              "  ",
              "    return doc;",
              "",
              "  };",
              "})();",
              ""
            ],
            "secretSourceStageId": "0af91d4e-27dd-4e63-82e5-230bf2226c9d"
          },
          {
            "id": "29a11473-007f-4acd-ab1d-7df081749c37",
            "script": "(function () {\n  'use strict';\n\n  var LinkedHashMap = Java.type('java.util.LinkedHashMap');\n\n  // The lucidworks.ps util libraries\n  var UtilLib;\n  var FusionServiceLib;\n\n  // Global to hold the category id and path map\n  var categoryIdToPathMap;\n\n  var LIST_SEPARATOR = \"|\";\n  var CAT_ID_PATH_FLD = \"categoryID\";\n  var CAT_NAME_PATH_FLD = \"category\";\n  var CAT_MAP_BLOB = \"CAT_ID_MAPPING_cats_full.txt\"\n  var CAT_MAP_SEPARATOR = \"|\";\n\n  function splitCatID(catID) {\n    return catID.split(LIST_SEPARATOR);\n    //logger.info(catID);\n  }\n\n  return function(doc, ctx) {\n\n    // Load in lucidworks.ps util library\n    if (null == UtilLib) {\n      UtilLib = ctx.UtilLib;\n    }\n\n    // Load in lucidworks.ps FusionService library\n    if (null == FusionServiceLib) {\n      FusionServiceLib = ctx.FusionServiceLib;\n    }\n\n    if (doc.getId() == null) {\n      return;\n    }\n\n    //Don't do anything if the category ID field doesn't exit\n    if (doc.hasField(CAT_ID_PATH_FLD)){\n\n      //Lazyload textfile and map from blob\n      if (null == categoryIdToPathMap){\n        logger.info(\"...loading blob\")\n        var categoryIdText = FusionServiceLib.getStringBlob(CAT_MAP_BLOB);  //get text map\n        var catRows = categoryIdText.split(\"\\n\");\n\n        categoryIdToPathMap = new LinkedHashMap();\n        for (var row=0; row <= catRows.length; row++){\n          //logger.info(\"row \"+row+\":\" + catRows[row]);\n          if (catRows[row]){\n            var splitRow = catRows[row].split(CAT_MAP_SEPARATOR);\n            if (splitRow.length > 1){\n              var mapKey = splitRow[0];\n              var mapVal = splitRow[1];\n              categoryIdToPathMap.put(mapKey, mapVal);\n            }\n            else {\n                logger.info(\"Bad row in category map: \"+catRows);\n            }  \n          }\n          else {\n              logger.info(\"Empty row in category map\");\n          }\n        }\n      }\n\n      //Split CatID field\n      //var catIdList = splitCatID(doc.getFirstFieldValue(CAT_ID_PATH_FLD));  \n      \n      var catIdLists = doc.getFieldValues(CAT_ID_PATH_FLD);  \n\n      //Grab names from map\n      if(catIdLists){\n        for (var cil = 0; cil < catIdLists.length; cil++) {\n\n          var catIdArray = splitCatID(catIdLists[cil]);\n          //logger.info(\"catIdArray:\" + catIdArray);\n          var catNameArray = [];\n\n          for (var i=0; i < catIdArray.length;i++){\n            //Grab name from map\n            var catName = categoryIdToPathMap.get(catIdArray[i])\n            catNameArray.push(catName || catIdArray[i]);  //if the catID didn't map to a name, just use the ID\n          }\n\n          var catNameList = catNameArray.join(LIST_SEPARATOR);\n          //logger.info(catNameList);\n          doc.addField(CAT_NAME_PATH_FLD, catNameList);\n        }\n      }\n\n    }\n\n    return doc;\n  }\n})();",
            "type": "javascript-index",
            "skip": false,
            "label": "CAT_ID_MAPPING GetCatNamesFromId ",
            "scriptAsArray": [
              "(function () {",
              "  'use strict';",
              "",
              "  var LinkedHashMap = Java.type('java.util.LinkedHashMap');",
              "",
              "  // The lucidworks.ps util libraries",
              "  var UtilLib;",
              "  var FusionServiceLib;",
              "",
              "  // Global to hold the category id and path map",
              "  var categoryIdToPathMap;",
              "",
              "  var LIST_SEPARATOR = \"|\";",
              "  var CAT_ID_PATH_FLD = \"categoryID\";",
              "  var CAT_NAME_PATH_FLD = \"category\";",
              "  var CAT_MAP_BLOB = \"CAT_ID_MAPPING_cats_full.txt\"",
              "  var CAT_MAP_SEPARATOR = \"|\";",
              "",
              "  function splitCatID(catID) {",
              "    return catID.split(LIST_SEPARATOR);",
              "    //logger.info(catID);",
              "  }",
              "",
              "  return function(doc, ctx) {",
              "",
              "    // Load in lucidworks.ps util library",
              "    if (null == UtilLib) {",
              "      UtilLib = ctx.UtilLib;",
              "    }",
              "",
              "    // Load in lucidworks.ps FusionService library",
              "    if (null == FusionServiceLib) {",
              "      FusionServiceLib = ctx.FusionServiceLib;",
              "    }",
              "",
              "    if (doc.getId() == null) {",
              "      return;",
              "    }",
              "",
              "    //Don't do anything if the category ID field doesn't exit",
              "    if (doc.hasField(CAT_ID_PATH_FLD)){",
              "",
              "      //Lazyload textfile and map from blob",
              "      if (null == categoryIdToPathMap){",
              "        logger.info(\"...loading blob\")",
              "        var categoryIdText = FusionServiceLib.getStringBlob(CAT_MAP_BLOB);  //get text map",
              "        var catRows = categoryIdText.split(\"\\n\");",
              "",
              "        categoryIdToPathMap = new LinkedHashMap();",
              "        for (var row=0; row <= catRows.length; row++){",
              "          //logger.info(\"row \"+row+\":\" + catRows[row]);",
              "          if (catRows[row]){",
              "            var splitRow = catRows[row].split(CAT_MAP_SEPARATOR);",
              "            if (splitRow.length > 1){",
              "              var mapKey = splitRow[0];",
              "              var mapVal = splitRow[1];",
              "              categoryIdToPathMap.put(mapKey, mapVal);",
              "            }",
              "            else {",
              "                logger.info(\"Bad row in category map: \"+catRows);",
              "            }  ",
              "          }",
              "          else {",
              "              logger.info(\"Empty row in category map\");",
              "          }",
              "        }",
              "      }",
              "",
              "      //Split CatID field",
              "      //var catIdList = splitCatID(doc.getFirstFieldValue(CAT_ID_PATH_FLD));  ",
              "      ",
              "      var catIdLists = doc.getFieldValues(CAT_ID_PATH_FLD);  ",
              "",
              "      //Grab names from map",
              "      if(catIdLists){",
              "        for (var cil = 0; cil < catIdLists.length; cil++) {",
              "",
              "          var catIdArray = splitCatID(catIdLists[cil]);",
              "          //logger.info(\"catIdArray:\" + catIdArray);",
              "          var catNameArray = [];",
              "",
              "          for (var i=0; i < catIdArray.length;i++){",
              "            //Grab name from map",
              "            var catName = categoryIdToPathMap.get(catIdArray[i])",
              "            catNameArray.push(catName || catIdArray[i]);  //if the catID didn't map to a name, just use the ID",
              "          }",
              "",
              "          var catNameList = catNameArray.join(LIST_SEPARATOR);",
              "          //logger.info(catNameList);",
              "          doc.addField(CAT_NAME_PATH_FLD, catNameList);",
              "        }",
              "      }",
              "",
              "    }",
              "",
              "    return doc;",
              "  }",
              "})();"
            ],
            "secretSourceStageId": "29a11473-007f-4acd-ab1d-7df081749c37"
          },
          {
            "id": "eb8d9a31-2f62-4e4c-9c52-7fe01cf515ec",
            "script": "function (doc, ctx) {\n\n  var PATH_SEPARATOR = \"|\";\n  //var TAXO_PREFIX = \"depth_\";\n  var TAXO_SUFFIX = \"Depth\";\n\n  var taxoFlds = [\"category\",\"categoryID\"];\n\n  //This logic assumes paths are in the format: \"node1/node2/node3\" (where \"/\" is the path separator); ie, no leading or trailing separators\n  //Multiple paths in the same field are supported: [\"node1/node2/node3\", \"node6/node7/node8\"]\n  //\n  // If a field named \"catPath\" contains this value: [\"node1/node2/node3\", \"node6/node7/node8\"]\n  // ... a new field called \"depth_catPath\" will be created as follows (where prefix suggests depth)\n  //\n  //   [\"0/node1\", \n  //    \"1/node1/node2\", \n  //    \"2/node1/node2/node3\",\n  //    \"0/node6/\",\n  //    \"1/node6/node7\",\n  //    \"2/node6/node7/node8\"]\n  //\n\n\n  for (i = 0; i < taxoFlds.length; i++) {\n    //logger.info(\"TAXO FLD:\"+taxoFlds[i]);\n\n    var taxo = doc.getFieldValues(taxoFlds[i]);  \n\n    if(taxo){\n      var taxoDepthFld = taxoFlds[i] + TAXO_SUFFIX;\n\n      //create depth-aware taxo field \n      for (var j = 0; j < taxo.length; j++) {\n        //var depth = 0;\n        var currPath = \"\";\n        var pathArray = taxo[j].split(PATH_SEPARATOR);\n        for (var depth = 0; depth < pathArray.length; depth++) {\n          currPath += PATH_SEPARATOR + pathArray[depth];\n          doc.addField(taxoDepthFld,depth + currPath);\n        }\n      }\n    }\n  }\n  \n  return doc;\n}",
            "type": "javascript-index",
            "skip": false,
            "label": "TAXO_NAV Create Taxo Fields",
            "scriptAsArray": [
              "function (doc, ctx) {",
              "",
              "  var PATH_SEPARATOR = \"|\";",
              "  //var TAXO_PREFIX = \"depth_\";",
              "  var TAXO_SUFFIX = \"Depth\";",
              "",
              "  var taxoFlds = [\"category\",\"categoryID\"];",
              "",
              "  //This logic assumes paths are in the format: \"node1/node2/node3\" (where \"/\" is the path separator); ie, no leading or trailing separators",
              "  //Multiple paths in the same field are supported: [\"node1/node2/node3\", \"node6/node7/node8\"]",
              "  //",
              "  // If a field named \"catPath\" contains this value: [\"node1/node2/node3\", \"node6/node7/node8\"]",
              "  // ... a new field called \"depth_catPath\" will be created as follows (where prefix suggests depth)",
              "  //",
              "  //   [\"0/node1\", ",
              "  //    \"1/node1/node2\", ",
              "  //    \"2/node1/node2/node3\",",
              "  //    \"0/node6/\",",
              "  //    \"1/node6/node7\",",
              "  //    \"2/node6/node7/node8\"]",
              "  //",
              "",
              "",
              "  for (i = 0; i < taxoFlds.length; i++) {",
              "    //logger.info(\"TAXO FLD:\"+taxoFlds[i]);",
              "",
              "    var taxo = doc.getFieldValues(taxoFlds[i]);  ",
              "",
              "    if(taxo){",
              "      var taxoDepthFld = taxoFlds[i] + TAXO_SUFFIX;",
              "",
              "      //create depth-aware taxo field ",
              "      for (var j = 0; j < taxo.length; j++) {",
              "        //var depth = 0;",
              "        var currPath = \"\";",
              "        var pathArray = taxo[j].split(PATH_SEPARATOR);",
              "        for (var depth = 0; depth < pathArray.length; depth++) {",
              "          currPath += PATH_SEPARATOR + pathArray[depth];",
              "          doc.addField(taxoDepthFld,depth + currPath);",
              "        }",
              "      }",
              "    }",
              "  }",
              "  ",
              "  return doc;",
              "}"
            ],
            "secretSourceStageId": "eb8d9a31-2f62-4e4c-9c52-7fe01cf515ec"
          },
          {
            "id": "4751a5c1-cba8-4a99-9891-620d98d2471e",
            "translationMappings": [],
            "retentionMappings": [],
            "updateMappings": [
              {
                "field": "indexed",
                "value": "<_NOW_>",
                "operation": "set"
              }
            ],
            "unmappedRule": {
              "keep": true,
              "delete": false,
              "fieldToMoveValuesTo": "",
              "fieldToCopyValuesTo": "",
              "valueToAddToUnmappedFields": "",
              "valueToSetOnUnmappedFields": ""
            },
            "reservedFieldsMappingAllowed": false,
            "type": "field-mapping",
            "skip": false,
            "label": "Set Indexed Time",
            "secretSourceStageId": "4751a5c1-cba8-4a99-9891-620d98d2471e"
          },
          {
            "id": "43e817b2-8c2c-48ad-9f2c-40d4709428f7",
            "translationMappings": [
              {
                "source": "productID",
                "target": "s100",
                "operation": "copy"
              },
              {
                "source": "skuID",
                "target": "s100",
                "operation": "copy"
              },
              {
                "source": "name",
                "target": "s100",
                "operation": "copy"
              },
              {
                "source": "type",
                "target": "s60",
                "operation": "copy"
              },
              {
                "source": "brand",
                "target": "s60",
                "operation": "copy"
              },
              {
                "source": "color",
                "target": "s60",
                "operation": "copy"
              },
              {
                "source": "colorFamily",
                "target": "s50",
                "operation": "copy"
              },
              {
                "source": "category",
                "target": "s40",
                "operation": "copy"
              },
              {
                "source": "material",
                "target": "s40",
                "operation": "copy"
              },
              {
                "source": "gender",
                "target": "s30",
                "operation": "copy"
              },
              {
                "source": "size",
                "target": "s30",
                "operation": "copy"
              },
              {
                "source": "description",
                "target": "s20",
                "operation": "copy"
              },
              {
                "source": "manufacturer",
                "target": "s20",
                "operation": "copy"
              },
              {
                "source": "searchable",
                "target": "s20",
                "operation": "copy"
              }
            ],
            "retentionMappings": [],
            "updateMappings": [],
            "unmappedRule": {
              "keep": true,
              "delete": false,
              "fieldToMoveValuesTo": "",
              "fieldToCopyValuesTo": "",
              "valueToAddToUnmappedFields": "",
              "valueToSetOnUnmappedFields": ""
            },
            "reservedFieldsMappingAllowed": false,
            "type": "field-mapping",
            "skip": false,
            "label": "Scaled Search Field Mapping",
            "secretSourceStageId": "43e817b2-8c2c-48ad-9f2c-40d4709428f7"
          },
          {
            "id": "2adc2583-6442-4fac-8529-0198714976bf",
            "script": "function (doc, ctx) {\n  var FIRST = 100;\n  var LAST = 10;\n  var prefix = \"s\";\n  logger.info(\"^^^^^^^^^^^^^^^^^^^^^^^^^^\")\n  for (var i = FIRST; i>=LAST; i=i-10){\n    var curField = \"s\" + i;\n    logger.info(curField + '=' + doc.getFieldValues(curField));\n  }\n  logger.info(\"^^^^^^^^^^^^^^^^^^^^^^^^^^\")\n  return doc;\n}",
            "type": "javascript-index",
            "skip": true,
            "label": "log it!",
            "scriptAsArray": [
              "function (doc, ctx) {",
              "  var FIRST = 100;",
              "  var LAST = 10;",
              "  var prefix = \"s\";",
              "  logger.info(\"^^^^^^^^^^^^^^^^^^^^^^^^^^\")",
              "  for (var i = FIRST; i>=LAST; i=i-10){",
              "    var curField = \"s\" + i;",
              "    logger.info(curField + '=' + doc.getFieldValues(curField));",
              "  }",
              "  logger.info(\"^^^^^^^^^^^^^^^^^^^^^^^^^^\")",
              "  return doc;",
              "}"
            ],
            "secretSourceStageId": "2adc2583-6442-4fac-8529-0198714976bf"
          },
          {
            "id": "a61c95b9-b11e-471b-ac1a-a0751b8b6a64",
            "script": "// NOTE: All sXX fields must be multivalue text fields\nfunction (doc, ctx) {\n  var FIRST = 90;  //start loop with 90\n  var LAST = 10;\n  var initialVal = doc.getFieldValues(\"s100\");\n\n  cumulativeVal = [];\n\n  if (initialVal && initialVal.length>0) {\n    for (var i = 0; i < initialVal.length; i++){\n        cumulativeVal.push(initialVal[i]);\n      }\n  }\n\n  for (j = FIRST; j >= LAST; j=j-10){\n    var curField = \"s\" + j;\n    var newVal = doc.getFieldValues(curField);\n    if (newVal && newVal.length>0) { \n      for (var k = 0; k < newVal.length; k++){\n        cumulativeVal.push(newVal[k]);\n      }\n      doc.removeFields(curField);\n      for (var m = 0; m < cumulativeVal.length; m++){\n        doc.addField(curField+\"_txt\", cumulativeVal[m]);\n      }\n    }\n  }\n  return doc;\n}",
            "type": "javascript-index",
            "skip": false,
            "label": "Scaled Search Field Stacking",
            "condition": "true;\n//TODO; validate this logic",
            "scriptAsArray": [
              "// NOTE: All sXX fields must be multivalue text fields",
              "function (doc, ctx) {",
              "  var FIRST = 90;  //start loop with 90",
              "  var LAST = 10;",
              "  var initialVal = doc.getFieldValues(\"s100\");",
              "",
              "  cumulativeVal = [];",
              "",
              "  if (initialVal && initialVal.length>0) {",
              "    for (var i = 0; i < initialVal.length; i++){",
              "        cumulativeVal.push(initialVal[i]);",
              "      }",
              "  }",
              "",
              "  for (j = FIRST; j >= LAST; j=j-10){",
              "    var curField = \"s\" + j;",
              "    var newVal = doc.getFieldValues(curField);",
              "    if (newVal && newVal.length>0) { ",
              "      for (var k = 0; k < newVal.length; k++){",
              "        cumulativeVal.push(newVal[k]);",
              "      }",
              "      doc.removeFields(curField);",
              "      for (var m = 0; m < cumulativeVal.length; m++){",
              "        doc.addField(curField+\"_txt\", cumulativeVal[m]);",
              "      }",
              "    }",
              "  }",
              "  return doc;",
              "}"
            ],
            "secretSourceStageId": "a61c95b9-b11e-471b-ac1a-a0751b8b6a64"
          },
          {
            "id": "9c1aff2b-b942-482c-b543-978cb19ab031",
            "script": "function (doc, ctx) {\n  var FIRST = 100;\n  var LAST = 10;\n  var prefix = \"s\";\n  logger.info(\"AFTER:\")\n  for (var i = FIRST; i>=LAST; i=i-10){\n    var curField = \"s\" + i + \"_txt\";\n    logger.info(curField + '_txt=' + doc.getFieldValues(curField));\n  }\n  logger.info(\"^^^^^^^^^^^^^^^^^^^^^^^^^^\")\n  logger.info(\"^^^^^^^^^^^^^^^^^^^^^^^^^^\")\n  return doc;\n}",
            "type": "javascript-index",
            "skip": true,
            "label": "log it 2!",
            "scriptAsArray": [
              "function (doc, ctx) {",
              "  var FIRST = 100;",
              "  var LAST = 10;",
              "  var prefix = \"s\";",
              "  logger.info(\"AFTER:\")",
              "  for (var i = FIRST; i>=LAST; i=i-10){",
              "    var curField = \"s\" + i + \"_txt\";",
              "    logger.info(curField + '_txt=' + doc.getFieldValues(curField));",
              "  }",
              "  logger.info(\"^^^^^^^^^^^^^^^^^^^^^^^^^^\")",
              "  logger.info(\"^^^^^^^^^^^^^^^^^^^^^^^^^^\")",
              "  return doc;",
              "}"
            ],
            "secretSourceStageId": "9c1aff2b-b942-482c-b543-978cb19ab031"
          },
          {
            "id": "7830d9ad-9851-415a-a90b-4f621e94aab2",
            "translationMappings": [
              {
                "source": "productID",
                "target": "productID_s",
                "operation": "copy"
              },
              {
                "source": "productID",
                "target": "productID_t",
                "operation": "move"
              },
              {
                "source": "skuID",
                "target": "skuID_s",
                "operation": "copy"
              },
              {
                "source": "skuID",
                "target": "skuID_t",
                "operation": "move"
              },
              {
                "source": "images",
                "target": "images_ss",
                "operation": "move"
              },
              {
                "source": "name",
                "target": "name_s",
                "operation": "copy"
              },
              {
                "source": "name",
                "target": "name_t",
                "operation": "move"
              },
              {
                "source": "description",
                "target": "description_t",
                "operation": "move"
              },
              {
                "source": "category",
                "target": "category_ss",
                "operation": "copy"
              },
              {
                "source": "category",
                "target": "category_txt",
                "operation": "move"
              },
              {
                "source": "categoryDepth",
                "target": "categoryDepth_ss",
                "operation": "move"
              },
              {
                "source": "categoryID",
                "target": "categoryID_ss",
                "operation": "move"
              },
              {
                "source": "categoryIDDepth",
                "target": "categoryIDDepth_ss",
                "operation": "move"
              },
              {
                "source": "type",
                "target": "type_ss",
                "operation": "copy"
              },
              {
                "source": "type",
                "target": "type_txt",
                "operation": "move"
              },
              {
                "source": "price",
                "target": "price_d",
                "operation": "copy"
              },
              {
                "source": "price",
                "target": "price_i",
                "operation": "move"
              },
              {
                "source": "priceBucket",
                "target": "priceBucket_s",
                "operation": "move"
              },
              {
                "source": "brand",
                "target": "brand_s",
                "operation": "copy"
              },
              {
                "source": "brand",
                "target": "brand_t",
                "operation": "move"
              },
              {
                "source": "color",
                "target": "color_s",
                "operation": "copy"
              },
              {
                "source": "color",
                "target": "color_t",
                "operation": "move"
              },
              {
                "source": "colorFamily",
                "target": "colorFamily_s",
                "operation": "copy"
              },
              {
                "source": "colorFamily",
                "target": "colorFamily_t",
                "operation": "move"
              },
              {
                "source": "manufacturer",
                "target": "manufacturer_s",
                "operation": "copy"
              },
              {
                "source": "manufacturer",
                "target": "manufacturer_t",
                "operation": "move"
              },
              {
                "source": "manufacturerID",
                "target": "manufacturerID_s",
                "operation": "move"
              },
              {
                "source": "inStock",
                "target": "inStock_b",
                "operation": "move"
              },
              {
                "source": "displayable",
                "target": "displayable_b",
                "operation": "move"
              },
              {
                "source": "availability",
                "target": "availability_ss",
                "operation": "move"
              },
              {
                "source": "salesRank",
                "target": "salesRank_l",
                "operation": "move"
              },
              {
                "source": "salesVolume",
                "target": "salesVolume_l",
                "operation": "move"
              },
              {
                "source": "gender",
                "target": "gender_ss",
                "operation": "copy"
              },
              {
                "source": "gender",
                "target": "gender_t",
                "operation": "move"
              },
              {
                "source": "size",
                "target": "size_s",
                "operation": "copy"
              },
              {
                "source": "size",
                "target": "size_t",
                "operation": "move"
              },
              {
                "source": "material",
                "target": "material_s",
                "operation": "copy"
              },
              {
                "source": "material",
                "target": "material_t",
                "operation": "move"
              },
              {
                "source": "dimensions",
                "target": "dimensions_s",
                "operation": "copy"
              },
              {
                "source": "dimensions",
                "target": "dimensions_t",
                "operation": "move"
              },
              {
                "source": "searchable",
                "target": "searchable_txt",
                "operation": "move"
              },
              {
                "source": "productRelease",
                "target": "productRelease_dt",
                "operation": "move"
              },
              {
                "source": "lastModified",
                "target": "lastModified_dt",
                "operation": "move"
              },
              {
                "source": "created",
                "target": "created_dt",
                "operation": "move"
              },
              {
                "source": "indexed",
                "target": "indexed_dt",
                "operation": "move"
              }
            ],
            "retentionMappings": [],
            "updateMappings": [],
            "unmappedRule": {
              "keep": true,
              "delete": false,
              "fieldToMoveValuesTo": "",
              "fieldToCopyValuesTo": "",
              "valueToAddToUnmappedFields": "",
              "valueToSetOnUnmappedFields": ""
            },
            "reservedFieldsMappingAllowed": false,
            "type": "field-mapping",
            "skip": false,
            "label": "Data Model Solr Field Mapping",
            "secretSourceStageId": "7830d9ad-9851-415a-a90b-4f621e94aab2"
          },
          {
            "id": "f35b9176-130a-44d3-abee-0fbd873c9da4",
            "duplicateSingleValuedFields": false,
            "fieldsToExclude": [],
            "advancedTextFieldsIndexing": true,
            "maxTextLengthForAdvancedIndexing": 100,
            "type": "solr-dynamic-field-name-mapping",
            "skip": false,
            "secretSourceStageId": "f35b9176-130a-44d3-abee-0fbd873c9da4"
          },
          {
            "id": "0f7fef71-8ea3-4b06-a6d3-7e2534409f37",
            "enforceSchema": true,
            "fieldsList": false,
            "dateFormats": [],
            "params": [],
            "bufferDocsForSolr": false,
            "allowBlacklistedRequestParameters": false,
            "type": "solr-index",
            "skip": false,
            "secretSourceStageId": "0f7fef71-8ea3-4b06-a6d3-7e2534409f37"
          }
        ],
        "updates": [
          {
            "userId": "admin",
            "timestamp": "2021-04-14T11:51:13.049Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-04-14T11:50:17.733Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-04-14T11:49:55.889Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-04-14T11:48:17.934Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-04-14T11:48:08.578Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-04-14T11:45:59.832Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-04-14T11:45:27.540Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-04-14T11:45:25.620Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-04-14T11:45:17.886Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-04-14T11:03:37.767Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-04-14T11:03:23.904Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-04-14T11:03:14.972Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-04-14T11:03:08.947Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-04-14T11:02:41.874Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-04-14T11:02:24.384Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-04-14T10:54:32.603Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-04-14T10:44:48.127Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-04-14T10:41:40.853Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-04-14T10:41:37.393Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-04-14T10:41:30.175Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-04-14T10:34:02.872Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-04-14T10:17:09.199Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-04-14T10:07:23.385Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-04-14T09:57:04.063Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-04-14T09:56:59.543Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-04-14T09:44:07.968Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-04-14T09:43:17.279Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-04-14T09:36:52.335Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-04-14T08:09:12.083Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-04-14T08:05:46.667Z"
          }
        ],
        "properties": {
          "secretSourcePipelineId": "DC_Large"
        }
      },
      {
        "id": "DC_Large-question-answering",
        "stages": [
          {
            "id": "6367eb32-72b8-42fa-9114-bfae4ce845a8",
            "translationMappings": [],
            "retentionMappings": [],
            "updateMappings": [],
            "unmappedRule": {
              "keep": true,
              "delete": false,
              "fieldToMoveValuesTo": "",
              "fieldToCopyValuesTo": "",
              "valueToAddToUnmappedFields": "",
              "valueToSetOnUnmappedFields": ""
            },
            "reservedFieldsMappingAllowed": false,
            "type": "field-mapping",
            "skip": false,
            "secretSourceStageId": "6367eb32-72b8-42fa-9114-bfae4ce845a8"
          },
          {
            "id": "2b19cb1e-4e92-429e-93d9-c7d38623c96a",
            "duplicateSingleValuedFields": false,
            "fieldsToExclude": [],
            "advancedTextFieldsIndexing": true,
            "maxTextLengthForAdvancedIndexing": 100,
            "type": "solr-dynamic-field-name-mapping",
            "skip": false,
            "secretSourceStageId": "2b19cb1e-4e92-429e-93d9-c7d38623c96a"
          },
          {
            "id": "0428bfcf-4245-40a2-b997-1289da5ca54d",
            "modelId": "change-me",
            "failOnError": false,
            "storeInContext": false,
            "inputScript": "/* \nName of the document field to feed into the encoder. \n*/\nvar documentFeatureField = \"body_t\"\n\n/* \nModel input construction. \n*/\nvar modelInput = new java.util.HashMap()\nmodelInput.put(\"text\", doc.getFirstFieldValue(documentFeatureField))\nmodelInput.put(\"pipeline\", \"index\")\nmodelInput.put(\"compress\", \"true\")\nmodelInput.put(\"unidecode\", \"true\")\nmodelInput.put(\"lowercase\", \"false\")\n\nmodelInput",
            "outputScript": "/*\nName of the field to store the compressed encoded vector in the document.\n\nCompressed vector field will be added to the document only if `compress = \"true\"` was \npassed into the `modelInput`.\n*/\nvar compressedVectorField = \"compressed_document_vector_s\"\n\n/*\nName of the field to store the uncompressed encoded vector in the document.\n\nBy default uncompressed vector wouldn't be added to the document. \nChange `keepUncompressedVector` to true if you want to keep uncompressed vector.  \n*/\nvar keepUncompressedVector = false\nvar vectorField = \"document_vector_ds\"\n\n/*\nClustering fields that keep cluster IDs and distances to the clusters.\nNOTE: Only models from the training module will provide clustering fields. \n*/\nvar clustersField = \"document_clusters_is\"\nvar distancesField = \"document_distances_ds\"\n\n/*\nVariable `numClusters` specifies how many top clusters should be kept for the document.\nThe value should be less or equal to the value in the training configuration. \nThe default value of 1 is a good choice for most cases.\n*/\nvar numClusters = 1\n\n/*\nModel output parsing.\n*/\nif (modelOutput.containsKey(\"compressed_vector\")) {\n  doc.addField(compressedVectorField, modelOutput.get(\"compressed_vector\")[0])\n}\n\nif (keepUncompressedVector) {\n  doc.addField(vectorField, modelOutput.get(\"vector\"))\n}\n\nif (numClusters > 0 && modelOutput.containsKey(\"clusters\")) {\n  doc.addField(clustersField, modelOutput.get(\"clusters\").subList(0, numClusters))\n  doc.addField(distancesField, modelOutput.get(\"distances\").subList(0, numClusters))\n}",
            "storePredictedFields": false,
            "type": "machine-learning",
            "skip": false,
            "label": "Question Answering Deep Encoding",
            "secretSourceStageId": "0428bfcf-4245-40a2-b997-1289da5ca54d"
          },
          {
            "id": "70b93782-f55a-4016-a643-fe22392c629b",
            "enforceSchema": true,
            "fieldsList": false,
            "dateFormats": [],
            "params": [],
            "bufferDocsForSolr": false,
            "allowBlacklistedRequestParameters": false,
            "type": "solr-index",
            "skip": false,
            "secretSourceStageId": "70b93782-f55a-4016-a643-fe22392c629b"
          }
        ],
        "properties": {
          "secretSourcePipelineId": "DC_Large-question-answering"
        }
      },
      {
        "id": "DC_Large-question-answering-dual-fields",
        "stages": [
          {
            "id": "7a2e1424-00f9-4035-b7b3-e2b3fd0a089b",
            "translationMappings": [],
            "retentionMappings": [],
            "updateMappings": [],
            "unmappedRule": {
              "keep": true,
              "delete": false,
              "fieldToMoveValuesTo": "",
              "fieldToCopyValuesTo": "",
              "valueToAddToUnmappedFields": "",
              "valueToSetOnUnmappedFields": ""
            },
            "reservedFieldsMappingAllowed": false,
            "type": "field-mapping",
            "skip": false,
            "secretSourceStageId": "7a2e1424-00f9-4035-b7b3-e2b3fd0a089b"
          },
          {
            "id": "d96ffe67-f415-470c-8c97-ee99d8670041",
            "duplicateSingleValuedFields": false,
            "fieldsToExclude": [],
            "advancedTextFieldsIndexing": true,
            "maxTextLengthForAdvancedIndexing": 100,
            "type": "solr-dynamic-field-name-mapping",
            "skip": false,
            "secretSourceStageId": "d96ffe67-f415-470c-8c97-ee99d8670041"
          },
          {
            "id": "1abecb9f-b5ed-4038-84ee-53096d228f4a",
            "modelId": "change-me",
            "failOnError": false,
            "storeInContext": false,
            "inputScript": "/* \nName of the document field to feed into the encoder. \n*/\nvar documentFeatureField = \"question_t\"\n\n/* \nModel input construction. \n*/\nvar modelInput = new java.util.HashMap()\nmodelInput.put(\"text\", doc.getFirstFieldValue(documentFeatureField))\nmodelInput.put(\"pipeline\", \"index\")\nmodelInput.put(\"compress\", \"true\")\nmodelInput.put(\"unidecode\", \"true\")\nmodelInput.put(\"lowercase\", \"false\")\n\nmodelInput",
            "outputScript": "/*\nName of the field to store the compressed encoded vector in the document.\n\nCompressed vector field will be added to the document only if `compress = \"true\"` was \npassed into the `modelInput`.\n*/\nvar compressedVectorField = \"compressed_question_vector_s\"\n\n/*\nName of the field to store the uncompressed encoded vector in the document.\n\nBy default uncompressed vector wouldn't be added to the document. \nChange `keepUncompressedVector` to true if you want to keep uncompressed vector.  \n*/\nvar keepUncompressedVector = false\nvar vectorField = \"question_vector_ds\"\n\n/*\nClustering fields that keep cluster IDs and distances to the clusters.\nNOTE: Only models from the training module will provide clustering fields. \n*/\nvar clustersField = \"question_clusters_is\"\nvar distancesField = \"question_distances_ds\"\n\n/*\nVariable `numClusters` specifies how many top clusters should be kept for the document.\nThe value should be less or equal to the value in the training configuration. \nThe default value of 1 is a good choice for most cases.\n*/\nvar numClusters = 1\n\n/*\nModel output parsing.\n*/\nif (modelOutput.containsKey(\"compressed_vector\")) {\n  doc.addField(compressedVectorField, modelOutput.get(\"compressed_vector\")[0])\n}\n\nif (keepUncompressedVector) {\n  doc.addField(vectorField, modelOutput.get(\"vector\"))\n}\n\nif (numClusters > 0 && modelOutput.containsKey(\"clusters\")) {\n  doc.addField(clustersField, modelOutput.get(\"clusters\").subList(0, numClusters))\n  doc.addField(distancesField, modelOutput.get(\"distances\").subList(0, numClusters))\n}",
            "storePredictedFields": false,
            "type": "machine-learning",
            "skip": false,
            "label": "Question Deep Encoding",
            "secretSourceStageId": "1abecb9f-b5ed-4038-84ee-53096d228f4a"
          },
          {
            "id": "dbbb1e10-733a-4731-8ec6-482fc9a40fd6",
            "modelId": "change-me",
            "failOnError": false,
            "storeInContext": false,
            "inputScript": "/* \nName of the document field to feed into the encoder. \n*/\nvar documentFeatureField = \"answer_t\"\n\n/* \nModel input construction. \n*/\nvar modelInput = new java.util.HashMap()\nmodelInput.put(\"text\", doc.getFirstFieldValue(documentFeatureField))\nmodelInput.put(\"pipeline\", \"index\")\nmodelInput.put(\"compress\", \"true\")\nmodelInput.put(\"unidecode\", \"true\")\nmodelInput.put(\"lowercase\", \"false\")\n\nmodelInput",
            "outputScript": "/*\nName of the field to store the compressed encoded vector in the document.\n\nCompressed vector field will be added to the document only if `compress = \"true\"` was \npassed into the `modelInput`.\n*/\nvar compressedVectorField = \"compressed_answer_vector_s\"\n\n/*\nName of the field to store the uncompressed encoded vector in the document.\n\nBy default uncompressed vector wouldn't be added to the document. \nChange `keepUncompressedVector` to true if you want to keep uncompressed vector.  \n*/\nvar keepUncompressedVector = false\nvar vectorField = \"answer_vector_ds\"\n\n/*\nClustering fields that keep cluster IDs and distances to the clusters.\nNOTE: Only models from the training module will provide clustering fields. \n*/\nvar clustersField = \"answer_clusters_is\"\nvar distancesField = \"answer_distances_ds\"\n\n/*\nVariable `numClusters` specifies how many top clusters should be kept for the document.\nThe value should be less or equal to the value in the training configuration. \nThe default value of 1 is a good choice for most cases.\n*/\nvar numClusters = 1\n\n/*\nModel output parsing.\n*/\nif (modelOutput.containsKey(\"compressed_vector\")) {\n  doc.addField(compressedVectorField, modelOutput.get(\"compressed_vector\")[0])\n}\n\nif (keepUncompressedVector) {\n  doc.addField(vectorField, modelOutput.get(\"vector\"))\n}\n\nif (numClusters > 0 && modelOutput.containsKey(\"clusters\")) {\n  doc.addField(clustersField, modelOutput.get(\"clusters\").subList(0, numClusters))\n  doc.addField(distancesField, modelOutput.get(\"distances\").subList(0, numClusters))\n}",
            "storePredictedFields": false,
            "type": "machine-learning",
            "skip": false,
            "label": "Answer Deep Encoding",
            "secretSourceStageId": "dbbb1e10-733a-4731-8ec6-482fc9a40fd6"
          },
          {
            "id": "0dfcdeed-1f92-4d7e-91f9-57d55e3c3210",
            "enforceSchema": true,
            "fieldsList": false,
            "dateFormats": [],
            "params": [],
            "bufferDocsForSolr": false,
            "allowBlacklistedRequestParameters": false,
            "type": "solr-index",
            "skip": false,
            "secretSourceStageId": "0dfcdeed-1f92-4d7e-91f9-57d55e3c3210"
          }
        ],
        "properties": {
          "secretSourcePipelineId": "DC_Large-question-answering-dual-fields"
        }
      },
      {
        "id": "DC_Large_TYPEAHEAD_IPL_v4",
        "stages": [
          {
            "id": "b3736ea6-c8a8-4180-950a-1c5f47a80f49",
            "ref": "lib/index/FusionServiceLib.js",
            "type": "managed-js-index",
            "skip": false,
            "label": "MJS: load FusionServices.js",
            "secretSourceStageId": "b3736ea6-c8a8-4180-950a-1c5f47a80f49"
          },
          {
            "id": "d4b430c9-80fe-48ef-bb61-dc5ef6a53465",
            "translationMappings": [
              {
                "source": "Suggestion",
                "target": "value_s",
                "operation": "move"
              },
              {
                "source": "Weight",
                "target": "signal_count_i",
                "operation": "move"
              }
            ],
            "retentionMappings": [],
            "updateMappings": [],
            "unmappedRule": {
              "keep": true,
              "delete": false,
              "fieldToMoveValuesTo": "",
              "fieldToCopyValuesTo": "",
              "valueToAddToUnmappedFields": "",
              "valueToSetOnUnmappedFields": ""
            },
            "reservedFieldsMappingAllowed": false,
            "type": "field-mapping",
            "skip": false,
            "label": "Field Mapping for Inclusion List Suggestions",
            "secretSourceStageId": "d4b430c9-80fe-48ef-bb61-dc5ef6a53465"
          },
          {
            "id": "525fbd2f-a010-45cd-aadb-e223c994d8e4",
            "script": "(function() {\n  'use strict';\n  var FusionServiceLib;\n\n  var Pattern = java.util.regex.Pattern;\n  var Matcher = java.util.regex.Matcher;\n\n  var VALUE_FIELD = \"value_s\";\n  var TYPE_FIELD = \"ta_type\";\n  var EXCLUDE_BLOB = \"TYPEAHEAD/full-list-of-bad-words_csv-file_2018_07_30.csv\";\n\n  //Global to hold the NSFW words\n  var exclusionList;\n\n\n  return function (doc, ctx) {\n    \n    if (doc.getId() == null || doc.getFirstField(TYPE_FIELD) == null) {\n      logger.info(doc.getFirstField(\"value_s\"))\n      return doc;\n    }\n\n    if (!doc.getFirstField(TYPE_FIELD).getValue().toString() == \"entity\"){\n      return doc;\n    }\n\n    var exclude = false;\n    \n    // Load in lucidworks.ps FusionService library\n    if (null == FusionServiceLib) {\n      FusionServiceLib = ctx.FusionServiceLib;\n    }\n    \n    if(doc.hasField(VALUE_FIELD))\n    {\n      if(!exclusionList)\n      {\n        var response = FusionServiceLib.getStringBlob(EXCLUDE_BLOB);\n          if(response){\n            exclusionList = response.trim().split(\"\\n\");\n          }\n      }\n\n      var field = doc.getFirstField(VALUE_FIELD);\n      var val = field.getValue().toString();\n      \n\n      for(var i = 0; i < exclusionList.length && !exclude; i++)\n      {\n        var line = exclusionList[i];\n        var offset = line.indexOf(';');\n        if(offset > 0){\n          line = line.substr(0,offset);\n        }     \n\n        //Regex: If profane word/phrase matches an individual word in value, remove\n        //Match: apple profane-word orange\n        //No match: appleprofane-wordorange\n        var pattern = Pattern.compile(\"(?<!\\\\w)\" + line + \"(?!\\\\w)\", Pattern.CASE_INSENSITIVE);\n        var matcher = pattern.matcher(val);\n\n        exclude = matcher.find();\n      }\n    }\n\n    if(exclude)\n    {\n      return;\n    }\n    else{\n      return doc;\n    }\n}\n\n\n\n\n})();\n\n\n",
            "type": "javascript-index",
            "skip": false,
            "label": "Exclude Docs with Unwanted Terms",
            "condition": "true\n/**\n * Loads in full-list-of-bad-words_csv located in the blob store\n * For each phrase/word in the bad word lists, see if it exists in the value_s field or if the entire word is the value_s field\n * Removes the entire document if matched\n * \n * Does not run on entity type documents\n */",
            "secretSourceStageId": "525fbd2f-a010-45cd-aadb-e223c994d8e4"
          },
          {
            "id": "2d85cbdc-f6b8-42c3-b20d-3cec7be995e9",
            "script": "var clickThreshold = 100;\n\nfunction (doc) {\n  if (doc.getFirstFieldValue('signal_count_i') >= clickThreshold) {\n    return doc;\n  }\n}",
            "type": "javascript-index",
            "skip": false,
            "label": "Frequency Threshold Filter",
            "condition": "doc.hasField('signal_count_i')\n/* Checks the number of signals generated for each term\n * from the aggregated signal data and removes those\n * below a specified threshold. The threshold is defined\n * by global var threshold\n */",
            "secretSourceStageId": "2d85cbdc-f6b8-42c3-b20d-3cec7be995e9"
          },
          {
            "id": "d19efb4f-7543-46f4-80e8-0982da546b25",
            "script": "var numericCharsThreshold = 0.75; // in percentage\n\nfunction numericCharactersFilter(doc) {\n  if (doc.hasField(\"value_s\")) {\n    var query = doc.getFirstFieldValue(\"value_s\");\n    var numericChars = query.match(/[0-9]/g);\n    if (!numericChars || (numericChars.length / query.length) < numericCharsThreshold) {\n      return doc;\n    }\n  }\n}",
            "type": "javascript-index",
            "skip": false,
            "label": "Numeric Characters Filter",
            "condition": "true\n/* Checks the percentage of numeric characters in the\n * completion term and removes those over a set\n * threshold. The threshold is defined by global var\n * threshold and is expressed as a percentage in\n * decimal form.\n */",
            "secretSourceStageId": "d19efb4f-7543-46f4-80e8-0982da546b25"
          },
          {
            "id": "ce395120-943a-4126-a526-b27dbb91815f",
            "script": "function normalizeText(doc) {\n    if (doc.hasField('value_s')) {\n        var term = doc.getFirstFieldValue('value_s');\n\n        term = term.replace(/[`~!@#$^*()|+:,<>\\{\\}\\[\\]\\\\\\/]/gi, ' ');\n\n        term = term.toLowerCase().trim();\n\n        // Collapse multiple white spaces between words into one space\n        term = term.replace(/\\s\\s+/g, ' ');\n\n        // Remove leading dot \n        term = term.replace(/^\\./, '');\n\n        doc.setField('value_s', term);\n\n        return doc;\n    }\n}",
            "type": "javascript-index",
            "skip": false,
            "label": "Normalize Text",
            "condition": "true\n/* Lowercases terms and trims leading and trailing\n * whitespace. Any future changes to how suggestions\n * are displayed should also go here\n */",
            "secretSourceStageId": "ce395120-943a-4126-a526-b27dbb91815f"
          },
          {
            "id": "904e1951-1b06-4621-899f-18d51003c30a",
            "script": "var maxLength = 4;\n\nfunction (doc) {\n  if (doc.getFirstFieldValue(\"value_s\").split(\" \").length <= maxLength) {\n    return doc;\n  }\n}",
            "type": "javascript-index",
            "skip": false,
            "label": "Suggestion Term Length Filter",
            "condition": "true\n/* Checks the number of words in a suggestion and\n * removes those over a specified threshold. The\n * threshold is set by global var threshold\n  */",
            "secretSourceStageId": "904e1951-1b06-4621-899f-18d51003c30a"
          },
          {
            "id": "f4efc0df-d74d-447c-81e0-090ac453c8e4",
            "script": "function (doc, ctx) {\n  doc.setField('ta_type', 'history');\n  doc.setField('id', 'history_' + doc.getFirstFieldValue(\"value_s\").replaceAll(' ', '_'));\n  return doc;\n}",
            "type": "javascript-index",
            "skip": false,
            "label": "Add ID and Type Fields",
            "condition": "doc.hasField('signal_count_i')\n/* Adds the ta_type and idfield to history documents\n */",
            "secretSourceStageId": "f4efc0df-d74d-447c-81e0-090ac453c8e4"
          },
          {
            "id": "25dcf47d-5c2a-48ad-88f2-66863e0ac678",
            "enforceSchema": true,
            "fieldsList": true,
            "dateFormats": [],
            "params": [],
            "bufferDocsForSolr": true,
            "allowBlacklistedRequestParameters": false,
            "type": "solr-index",
            "skip": false,
            "secretSourceStageId": "25dcf47d-5c2a-48ad-88f2-66863e0ac678"
          }
        ],
        "updates": [
          {
            "userId": "admin",
            "timestamp": "2021-05-10T17:20:17.335Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-04-28T21:20:22.295Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-04-26T23:22:12.357Z"
          },
          {
            "userId": "connectors-rpc_service_account",
            "timestamp": "2021-04-26T23:17:39.548Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-04-26T23:14:12.200Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-04-26T23:12:49.405Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-04-26T23:07:06.796Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-04-26T22:50:03.509Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-04-26T20:48:18.226Z"
          },
          {
            "userId": "connectors-rpc_service_account",
            "timestamp": "2021-04-26T20:48:15.190Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-04-13T21:11:03.527Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-04-13T17:55:00.813Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-04-01T15:35:36.638Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-03-31T17:50:01.394Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-03-31T03:13:29.728Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-03-31T03:13:26.050Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-03-31T03:13:17.600Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-03-31T03:00:09.890Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-03-31T02:59:53.454Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-03-31T02:58:53.563Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-03-31T02:58:51.560Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-03-31T02:58:12.036Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-03-31T02:57:28.720Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-03-31T02:48:41.673Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-03-31T02:43:44.300Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-03-31T02:29:21.181Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-03-31T02:26:47.899Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-03-31T02:26:13.649Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-03-31T02:25:00.263Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-03-31T02:22:08.633Z"
          }
        ],
        "properties": {
          "secretSourcePipelineId": "DC_Large_TYPEAHEAD_IPL_v4"
        }
      },
      {
        "id": "DC_Large_products",
        "stages": [
          {
            "id": "72ffdf9e-9303-4bed-a18c-41d858e0dc66",
            "ref": "lib/index/UtilLib.js",
            "type": "managed-js-index",
            "skip": false,
            "label": "* Load UtilLib Managed JS",
            "licensed": true,
            "secretSourceStageId": "72ffdf9e-9303-4bed-a18c-41d858e0dc66"
          },
          {
            "id": "c5379990-8613-4415-875d-6a2684ffe7ad",
            "ref": "lib/index/FusionServiceLib.js",
            "type": "managed-js-index",
            "skip": false,
            "label": "* Load FusionServiceLib JS",
            "secretSourceStageId": "c5379990-8613-4415-875d-6a2684ffe7ad"
          },
          {
            "id": "4a970267-c7bf-4cfd-bbe0-bb79c416167f",
            "translationMappings": [],
            "retentionMappings": [],
            "updateMappings": [],
            "unmappedRule": {
              "keep": true,
              "delete": false,
              "fieldToMoveValuesTo": "",
              "fieldToCopyValuesTo": "",
              "valueToAddToUnmappedFields": "",
              "valueToSetOnUnmappedFields": ""
            },
            "reservedFieldsMappingAllowed": false,
            "type": "field-mapping",
            "skip": false,
            "secretSourceStageId": "4a970267-c7bf-4cfd-bbe0-bb79c416167f"
          },
          {
            "id": "84c0af1d-d29e-4da6-bb30-fc0b2d81f8ff",
            "script": "(function () {\n  'use strict';\n\n  var LinkedHashMap = Java.type('java.util.LinkedHashMap');\n\n  // The lucidworks.ps util libraries\n  var UtilLib;\n  var FusionServiceLib;\n\n  // Global to hold the category id and path map\n  var categoryIdToPathMap;\n\n  var LIST_SEPARATOR = \"|\";\n  var CAT_ID_PATH_FLD = \"Categories\";\n  var CAT_NAME_PATH_FLD = \"catNamePath\";\n  var CAT_MAP_BLOB = \"CAT_ID_MAPPING_cats_full.txt\"\n  var CAT_MAP_SEPARATOR = \"|\";\n\n  function splitCatID(catID) {\n    return catID.split(LIST_SEPARATOR);\n    logger.info(catID);\n  }\n\n  return function(doc, ctx) {\n\n    logger.info(\"inside...\");\n\n    // Load in lucidworks.ps util library\n    if (null == UtilLib) {\n      UtilLib = ctx.UtilLib;\n    }\n\n    // Load in lucidworks.ps FusionService library\n    if (null == FusionServiceLib) {\n      FusionServiceLib = ctx.FusionServiceLib;\n    }\n\n    logger.info(\"loaded utils\");\n\n    if (doc.getId() == null) {\n      logger.info(\"It's NULL\");\n      return;\n    }\n\n    logger.info(\"not null\")\n\n    //Don't do anything if the category ID field doesn't exit\n    if (doc.hasField(CAT_ID_PATH_FLD)){\n\n      //Lazyload textfile and map from blob\n      if (null == categoryIdToPathMap){\n        logger.info(\"...loading blob\")\n        var categoryIdText = FusionServiceLib.getStringBlob(CAT_MAP_BLOB);  //get text map\n        var catRows = categoryIdText.split(\"\\n\");\n\n        categoryIdToPathMap = new LinkedHashMap();\n        for (var row=0; row <= catRows.length; row++){\n          //logger.info(\"row \"+row+\":\" + catRows[row]);\n          if (catRows[row]){\n            var splitRow = catRows[row].split(CAT_MAP_SEPARATOR);\n            if (splitRow.length > 1){\n              var mapKey = splitRow[0];\n              var mapVal = splitRow[1];\n              categoryIdToPathMap.put(mapKey, mapVal);\n            }\n            else {\n                logger.info(\"Bad row in category map: \"+catRows);\n            }  \n          }\n          else {\n              logger.info(\"Empty row in category map\");\n          }\n        }\n      }\n      else {\n        logger.info(\"***** Already got map ******\");\n      }\n\n      //Split CatID field\n      //var catIdList = splitCatID(doc.getFirstFieldValue(CAT_ID_PATH_FLD));  \n      \n      var catIdLists = doc.getFieldValues(CAT_ID_PATH_FLD);  \n\n      //Grab names from map\n      if(catIdLists){\n        for (var cil = 0; cil < catIdLists.length; cil++) {\n\n          var catIdArray = splitCatID(catIdLists[cil]);\n          logger.info(\"catIdArray:\" + catIdArray);\n          var catNameArray = [];\n\n          for (var i=0; i < catIdArray.length;i++){\n            //Grab name from map\n            var catName = categoryIdToPathMap.get(catIdArray[i])\n            catNameArray.push(catName || catIdArray[i]);  //if the catID didn't map to a name, just use the ID\n          }\n\n          var catNameList = catNameArray.join(LIST_SEPARATOR);\n          logger.info(catNameList);\n          doc.addField(CAT_NAME_PATH_FLD, catNameList);\n        }\n      }\n\n    }\n\n    return doc;\n  }\n})();",
            "type": "javascript-index",
            "skip": false,
            "label": "CAT_ID_MAPPING GetCatNamesFromId ",
            "secretSourceStageId": "84c0af1d-d29e-4da6-bb30-fc0b2d81f8ff"
          },
          {
            "id": "db55db3c-e007-4747-88ee-961580a77ad4",
            "script": "function (doc, ctx) {\n\n  var PATH_SEPARATOR = \"|\";\n  var TAXO_PREFIX = \"depth_\";\n  var taxoFlds = [\"catNamePath\",\"Categories\"];\n\n  //This logic assumes paths are in the format: \"node1/node2/node3\" (where \"/\" is the path separator); ie, no leading or trailing separators\n  //Multiple paths in the same field are supported: [\"node1/node2/node3\", \"node6/node7/node8\"]\n  //\n  // If a field named \"catPath\" contains this value: [\"node1/node2/node3\", \"node6/node7/node8\"]\n  // ... a new field called \"depth_catPath\" will be created as follows (where prefix suggests depth)\n  //\n  //   [\"0/node1\", \n  //    \"1/node1/node2\", \n  //    \"2/node1/node2/node3\",\n  //    \"0/node6/\",\n  //    \"1/node6/node7\",\n  //    \"2/node6/node7/node8\"]\n  //\n\n\n  for (i = 0; i < taxoFlds.length; i++) {\n    logger.info(\"TAXO FLD:\"+taxoFlds[i]);\n\n    var taxo = doc.getFieldValues(taxoFlds[i]);  \n\n    if(taxo){\n      var taxoDepthFld = TAXO_PREFIX + taxoFlds[i];\n\n      //create depth-aware taxo field \n      for (var j = 0; j < taxo.length; j++) {\n        //var depth = 0;\n        var currPath = \"\";\n        var pathArray = taxo[j].split(PATH_SEPARATOR);\n        for (var depth = 0; depth < pathArray.length; depth++) {\n          currPath += PATH_SEPARATOR + pathArray[depth];\n          doc.addField(taxoDepthFld,depth + currPath);\n        }\n      }\n    }\n  }\n  \n  return doc;\n}",
            "type": "javascript-index",
            "skip": false,
            "label": "CAT_ID_MAPPING Create Taxo Fields",
            "secretSourceStageId": "db55db3c-e007-4747-88ee-961580a77ad4"
          },
          {
            "id": "cbcc4af5-1768-451c-9c94-d370fa86edb5",
            "duplicateSingleValuedFields": false,
            "fieldsToExclude": [],
            "advancedTextFieldsIndexing": true,
            "maxTextLengthForAdvancedIndexing": 100,
            "type": "solr-dynamic-field-name-mapping",
            "skip": false,
            "secretSourceStageId": "cbcc4af5-1768-451c-9c94-d370fa86edb5"
          },
          {
            "id": "5b14d8f0-f47d-48b6-b86f-519fcfcc31c0",
            "enforceSchema": true,
            "fieldsList": true,
            "dateFormats": [],
            "params": [],
            "bufferDocsForSolr": true,
            "allowBlacklistedRequestParameters": false,
            "type": "solr-index",
            "skip": false,
            "secretSourceStageId": "5b14d8f0-f47d-48b6-b86f-519fcfcc31c0"
          }
        ],
        "updates": [
          {
            "userId": "admin",
            "timestamp": "2021-03-26T23:55:05.751Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-03-26T23:56:19.539Z"
          },
          {
            "userId": "connectors-rpc_service_account",
            "timestamp": "2021-03-26T23:56:40.748Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-03-26T23:57:02.464Z"
          },
          {
            "userId": "connectors-rpc_service_account",
            "timestamp": "2021-03-26T23:57:24.197Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-03-26T23:57:43.237Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-03-26T23:57:48.502Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-03-26T23:57:55.766Z"
          },
          {
            "userId": "connectors-rpc_service_account",
            "timestamp": "2021-03-26T23:58:00.823Z"
          },
          {
            "userId": "connectors-rpc_service_account",
            "timestamp": "2021-03-26T23:58:15.904Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-03-27T00:15:29.959Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-03-27T00:36:39.066Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-03-27T00:41:37.856Z"
          }
        ],
        "properties": {
          "secretSourcePipelineId": "DC_Large_products"
        }
      },
      {
        "id": "DC_Large_query_rewrite_staging",
        "stages": [
          {
            "id": "edfa3e5e-2e5d-4dc7-a2c4-ea5716e21dbb",
            "script": "/* By default, the rollup field contains the rule type, or in the case of Banners, the rule type plus the location (e.g., top, middle, lower)\n * If different behavior is desired, an alternate field can be created for rules to roll up on, where rules can be combined or returned individually.\n * NOTE: If an alternate field is used for rollup, only rules containing that field will be returned at query time; so if this approach is used, \n * ensure that the alternate rollup field is populated for all rules.  \n */\n\nfunction (doc, ctx) {\n  if (doc && doc.getId()) {\n    var docID = doc.getId();\n    var altRollupField = 'alt_rollup_s'\n    var origRollup = doc.getFirstFieldValue(\"rollup\");\n    var ruleType = doc.getFirstFieldValue(\"type\");\n    var altRollup = \"\";\n\n    if (origRollup && ruleType) {\n\n      switch(ruleType) {\n        case \"boost_attributes\":\n          altRollup = docID;\n          break;\n        case \"set_facets\":\n          altRollup = origRollup; //if multiple facet rules of different types should be returned, the differentiating value (eg, the group name) can be concatenated to the origRollup value: origRollup + Group\n          break;\n        //case \"boost_list\":\n        //case \"bury_list\":\n        //  altRollup = \"boost_or_bury\"; //use this approach to only fire the single highest priority rule among these ruleTypes\n        //  break;\n        default:\n          altRollup = origRollup;\n      }\n\n    }\n    doc.setField(altRollupField,altRollup)\n\n    return doc;\n  }\n}",
            "type": "javascript-index",
            "skip": true,
            "label": "RULES_ROLLUP Set Rule Collapse Rollup Value",
            "secretSourceStageId": "edfa3e5e-2e5d-4dc7-a2c4-ea5716e21dbb"
          },
          {
            "id": "12ddc9fd-43d3-461b-8ce5-455ccce9f82d",
            "enforceSchema": true,
            "fieldsList": false,
            "dateFormats": [],
            "params": [],
            "bufferDocsForSolr": false,
            "allowBlacklistedRequestParameters": false,
            "type": "solr-index",
            "skip": false,
            "secretSourceStageId": "12ddc9fd-43d3-461b-8ce5-455ccce9f82d"
          }
        ],
        "updates": [
          {
            "userId": "admin",
            "timestamp": "2021-03-26T23:16:35.250Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-03-26T23:17:47.874Z"
          }
        ],
        "properties": {
          "secretSourcePipelineId": "DC_Large_query_rewrite_staging"
        }
      },
      {
        "id": "RECENCY_stub",
        "stages": [
          {
            "id": "a56cb0c0-e4ef-47cb-bc26-6ab2f5651cd5",
            "translationMappings": [],
            "retentionMappings": [],
            "updateMappings": [],
            "unmappedRule": {
              "keep": true,
              "delete": false,
              "fieldToMoveValuesTo": "",
              "fieldToCopyValuesTo": "",
              "valueToAddToUnmappedFields": "",
              "valueToSetOnUnmappedFields": ""
            },
            "reservedFieldsMappingAllowed": false,
            "type": "field-mapping",
            "skip": false,
            "label": "README (condition)",
            "condition": "false;\n/*\nThe RECENCY feature does not use a pipeline.  Rather it is a JS stage which needs to be inserted into a pipeline.  With proper setup, the stage can scan a list of in-bound date fields and select the first one which\n* is not null\n* is not a date of 1 Jan 1970\n* is not newer than NOW-1HOUR (to avoid dates produced by a NOW function)\n\nThe intent is to get a date which reflects how recent a document has been updated.  Then in a query pipeline a boost can be applied to this value.\n*/",
            "secretSourceStageId": "a56cb0c0-e4ef-47cb-bc26-6ab2f5651cd5"
          },
          {
            "id": "c5096bf9-80d6-4540-98eb-0b14cf35b408",
            "ref": "lib/index/UtilLib.js",
            "type": "managed-js-index",
            "skip": false,
            "label": "RECENCY JS:load UtilLib.js",
            "secretSourceStageId": "c5096bf9-80d6-4540-98eb-0b14cf35b408"
          },
          {
            "id": "1665877d-dabc-4a64-8a64-c337eeced1f8",
            "script": "(function () {\n    \"use strict\";\n    var UtilLib\n\n   /**********************************\n    * set a date field used for recency boosting.  THis field will be first of several candidate date fields which is also:\n    *   - not the epoch date i.e. Jan 1 1970\n    *   - at least one hour old (to avoid dates defaulting to (NOW))  \n    */\n\n    //TODO: set dateField to the name of the field which will hold the data showing how recent a document is\n    var dateField = \"recentDate_dt\";\n\n    var isDebug=false\n    function logIfDebug(message){\n      if( isDebug){\n        var args = Array.prototype.slice.call(arguments)\n        if(args.length > 0){\n           logger.info(args[0],args.slice(1));\n        }\n      }\n    }\n\n    /**\n     * @return a Joda time DateTime object if dateString can be parsed as a date, is not the epoch date and is before NOW - 1HOUR\n     */\n    function getValidDateIfPast(dateString,NOW,ctx){\n      //See if we can parse this as a date\n      logIfDebug(\"\\nchecking DateString: {}\\n\",dateString)\n      var dt = UtilLib.parseDate(dateString)\n      logIfDebug(\"\\n\\nDateString: {} parsed to {}\\n\\n\",dateString,dt)\n      // perform validation checks\n      if(dt){\n        logIfDebug(\"\\ndt is {} of type {}\\n\",dtTime,UtilLib.getTypeOf(dt,true))\n        var dtTime = dt.getMillis()\n        //reject epoch times and \"future\" times where \"future\" is NOW - 1 hour\n        logIfDebug(\"\\ndtTime milliseconds is {}\\n\",dtTime)\n      \tif(dtTime == 0 || dtTime > (NOW.getTime() - (1000*60*60))){\n          dt = null;\n        }\n      }\n      return dt\n    }\n    /**\n     * param doc - the doc being indexed\n     * param dates - an array of date field names to check\n     * param NOW the current date/time as a java.util.Date\n     * @return a Map with \"validDate\" holding the first date from the dates fields  which is valid and \"validDateSource\" containing the field      */\n    function getValidPastDate(doc,dates,NOW,ctx){\n      NOW = NOW | new java.util.Date()\n\n      for(var i = 0; i < dates.length; i++){\n        var dt = dates[i]\n        //grab the date string from the doc and check it\n        var ds = doc.getFirstFieldValue(dt)\n        logIfDebug(\"\\n\\nchecking field {} with value {}\\n\\n\",dt,ds)\n        if(ds){\n          var vdt = getValidDateIfPast(ds,NOW,ctx)\n          if(vdt){\n            return {\"validDate\":ds,\"validDateSource\":dt}\n          }\n        }\n      }\n      return null\n    }\n  \n return function(doc, ctx, collection, solrServer, solrServerFactory) {\n  \n   if(! UtilLib){UtilLib = ctx.get(\"UtilLib\")}\n   if(UtilLib){UtilLib.setDebugLogging(isDebug)}else{ throw(\"unable to load required JS dependency UtilLib\");}\n   // pick a date field for the date range histogram facet and set dateField_dt\n\n    var NOW = new java.util.Date()\n   \n   /********\n   * TODO Onsite\n   *  replace the list of fields in candidateModDtField array with the ordered list of the best fields from the various\n   *  websites crawled onsite.  These will be evaluated in order and the first one which is not an epoch date and is also\n   * in the past will be selected.\n   ********/\n    // make a list of candidate fields which will be used to determine dateField\n    // the intent is to find the most accurate modified date but to ignore dates using \n    // the default Jan 1 1970 epoc.  We should also ignore dates which are within one Hour of NOW as they are \n    // likely just using the current time to populate the date.\n \n    var candidateModDtFields = [\"lastModified_dt\"\n                               ,'Last-Modified'\n                               ,'tags_DW.date.created'\n                               ,'tags_og:updated_time'\n                               ,'tags_article:modified_time'\n                               ,'tags_article:published_time'\n                               ,'tags_publicationDate'\n                               ,'fetchedDate_dt'\n                              ]\n    \n    // first check and see if the doc ID url contains a date format CCYY-MM-DD\n    var id = doc.getId();\n    logIfDebug(\"\\n\\nChecking for date in {}\\n\\n\",id)\n  \tvar aurldate = \"\";\n    if (id) {\n      //TODO. adjust the regex which finds a date in the URL.  Or get rid of this block if your id/URLs don't have \"as-of\" in the path\n      var myRegex = RegExp('([0-9]{4})/([0-9]{2})/([0-9]{2})/');\n      var match = myRegex.exec(id);\n      if (match) {\n        var year = match[1];\n        var month = match[2];\n        var day = match[3];\n        aurldate = year+\"-\"+month+\"-\"+day+\"T\"+\"12:00:00Z\";\n      }\n    }\n    \n    doc.removeFields(dateField)\n    if (aurldate) { \n      doc.setField(dateField, aurldate);\n      doc.setField(dateField + \"_source_s\",\"id\")\n    }\n    else {\n      var latest = getValidPastDate(doc,candidateModDtFields,NOW,ctx)\n      if(latest){\n        doc.setField(dateField,latest.validDate)\n        doc.setField(dateField + \"_source_s\",latest.validDateSource)\n      }\n    }\n  \n    return doc;\n\n  };\n})();\n",
            "type": "javascript-index",
            "skip": false,
            "label": "RECENCY JS:calculate recency date",
            "condition": "true\n/* TODO: populate the candidateModDtFields array with\nfield names that reflect how recent a document is.  The script\nwill set recentDate_dt to the value of the first candidate which\nis not:\n* blank or null\n* set to the date epoc of Jan 1 1970\n* not after 10 minutes before NOW (to avoid grabbing dates set as NOW by the source being crawled)\n\n*/",
            "scriptAsArray": [
              "(function () {",
              "    \"use strict\";",
              "    var UtilLib",
              "",
              "   /**********************************",
              "    * set a date field used for recency boosting.  THis field will be first of several candidate date fields which is also:",
              "    *   - not the epoch date i.e. Jan 1 1970",
              "    *   - at least one hour old (to avoid dates defaulting to (NOW))  ",
              "    */",
              "",
              "    //TODO: set dateField to the name of the field which will hold the data showing how recent a document is",
              "    var dateField = \"recentDate_dt\";",
              "",
              "    var isDebug=false",
              "    function logIfDebug(message){",
              "      if( isDebug){",
              "        var args = Array.prototype.slice.call(arguments)",
              "        if(args.length > 0){",
              "           logger.info(args[0],args.slice(1));",
              "        }",
              "      }",
              "    }",
              "",
              "    /**",
              "     * @return a Joda time DateTime object if dateString can be parsed as a date, is not the epoch date and is before NOW - 1HOUR",
              "     */",
              "    function getValidDateIfPast(dateString,NOW,ctx){",
              "      //See if we can parse this as a date",
              "      logIfDebug(\"\\nchecking DateString: {}\\n\",dateString)",
              "      var dt = UtilLib.parseDate(dateString)",
              "      logIfDebug(\"\\n\\nDateString: {} parsed to {}\\n\\n\",dateString,dt)",
              "      // perform validation checks",
              "      if(dt){",
              "        logIfDebug(\"\\ndt is {} of type {}\\n\",dtTime,UtilLib.getTypeOf(dt,true))",
              "        var dtTime = dt.getMillis()",
              "        //reject epoch times and \"future\" times where \"future\" is NOW - 1 hour",
              "        logIfDebug(\"\\ndtTime milliseconds is {}\\n\",dtTime)",
              "      \tif(dtTime == 0 || dtTime > (NOW.getTime() - (1000*60*60))){",
              "          dt = null;",
              "        }",
              "      }",
              "      return dt",
              "    }",
              "    /**",
              "     * param doc - the doc being indexed",
              "     * param dates - an array of date field names to check",
              "     * param NOW the current date/time as a java.util.Date",
              "     * @return a Map with \"validDate\" holding the first date from the dates fields  which is valid and \"validDateSource\" containing the field      */",
              "    function getValidPastDate(doc,dates,NOW,ctx){",
              "      NOW = NOW | new java.util.Date()",
              "",
              "      for(var i = 0; i < dates.length; i++){",
              "        var dt = dates[i]",
              "        //grab the date string from the doc and check it",
              "        var ds = doc.getFirstFieldValue(dt)",
              "        logIfDebug(\"\\n\\nchecking field {} with value {}\\n\\n\",dt,ds)",
              "        if(ds){",
              "          var vdt = getValidDateIfPast(ds,NOW,ctx)",
              "          if(vdt){",
              "            return {\"validDate\":ds,\"validDateSource\":dt}",
              "          }",
              "        }",
              "      }",
              "      return null",
              "    }",
              "  ",
              " return function(doc, ctx, collection, solrServer, solrServerFactory) {",
              "  ",
              "   if(! UtilLib){UtilLib = ctx.get(\"UtilLib\")}",
              "   if(UtilLib){UtilLib.setDebugLogging(isDebug)}else{ throw(\"unable to load required JS dependency UtilLib\");}",
              "   // pick a date field for the date range histogram facet and set dateField_dt",
              "",
              "    var NOW = new java.util.Date()",
              "   ",
              "   /********",
              "   * TODO Onsite",
              "   *  replace the list of fields in candidateModDtField array with the ordered list of the best fields from the various",
              "   *  websites crawled onsite.  These will be evaluated in order and the first one which is not an epoch date and is also",
              "   * in the past will be selected.",
              "   ********/",
              "    // make a list of candidate fields which will be used to determine dateField",
              "    // the intent is to find the most accurate modified date but to ignore dates using ",
              "    // the default Jan 1 1970 epoc.  We should also ignore dates which are within one Hour of NOW as they are ",
              "    // likely just using the current time to populate the date.",
              " ",
              "    var candidateModDtFields = [\"lastModified_dt\"",
              "                               ,'Last-Modified'",
              "                               ,'tags_DW.date.created'",
              "                               ,'tags_og:updated_time'",
              "                               ,'tags_article:modified_time'",
              "                               ,'tags_article:published_time'",
              "                               ,'tags_publicationDate'",
              "                               ,'fetchedDate_dt'",
              "                              ]",
              "    ",
              "    // first check and see if the doc ID url contains a date format CCYY-MM-DD",
              "    var id = doc.getId();",
              "    logIfDebug(\"\\n\\nChecking for date in {}\\n\\n\",id)",
              "  \tvar aurldate = \"\";",
              "    if (id) {",
              "      //TODO. adjust the regex which finds a date in the URL.  Or get rid of this block if your id/URLs don't have \"as-of\" in the path",
              "      var myRegex = RegExp('([0-9]{4})/([0-9]{2})/([0-9]{2})/');",
              "      var match = myRegex.exec(id);",
              "      if (match) {",
              "        var year = match[1];",
              "        var month = match[2];",
              "        var day = match[3];",
              "        aurldate = year+\"-\"+month+\"-\"+day+\"T\"+\"12:00:00Z\";",
              "      }",
              "    }",
              "    ",
              "    doc.removeFields(dateField)",
              "    if (aurldate) { ",
              "      doc.setField(dateField, aurldate);",
              "      doc.setField(dateField + \"_source_s\",\"id\")",
              "    }",
              "    else {",
              "      var latest = getValidPastDate(doc,candidateModDtFields,NOW,ctx)",
              "      if(latest){",
              "        doc.setField(dateField,latest.validDate)",
              "        doc.setField(dateField + \"_source_s\",latest.validDateSource)",
              "      }",
              "    }",
              "  ",
              "    return doc;",
              "",
              "  };",
              "})();",
              ""
            ],
            "secretSourceStageId": "1665877d-dabc-4a64-8a64-c337eeced1f8"
          }
        ],
        "updates": [
          {
            "userId": "admin",
            "timestamp": "2020-12-09T18:28:46.858Z"
          },
          {
            "userId": "admin",
            "timestamp": "2020-12-09T18:28:52.536Z"
          },
          {
            "userId": "admin",
            "timestamp": "2020-12-09T18:28:55.971Z"
          },
          {
            "userId": "admin",
            "timestamp": "2020-12-09T18:28:59.315Z"
          },
          {
            "userId": "admin",
            "timestamp": "2020-12-09T18:32:52.213Z"
          },
          {
            "userId": "admin",
            "timestamp": "2020-12-09T18:33:49.880Z"
          },
          {
            "userId": "admin",
            "timestamp": "2020-12-09T18:33:52.547Z"
          },
          {
            "userId": "admin",
            "timestamp": "2020-12-09T18:34:23.331Z"
          },
          {
            "userId": "admin",
            "timestamp": "2020-12-09T18:34:26.968Z"
          },
          {
            "userId": "admin",
            "timestamp": "2020-12-09T18:34:46.843Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-01-15T19:37:00.117Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-01-15T19:37:10.130Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-01-29T07:00:18.707Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-01-29T07:00:23.358Z"
          }
        ],
        "properties": {
          "secretSourcePipelineId": "RECENCY_stub"
        }
      },
      {
        "id": "RESPONSE_TA_purge_unwanted_terms_JOB",
        "stages": [
          {
            "id": "cbae4e95-0276-46d6-801b-0905545da0c1",
            "ref": "lib/index/FusionServiceLib.js",
            "type": "managed-js-index",
            "skip": false,
            "label": "MJS: load FusionServices.js",
            "secretSourceStageId": "cbae4e95-0276-46d6-801b-0905545da0c1"
          },
          {
            "id": "09b33b9f-93a0-4758-a1c5-7e8573c26350",
            "script": "/* globals Java, logger*/\n(function () {\n    \"use strict\";\n\n    var StringBuilder = java.lang.StringBuilder\n    var MapSolrParams = org.apache.solr.common.params.MapSolrParams\n    var METHOD = org.apache.solr.client.solrj.SolrRequest.METHOD\n\n\n    var isDebug = false\n    function logIfDebug(message){\n      if(isDebug){ var args = Array.prototype.slice.call(arguments);\n        if(args.length > 0){logger.info(args[0],args.slice(1));}}\n    }\n\n    var MAX_OR = 1000\n    var filterField = \"query_t\"\n    var defaultBlob_id = \"RESPONSE_TA/full-list-of-bad-words_csv-file_2018_07_30.csv\"\n    var exclusionList;\n    var FSvc;\n\n    function loadExclusionList(ctx,blob_id) {\n      if(! exclusionList){\n        var response = FSvc.getStringBlob(blob_id);\n        if(response){\n          exclusionList = response.trim().split(/\\n/);\n          logIfDebug(\"\\n\\ngot exclude list of {} lines \\n\\n\",exclusionList.length)\n        }\n      }\n      return \n    }\n    function executeExpression(expression,collectionName,solrServer){\n      var paramsMap = new java.util.HashMap() \n      paramsMap.put(\"expr\",expression)\n      paramsMap.put(\"qt\",\"/stream\")\n      var params = new MapSolrParams(paramsMap)\n     \n      var resp = solrServer.query(collectionName,params,METHOD.POST)\n      logIfDebug(\"\\n\\nDid solr request, got response of {}\\n\",resp)\n\n    }\n    function buildQuery(start,groupSize){\n      var query = new StringBuilder()\n      var endIndex = exclusionList.length - 1\n\n      //logIfDebug(\"building query with start {} and groupSize of {}\",start,groupSize)\n      for(var i = 0; i < groupSize && i <= endIndex; i++ ){\n        var line = exclusionList[start + i]\n        if(!line || line.trim() == \"\"){\n          continue\n        }\n\n        //logIfDebug(\"\\n\\nPre trim liune is {}\\n\",line)\n        var offset = line.indexOf(';')\n        if(offset > 0){\n          line = line.substr(0,offset)\n        }         \n        if(i > 0){\n          query.append(\" OR \")\n        }\n        //logIfDebug(\"\\n\\nappending line {} with size {}\\n\",line,line.length)\n        query.append(filterField).append(':\"').append(line).append('\"')\n      }\n      //logIfDebug(\"\\n\\nQuery is {}\\n\\n\",query.toString())\n      return query.toString()\n\n    }\n\n    function deleteExclusions(collection,solrClient){\n      if(exclusionList && exclusionList.length){\n        // grab exclusions and make an expression.\n        /*\n        commit(RESPONSE_TA, softCommit=true,\n `         delete(RESPONSE_TA,\n                batchSize=500,\n                search(RESPONSE_TA,\n                      q=query_t:\"goo\" OR query_t:\"cloud and\" OR query_t:\"cloud for\" OR query_t:\"hello\",\n                      qt=\"/export\",\n                      fl=\"id\",\n                      sort=\"id asc\"\n                )\n          )\n        )\n        */\n        var strExp = new StringBuilder(\"commit(\").append(collection).append(\", softCommit=true,\\n\\t\")\n             .append(\"delete(\").append(collection).append(\",batchSize=1000,\\n\\t\")\n             .append(\"search(\").append(collection).append(',qt=\"/export\",fl=\"id\",sort=\"id asc\",q=')\n\n\n        logIfDebug(\"\\n\\nInitial strExp is {}\\n\",strExp)\n        var linecount = exclusionList.length;\n        var groups = Math.ceil(linecount / MAX_OR)\n        var groupSize = Math.ceil(linecount/groups)\n        for(var i = 0; i < groups; i++){\n          var start = i * groupSize + (i>0?1:0)\n          var q = buildQuery(start,groupSize)\n\n          //logIfDebug(\"\\n\\ngot Query to append onto {}\\n\\n\",q)\n          var expression = strExp.toString() + q + \")))\"\n          logIfDebug(\"\\n\\nstreamingExp is {}\\n\\n\",expression)\n\n          executeExpression(expression,collection,solrClient)\n\n        }\n      }\n\n    }\n    return function(doc, ctx,collection,solrClient) {\n        if (!FSvc) {\n            FSvc = ctx.get('FusionServiceLib');\n        }\n        var solrParams = ctx.get(\"solrParams\")\n        if(solrParams){\n            //solrParams should be an extension of MultivaluedHashMap with a getFirst() function\n            var blob_id = solrParams.getFirst(\"blob_id\",defaultBlob_id)\n            loadExclusionList(ctx,blob_id)\n            deleteExclusions(collection,solrClient);\n        }else{\n          logger.error(\"unable to get 'solrParams' from context.  No blob_id or no blob found.  Can not continue\")\n        }\n       \n       logger.info(\"\\n\\nsolrClient is of type {}\\n\",solrClient.getSolrClient().getClass().getName())\n        return doc;\n    }\n})();",
            "type": "javascript-index",
            "skip": false,
            "label": "RESPONSE_TA_purge_terms",
            "condition": "true;\n// execute delete queries to purge NSFW terms",
            "scriptAsArray": [
              "/* globals Java, logger*/",
              "(function () {",
              "    \"use strict\";",
              "",
              "    var StringBuilder = java.lang.StringBuilder",
              "    var MapSolrParams = org.apache.solr.common.params.MapSolrParams",
              "    var METHOD = org.apache.solr.client.solrj.SolrRequest.METHOD",
              "",
              "",
              "    var isDebug = false",
              "    function logIfDebug(message){",
              "      if(isDebug){ var args = Array.prototype.slice.call(arguments);",
              "        if(args.length > 0){logger.info(args[0],args.slice(1));}}",
              "    }",
              "",
              "    var MAX_OR = 1000",
              "    var filterField = \"query_t\"",
              "    var defaultBlob_id = \"RESPONSE_TA/full-list-of-bad-words_csv-file_2018_07_30.csv\"",
              "    var exclusionList;",
              "    var FSvc;",
              "",
              "    function loadExclusionList(ctx,blob_id) {",
              "      if(! exclusionList){",
              "        var response = FSvc.getStringBlob(blob_id);",
              "        if(response){",
              "          exclusionList = response.trim().split(/\\n/);",
              "          logIfDebug(\"\\n\\ngot exclude list of {} lines \\n\\n\",exclusionList.length)",
              "        }",
              "      }",
              "      return ",
              "    }",
              "    function executeExpression(expression,collectionName,solrServer){",
              "      var paramsMap = new java.util.HashMap() ",
              "      paramsMap.put(\"expr\",expression)",
              "      paramsMap.put(\"qt\",\"/stream\")",
              "      var params = new MapSolrParams(paramsMap)",
              "     ",
              "      var resp = solrServer.query(collectionName,params,METHOD.POST)",
              "      logIfDebug(\"\\n\\nDid solr request, got response of {}\\n\",resp)",
              "",
              "    }",
              "    function buildQuery(start,groupSize){",
              "      var query = new StringBuilder()",
              "      var endIndex = exclusionList.length - 1",
              "",
              "      //logIfDebug(\"building query with start {} and groupSize of {}\",start,groupSize)",
              "      for(var i = 0; i < groupSize && i <= endIndex; i++ ){",
              "        var line = exclusionList[start + i]",
              "        if(!line || line.trim() == \"\"){",
              "          continue",
              "        }",
              "",
              "        //logIfDebug(\"\\n\\nPre trim liune is {}\\n\",line)",
              "        var offset = line.indexOf(';')",
              "        if(offset > 0){",
              "          line = line.substr(0,offset)",
              "        }         ",
              "        if(i > 0){",
              "          query.append(\" OR \")",
              "        }",
              "        //logIfDebug(\"\\n\\nappending line {} with size {}\\n\",line,line.length)",
              "        query.append(filterField).append(':\"').append(line).append('\"')",
              "      }",
              "      //logIfDebug(\"\\n\\nQuery is {}\\n\\n\",query.toString())",
              "      return query.toString()",
              "",
              "    }",
              "",
              "    function deleteExclusions(collection,solrClient){",
              "      if(exclusionList && exclusionList.length){",
              "        // grab exclusions and make an expression.",
              "        /*",
              "        commit(RESPONSE_TA, softCommit=true,",
              " `         delete(RESPONSE_TA,",
              "                batchSize=500,",
              "                search(RESPONSE_TA,",
              "                      q=query_t:\"goo\" OR query_t:\"cloud and\" OR query_t:\"cloud for\" OR query_t:\"hello\",",
              "                      qt=\"/export\",",
              "                      fl=\"id\",",
              "                      sort=\"id asc\"",
              "                )",
              "          )",
              "        )",
              "        */",
              "        var strExp = new StringBuilder(\"commit(\").append(collection).append(\", softCommit=true,\\n\\t\")",
              "             .append(\"delete(\").append(collection).append(\",batchSize=1000,\\n\\t\")",
              "             .append(\"search(\").append(collection).append(',qt=\"/export\",fl=\"id\",sort=\"id asc\",q=')",
              "",
              "",
              "        logIfDebug(\"\\n\\nInitial strExp is {}\\n\",strExp)",
              "        var linecount = exclusionList.length;",
              "        var groups = Math.ceil(linecount / MAX_OR)",
              "        var groupSize = Math.ceil(linecount/groups)",
              "        for(var i = 0; i < groups; i++){",
              "          var start = i * groupSize + (i>0?1:0)",
              "          var q = buildQuery(start,groupSize)",
              "",
              "          //logIfDebug(\"\\n\\ngot Query to append onto {}\\n\\n\",q)",
              "          var expression = strExp.toString() + q + \")))\"",
              "          logIfDebug(\"\\n\\nstreamingExp is {}\\n\\n\",expression)",
              "",
              "          executeExpression(expression,collection,solrClient)",
              "",
              "        }",
              "      }",
              "",
              "    }",
              "    return function(doc, ctx,collection,solrClient) {",
              "        if (!FSvc) {",
              "            FSvc = ctx.get('FusionServiceLib');",
              "        }",
              "        var solrParams = ctx.get(\"solrParams\")",
              "        if(solrParams){",
              "            //solrParams should be an extension of MultivaluedHashMap with a getFirst() function",
              "            var blob_id = solrParams.getFirst(\"blob_id\",defaultBlob_id)",
              "            loadExclusionList(ctx,blob_id)",
              "            deleteExclusions(collection,solrClient);",
              "        }else{",
              "          logger.error(\"unable to get 'solrParams' from context.  No blob_id or no blob found.  Can not continue\")",
              "        }",
              "       ",
              "       logger.info(\"\\n\\nsolrClient is of type {}\\n\",solrClient.getSolrClient().getClass().getName())",
              "        return doc;",
              "    }",
              "})();"
            ],
            "secretSourceStageId": "09b33b9f-93a0-4758-a1c5-7e8573c26350"
          }
        ],
        "updates": [
          {
            "userId": "admin",
            "timestamp": "2021-01-05T20:12:40.564Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-01-05T16:08:24.083Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-01-05T16:08:22.295Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-01-05T16:07:24.257Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-01-05T16:03:42.999Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-01-05T15:56:22.368Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-01-05T14:57:47.276Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-01-05T14:57:13.519Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-01-05T00:04:15.242Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-01-05T00:03:47.725Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-01-04T23:58:39.549Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-01-04T23:57:56.564Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-01-04T23:53:51.845Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-01-04T23:40:44.006Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-01-04T23:39:38.713Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-01-04T23:39:09.510Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-01-04T23:38:50.448Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-01-04T23:31:45.093Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-01-04T23:31:27.102Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-01-04T23:23:05.741Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-01-04T23:11:18.687Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-01-04T22:16:27.339Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-01-04T22:12:53.696Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-01-04T22:11:39.284Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-01-04T22:05:19.614Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-01-04T22:03:30.287Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-01-04T22:01:43.943Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-01-04T21:59:29.901Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-01-04T21:59:12.529Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-01-04T21:57:04.434Z"
          }
        ],
        "properties": {
          "secretSourcePipelineId": "RESPONSE_TA_purge_unwanted_terms_JOB"
        }
      },
      {
        "id": "_signals_ingest",
        "stages": [
          {
            "id": "85a5654e-b272-412e-8ea0-21f7d77fa729",
            "ref": "lib/index/UtilLib.js",
            "type": "managed-js-index",
            "skip": false,
            "label": "MSJ:Load UtilLib",
            "secretSourceStageId": "85a5654e-b272-412e-8ea0-21f7d77fa729"
          },
          {
            "id": "32082528-750b-4fa2-9d18-f76818ea94c7",
            "flatten": true,
            "allowedTypes": [],
            "undefinedType": "general",
            "timestampLocale": "en-US",
            "type": "signal-formatter",
            "skip": false,
            "secretSourceStageId": "32082528-750b-4fa2-9d18-f76818ea94c7"
          },
          {
            "id": "d2970d13-d43d-419a-8ace-314b5ae664bc",
            "translationMappings": [
              {
                "source": "params.timestamp",
                "target": "timestamp",
                "operation": "move"
              },
              {
                "source": "params.user",
                "target": "user",
                "operation": "move"
              },
              {
                "source": "params.user_token",
                "target": "user_token",
                "operation": "move"
              },
              {
                "source": "params.url",
                "target": "url",
                "operation": "move"
              },
              {
                "source": "params.label",
                "target": "label",
                "operation": "move"
              },
              {
                "source": "params.ctype",
                "target": "ctype",
                "operation": "move"
              },
              {
                "source": "params.host",
                "target": "host",
                "operation": "move"
              },
              {
                "source": "params.ip_address",
                "target": "ip_address",
                "operation": "move"
              },
              {
                "source": "params.app_id",
                "target": "app_id",
                "operation": "move"
              },
              {
                "source": "params.has_query",
                "target": "has_query",
                "operation": "move"
              },
              {
                "source": "params.has_clicks",
                "target": "has_clicks",
                "operation": "move"
              },
              {
                "source": "params.has_filters",
                "target": "has_filters",
                "operation": "move"
              },
              {
                "source": "params.domain",
                "target": "domain",
                "operation": "move"
              },
              {
                "source": "params.filter_field",
                "target": "filter_field",
                "operation": "move"
              },
              {
                "source": "params.filter",
                "target": "filter",
                "operation": "move"
              },
              {
                "source": "params.twigkitRequestToken",
                "target": "twigkitRequestToken",
                "operation": "move"
              },
              {
                "source": "params.response_type",
                "target": "response_type",
                "operation": "move"
              },
              {
                "source": "params.anonymous",
                "target": "anonymous",
                "operation": "move"
              },
              {
                "source": "params.browser_name",
                "target": "browser_name",
                "operation": "move"
              },
              {
                "source": "params.browser_type",
                "target": "browser_type",
                "operation": "move"
              },
              {
                "source": "params.browser_version",
                "target": "browser_version",
                "operation": "move"
              },
              {
                "source": "params.ctx_curr_path",
                "target": "ctx_curr_path",
                "operation": "move"
              },
              {
                "source": "params.ctx_curr_query",
                "target": "ctx_curr_query",
                "operation": "move"
              },
              {
                "source": "params.ctx_prev_path",
                "target": "ctx_prev_path",
                "operation": "move"
              },
              {
                "source": "params.ctx_prev_path_original",
                "target": "ctx_prev_path_original",
                "operation": "move"
              },
              {
                "source": "params.ctx_prev_query",
                "target": "ctx_prev_query",
                "operation": "move"
              },
              {
                "source": "params.ctx_prev_uri",
                "target": "ctx_prev_uri",
                "operation": "move"
              },
              {
                "source": "params.locale",
                "target": "locale",
                "operation": "move"
              },
              {
                "source": "params.orientation",
                "target": "orientation",
                "operation": "move"
              },
              {
                "source": "params.os_device",
                "target": "os_device",
                "operation": "move"
              },
              {
                "source": "params.res_offset",
                "target": "res_offset",
                "operation": "move"
              },
              {
                "source": "params.os_group",
                "target": "os_group",
                "operation": "move"
              },
              {
                "source": "params.os_id",
                "target": "os_id",
                "operation": "move"
              },
              {
                "source": "params.os_manufacturer",
                "target": "os_manufacturer",
                "operation": "move"
              },
              {
                "source": "params.os_name",
                "target": "os_name",
                "operation": "move"
              },
              {
                "source": "params.page_title",
                "target": "page_title",
                "operation": "move"
              },
              {
                "source": "params.path",
                "target": "path",
                "operation": "move"
              },
              {
                "source": "params.path_transition",
                "target": "path_transition",
                "operation": "move"
              },
              {
                "source": "params.query_transition",
                "target": "query_transition",
                "operation": "move"
              },
              {
                "source": "params.query_type",
                "target": "query_type",
                "operation": "move"
              },
              {
                "source": "params.referrer",
                "target": "referrer",
                "operation": "move"
              },
              {
                "source": "params.referrer_domain",
                "target": "referrer_domain",
                "operation": "move"
              },
              {
                "source": "params.request_transition",
                "target": "request_transition",
                "operation": "move"
              },
              {
                "source": "params.res_pos",
                "target": "res_pos",
                "operation": "move"
              },
              {
                "source": "params.user_roles",
                "target": "user_roles",
                "operation": "move"
              },
              {
                "source": "params.url_domain",
                "target": "url_domain",
                "operation": "move"
              },
              {
                "source": "params.url_path",
                "target": "url_path",
                "operation": "move"
              },
              {
                "source": "params.url_type",
                "target": "url_type",
                "operation": "move"
              },
              {
                "source": "params.score",
                "target": "score",
                "operation": "move"
              },
              {
                "source": "params.hits",
                "target": "hits",
                "operation": "move"
              },
              {
                "source": "params.rows",
                "target": "rows",
                "operation": "move"
              },
              {
                "source": "params.qtime",
                "target": "qtime",
                "operation": "move"
              },
              {
                "source": "params.collection",
                "target": "collection",
                "operation": "move"
              },
              {
                "source": "params.page",
                "target": "page",
                "operation": "move"
              },
              {
                "source": "params.platform",
                "target": "platform",
                "operation": "move"
              },
              {
                "source": "params.http_method",
                "target": "http_method",
                "operation": "move"
              },
              {
                "source": "params.type",
                "target": "type",
                "operation": "move"
              },
              {
                "source": "flag",
                "target": "flag_s",
                "operation": "move"
              },
              {
                "source": "params.flag",
                "target": "flag_s",
                "operation": "move"
              },
              {
                "source": "timestamp",
                "target": "timestamp_tdt",
                "operation": "copy"
              },
              {
                "source": "timestamp",
                "target": "date",
                "operation": "move"
              },
              {
                "source": "params.count",
                "target": "count_i",
                "operation": "move"
              },
              {
                "source": "params.weight",
                "target": "weight_d",
                "operation": "move"
              },
              {
                "source": "params.query",
                "target": "query",
                "operation": "copy"
              },
              {
                "source": "params.query",
                "target": "query_t",
                "operation": "move"
              },
              {
                "source": "params.doc_ids_s",
                "target": "doc_ids_s",
                "operation": "move"
              },
              {
                "source": "params.docId",
                "target": "doc_id",
                "operation": "move"
              },
              {
                "source": "params.userId",
                "target": "user_id",
                "operation": "move"
              },
              {
                "source": "params.user_id",
                "target": "user_id",
                "operation": "move"
              },
              {
                "source": "params.filterQueries",
                "target": "filters_s",
                "operation": "move"
              },
              {
                "source": "params.click_type",
                "target": "ctype",
                "operation": "move"
              },
              {
                "source": "params.offset",
                "target": "res_offset",
                "operation": "move"
              },
              {
                "source": "params.start",
                "target": "res_offset",
                "operation": "move"
              },
              {
                "source": "params.lw.pipelineId",
                "target": "pipeline_id",
                "operation": "move"
              },
              {
                "source": "params.numdocs",
                "target": "hits",
                "operation": "move"
              },
              {
                "source": "params.totaltime",
                "target": "time",
                "operation": "copy"
              },
              {
                "source": "params.totaltime",
                "target": "totaltime",
                "operation": "move"
              },
              {
                "source": "params.fl",
                "target": "fields",
                "operation": "move"
              },
              {
                "source": "params.doc_ids",
                "target": "doc_ids",
                "operation": "move"
              },
              {
                "source": "params.bq",
                "target": "boost_query_ss",
                "operation": "move"
              },
              {
                "source": "params.username",
                "target": "user_id",
                "operation": "move"
              },
              {
                "source": "params.session_id",
                "target": "session",
                "operation": "move"
              },
              {
                "source": "params.sessionId",
                "target": "session",
                "operation": "move"
              },
              {
                "source": "params.session",
                "target": "session",
                "operation": "move"
              },
              {
                "source": "params.fusionExperimentId",
                "target": "experiment_id",
                "operation": "move"
              },
              {
                "source": "params.fusionExperimentSignalsCollection",
                "target": "experiment_collection",
                "operation": "move"
              },
              {
                "source": "params.queryId",
                "target": "query_id",
                "operation": "move"
              },
              {
                "source": "params.query_id",
                "target": "query_id",
                "operation": "move"
              },
              {
                "source": "params.fusionQueryId",
                "target": "fusion_query_id",
                "operation": "move"
              },
              {
                "source": "params.fusionExperimentVariant",
                "target": "experiment_variant",
                "operation": "move"
              },
              {
                "source": "params.isFusionQuery",
                "target": "is_fusion_query",
                "operation": "move"
              },
              {
                "source": "params.uf",
                "target": "uf_s",
                "operation": "move"
              },
              {
                "source": "params.defType",
                "target": "deftype_s",
                "operation": "move"
              },
              {
                "source": "params.facet",
                "target": "facet_s",
                "operation": "move"
              },
              {
                "source": "params.rules_ordered_q",
                "target": "rules_ordered_q_s",
                "operation": "move"
              },
              {
                "source": "params.context",
                "target": "context_s",
                "operation": "move"
              },
              {
                "source": "params.lw.tagger.debug",
                "target": "lw_tagger_debug_s",
                "operation": "move"
              },
              {
                "source": "params.lw.rules.debug",
                "target": "lw_tagger_debug_s",
                "operation": "move"
              },
              {
                "source": "params.orig_q",
                "target": "orig_q_s",
                "operation": "move"
              },
              {
                "source": "/params\\.(.*)(?<!_.{1,2})$/",
                "target": "params.$1_ss",
                "operation": "move"
              },
              {
                "source": "/params\\.(.*)/",
                "target": "params_$1",
                "operation": "move"
              }
            ],
            "retentionMappings": [
              {
                "field": "type",
                "operation": "keep"
              },
              {
                "field": "timestamp_tdt",
                "operation": "keep"
              },
              {
                "field": "params.query_object",
                "operation": "delete"
              },
              {
                "field": "query_hash",
                "operation": "keep"
              },
              {
                "field": "request_id_s",
                "operation": "keep"
              },
              {
                "field": "has_query",
                "operation": "keep"
              },
              {
                "field": "has_clicks",
                "operation": "keep"
              },
              {
                "field": "params.q",
                "operation": "delete"
              },
              {
                "field": "query_id",
                "operation": "keep"
              },
              {
                "field": "facet_field_ss",
                "operation": "keep"
              },
              {
                "field": "params.fusionQueryId",
                "operation": "keep"
              }
            ],
            "updateMappings": [],
            "unmappedRule": {
              "keep": true,
              "delete": false,
              "fieldToMoveValuesTo": "",
              "fieldToCopyValuesTo": "",
              "valueToAddToUnmappedFields": "",
              "valueToSetOnUnmappedFields": ""
            },
            "reservedFieldsMappingAllowed": false,
            "type": "field-mapping",
            "skip": false,
            "secretSourceStageId": "d2970d13-d43d-419a-8ace-314b5ae664bc"
          },
          {
            "id": "d839d964-380f-4380-a6d9-49af1857ff4d",
            "script": "/* globals Java, logger*/\n(function () {\n    \"use strict\";\n\n    var isDebug = false\n    function logIfDebug(m){if(isDebug && m)logger.info(m, Array.prototype.slice.call(arguments).slice(1));}\n    \n    var queryFields = [\"query\",\"query_t\"]\n    var UtilLib\n\n    return function(doc, ctx, collection, solrServer, solrServerFactory) {\n       if(!UtilLib) {\n            var UtilLib = ctx.get(\"UtilLib\");\n            if(!UtilLib) {\n                logger.error(\"Unable to load UtilLib from context.  Check prior stages!\")\n            }\n      }\n      for (var i = 0; i < queryFields.length; i++){\n        var fName = queryFields[i]\n        var query = doc.getFirstFieldValue(fName)\n        if(query){\n          logIfDebug(\"removing accents from {}\",query)\n          doc.setField(fName,UtilLib.eliminaAcentos(query))\n        }\n      }    \n\n      //TODO: add pipeline code\n      return doc;\n    };\n\n})();",
            "type": "javascript-index",
            "skip": false,
            "label": "Remove Áccent marks from query",
            "secretSourceStageId": "d839d964-380f-4380-a6d9-49af1857ff4d"
          },
          {
            "id": "83fbd23e-57b6-45b6-82f9-ec622006f5a5",
            "ipAddrField": "ip_address",
            "hostnameField": "host",
            "type": "geoip-lookup",
            "skip": false,
            "secretSourceStageId": "83fbd23e-57b6-45b6-82f9-ec622006f5a5"
          },
          {
            "id": "0dabefa9-8412-480d-86ec-9b97ee71b775",
            "script": "/* globals Java, logger*/\n(function () {\n  \"use strict\";\n  var LEN_LIMIT = 256\n  var UtilLib\n  var ArrayList = Java.type(\"java.util.ArrayList\")\n\n  var isDebug = false\n  function logIfDebug(m) { if (isDebug && m) logger.info(m, Array.prototype.slice.call(arguments).slice(1)); }\n\n\n  return function (doc, ctx, collection, solrServer, solrServerFactory) {\n    if (!UtilLib) {\n      var UtilLib = ctx.get(\"UtilLib\");\n      if (!UtilLib) {\n        logger.error(\"Unable to load UtilLib from context.  Check prior stages!\")\n      }\n    }\n    var sFields = doc.getFields()  //public Map<String, List<PipelineField>> \n    var entries = new ArrayList(sFields.entrySet())\n    var sFields = []\n    var ssFields = []\n    for (var e = 0; e < entries.length; e++) {\n      var entry = entries[e]\n      var key = entry.getKey()\n      if (key.endsWith(\"_s\")) {\n        sFields.push(entry)\n        //logIfDebug(\"signal string field {}\", key)\n      } else if (key.endsWith(\"_ss\")) {\n        ssFields.push(entry)\n      }\n    }\n    for (var i = 0; i < sFields.length; i++) {\n      var sField = sFields[i] //UnmodifiableEntry\n      //logIfDebug(\"signals field {}\",sField.getClass())\n      var key = sField.getKey()\n      var single = doc.getFirstFieldValue(key) //List<PipelineField>\n      if (single.length > LEN_LIMIT) {\n        var small = UtilLib.truncateString(single, LEN_LIMIT, true, true)\n        doc.setField(key, small)\n      }\n      logIfDebug(\"signals field {} has type {} and size{}\", key, single.getClass(), single.length)\n\n    }\n    //TODO: add pipeline code\n    return doc;\n  };\n\n})();",
            "type": "javascript-index",
            "skip": false,
            "label": "JS: truncate long string fields",
            "secretSourceStageId": "0dabefa9-8412-480d-86ec-9b97ee71b775"
          },
          {
            "id": "04b38370-a88a-4e16-b4b9-63b5d52597c7",
            "translationMappings": [],
            "retentionMappings": [
              {
                "field": "params_rules_item_ss",
                "operation": "delete"
              }
            ],
            "updateMappings": [],
            "unmappedRule": {
              "keep": true,
              "delete": false,
              "fieldToMoveValuesTo": "",
              "fieldToCopyValuesTo": "",
              "valueToAddToUnmappedFields": "",
              "valueToSetOnUnmappedFields": ""
            },
            "reservedFieldsMappingAllowed": false,
            "type": "field-mapping",
            "skip": false,
            "label": "Remove Large Rules fields",
            "secretSourceStageId": "04b38370-a88a-4e16-b4b9-63b5d52597c7"
          },
          {
            "id": "7bbf366f-1b20-48e8-9bf1-515cec0ea8ff",
            "enforceSchema": true,
            "fieldsList": false,
            "dateFormats": [],
            "params": [],
            "bufferDocsForSolr": true,
            "allowBlacklistedRequestParameters": false,
            "type": "solr-index",
            "skip": false,
            "secretSourceStageId": "7bbf366f-1b20-48e8-9bf1-515cec0ea8ff"
          },
          {
            "id": "6c08ac78-3696-45d3-8f68-e7aa7e39d348",
            "realTimeGetQuery": "id:${request_id_s} AND has_clicks:false",
            "lookupQuery": "+query_id:\"${query_id}\" +type:request +has_clicks:false",
            "lookupSort": "timestamp_tdt desc",
            "applyLookupCriteria": "type == click",
            "fieldsToUpdate": [
              {
                "key": "has_clicks",
                "value": "true"
              }
            ],
            "idField": "id",
            "secsToCacheRecentlyUpdatedDocs": 120,
            "type": "update-existing-doc",
            "skip": false,
            "label": "Update has_clicks flag",
            "secretSourceStageId": "6c08ac78-3696-45d3-8f68-e7aa7e39d348"
          }
        ],
        "updates": [
          {
            "userId": "connectors-rpc_service_account",
            "timestamp": "2021-03-22T06:42:37.665Z"
          }
        ],
        "properties": {
          "secretSourcePipelineId": "_signals_ingest"
        }
      }
    ],
    "queryPipelines": [
      {
        "id": "DC_Large",
        "stages": [
          {
            "id": "e036467a-f0d0-4d47-8949-1d08d6de4cb7",
            "script": "var Date = Java.type(\"java.util.Date\");\n\nfunction(request, response, ctx) {\n  var time = new Date().getTime();\n  ctx.put('timer', '');\n  ctx.put('pipelineStartTime', time);\n  ctx.put('stageStartTime', time);\n\n  if (request.hasParam('q')) {\n    var q = request.getFirstFieldValue('q');\n    ctx.put('originalQueryTerms', q);\n  }\n\n}",
            "shareState": true,
            "type": "javascript-query",
            "skip": false,
            "label": "----- start timer -----",
            "condition": "request.hasParam('timer') && request.getFirstParam('timer') === 'true'\n// For QA/Debug purpooses - don't go into production with this stage",
            "licensed": true,
            "secretSourceStageId": "e036467a-f0d0-4d47-8949-1d08d6de4cb7"
          },
          {
            "id": "895a358e-c0f0-48a7-ba3e-7afe78fd8a8e",
            "params": [
              {
                "key": "workbench",
                "value": "true",
                "policy": "default"
              },
              {
                "key": "timer",
                "value": "true",
                "policy": "append"
              }
            ],
            "type": "set-params",
            "skip": false,
            "label": "Set QWB Context",
            "secretSourceStageId": "895a358e-c0f0-48a7-ba3e-7afe78fd8a8e"
          },
          {
            "id": "3a448aef-e19a-4a77-a107-ad9b723b8232",
            "ref": "urn:x-fusion:blob:lib/query/UtilLib.js",
            "shareState": true,
            "type": "managed-js-query",
            "skip": false,
            "label": "Load UtilLib Managed JS",
            "condition": "//JSON_FACETS_RULES\ntrue;",
            "licensed": true,
            "secretSourceStageId": "3a448aef-e19a-4a77-a107-ad9b723b8232"
          },
          {
            "id": "15cd176d-1fa3-4c51-a3af-da8bb0bcc325",
            "params": [
              {
                "key": "fq",
                "value": "{!collapse field=productRollup_s tag=mainQuery}",
                "policy": "append"
              }
            ],
            "type": "set-params",
            "skip": false,
            "label": "JSON_FACETS_RULES Collapse ",
            "condition": "//JSON_FACETS_RULES\ntrue;",
            "secretSourceStageId": "15cd176d-1fa3-4c51-a3af-da8bb0bcc325"
          },
          {
            "id": "ff8dc1ba-1f18-44c8-8ed3-216b4c0a974c",
            "params": [
              {
                "key": "spellcheck",
                "value": "false",
                "policy": "replace"
              },
              {
                "key": "_lwps_initial_query_s",
                "value": "<q>",
                "policy": "replace"
              },
              {
                "key": "spellcheck.q",
                "value": "<q>",
                "policy": "append"
              },
              {
                "key": "_lwps_spell_is_initial_query_s",
                "value": "true",
                "policy": "append"
              },
              {
                "key": "_lwps_fallback_mm_value_s",
                "value": "2",
                "policy": "append"
              },
              {
                "key": "mm",
                "value": "3",
                "policy": "append"
              }
            ],
            "type": "set-params",
            "skip": false,
            "label": "SOLR_SPELL_capture user query and prep spellcheck",
            "condition": "true;\n/*\nturn off spellcheck and capture the initial query value.\nTODO: logic may be needed to ensure that spellcheck is skipped for\n   - overly long queries as they spike cvolation times e.g. \"DEWALT 2 in. x 18-Gauge Metal Brad Nails (2500 per Pack)\"\n   - queries of product numbers or things which never result in a valid spelling e.g. 12-abc-225#blk\n   - queries for which identifying the term is difficult. e.g `{!frange l=10 u=15}product(basePrice, sum(1, $userSalesTax))``\n*/",
            "secretSourceStageId": "ff8dc1ba-1f18-44c8-8ed3-216b4c0a974c"
          },
          {
            "id": "821e991f-3478-4865-9f75-255725d93575",
            "script": "function(request, response, ctx) {\n  var timedStage = 'Initialization stages';\n  var time = new Date().getTime();\n  ctx.put('timer', ctx.get('timer') + '-- Timed Stage: ' + timedStage + ' at ' + (time - ctx.get('stageStartTime')));\n  ctx.put('stageStartTime', time);\n}",
            "shareState": true,
            "type": "javascript-query",
            "skip": false,
            "label": "----- timer -----",
            "condition": "request.hasParam('timer') && request.getFirstParam('timer') === 'true'\n// For QA/Debug purposes - don't go into production with this stage",
            "licensed": true,
            "secretSourceStageId": "821e991f-3478-4865-9f75-255725d93575"
          },
          {
            "id": "497a97e7-2ffc-41b1-a5b0-49c8c2928970",
            "script": "function getPrefix(fqs){\n  var sep = \"|\"\n  try {\n    var depth = 0;\n    if (null != fqs && fqs.length > 0) {\n      for (var i = 0; i < fqs.length; i++) {\n        var fq = fqs[i];\n        logger.info(\"**FQ:\"+fq);\n        if (fq.startsWith(taxoFld)) {\n          var fqVal = fq.split(':')[1].replace(/{.*}/,'');            //grab the value, but drop local params if they're there\n          fqVal = fqVal.replace(/[(\")]/g,\"\");                         //drop quotes and params \n          depth = fqVal.split(sep)[0];\n          depth++;\n          fqVal = fqVal.split(sep).slice(1,depth+1).join(sep);        //grab the prefix for the next level\n        \n          //logger.info(\"PREFIX:\"+depth + sep + fqVal);\n          return depth + sep + fqVal;\n        }\n      }\n    }\n    return 0;  //didn't find any category filters\n  }\n  catch (error) {\n    logger.info(\"Error: \"+error);\n    return 0;\n  }\n}\n\nfunction (request, response, ctx) {\n  taxoFld = \"categoryDepth_ss\";\n\n  //assume facets set to true\n  var fqs = request.getParam(\"fq\");\n  var currPrefix = getPrefix(fqs);\n\n  request.addParam(\"facet.field\",taxoFld);\n  request.addParam(\"f.\"+taxoFld+\".facet.prefix\", currPrefix);\n\n}",
            "shareState": true,
            "type": "javascript-query",
            "skip": false,
            "label": "TAXO_EXACT_OR_DESC_MATCH Create Taxo Facets",
            "condition": "//TAXO_EXACT_OR_DESC_MATCH\ntrue;",
            "secretSourceStageId": "497a97e7-2ffc-41b1-a5b0-49c8c2928970"
          },
          {
            "id": "4a5684a5-e6e4-47e0-bba2-b267b64164b9",
            "paramToTag": "q",
            "spell_corrections_enabled": true,
            "phrase_boosting_enabled": false,
            "tail_rewrites_enabled": false,
            "phraseBoost": 2.0,
            "phraseSlop": 10,
            "synonymExpansionBoost": 2.0,
            "synonym_expansion_enabled": false,
            "remove_words_enabled": true,
            "overlaps": "all",
            "params": [],
            "maxWaitMs": 500,
            "type": "text-tagger",
            "skip": false,
            "label": "Text Tagger - Spelling",
            "secretSourceStageId": "4a5684a5-e6e4-47e0-bba2-b267b64164b9"
          },
          {
            "id": "317b8ac5-01c8-4504-ba45-6a533f6bc459",
            "script": "function(request, response, ctx) {\n  var timedStage = 'Text Tagger - Spell';\n  var time = new Date().getTime();\n  ctx.put('timer', ctx.get('timer') + '-- Timed Stage: ' + timedStage + ' at ' + (time - ctx.get('stageStartTime')));\n  ctx.put('stageStartTime', time);\n}",
            "shareState": true,
            "type": "javascript-query",
            "skip": false,
            "label": "----- timer -----",
            "condition": "request.hasParam('timer') && request.getFirstParam('timer') === 'true'\n// For QA/Debug purposes - don't go into production with this stage",
            "licensed": true,
            "secretSourceStageId": "317b8ac5-01c8-4504-ba45-6a533f6bc459"
          },
          {
            "id": "0b0ddf2a-5bf1-48d2-99f4-09ca554a8e74",
            "params": [
              {
                "key": "boost",
                "value": "max(1,sum(0.6,recip(ms(NOW,recentDate_dt),3.16e-11,1,1)))",
                "policy": "append"
              }
            ],
            "type": "set-params",
            "skip": false,
            "label": "RECENCY boost recent docs",
            "condition": "true;\n// TODO keep recentDate_dt in sync with index pipeline\n// RECENCY JS:calculate recency date stage ",
            "secretSourceStageId": "0b0ddf2a-5bf1-48d2-99f4-09ca554a8e74"
          },
          {
            "id": "0f2f1f31-2f69-4eec-b846-ead5883ad093",
            "numRecommendations": 10,
            "numSignals": 100,
            "aggrType": "click@doc_id,filters,query",
            "boostId": "id",
            "boostingMethod": "query-param",
            "boostingParam": "boost",
            "queryParams": [
              {
                "key": "qf",
                "value": "query_t"
              },
              {
                "key": "pf",
                "value": "query_t^50"
              },
              {
                "key": "pf",
                "value": "query_t~3^20"
              },
              {
                "key": "pf2",
                "value": "query_t^20"
              },
              {
                "key": "pf2",
                "value": "query_t~3^10"
              },
              {
                "key": "pf3",
                "value": "query_t^10"
              },
              {
                "key": "pf3",
                "value": "query_t~3^5"
              },
              {
                "key": "boost",
                "value": "map(query({!field f=query_s v=$q}),0,0,1,20)"
              },
              {
                "key": "mm",
                "value": "80%"
              },
              {
                "key": "defType",
                "value": "edismax"
              },
              {
                "key": "sort",
                "value": "score desc, weight_d desc"
              },
              {
                "key": "fq",
                "value": "weight_d:[* TO *]"
              }
            ],
            "rollupField": "doc_id_s",
            "rollupWeightField": "weight_d",
            "weightExpression": "math:log(weight_d + 1) + 10 * math:log(score+1)",
            "rollupWeightStrategy": "max",
            "queryParamToBoost": "q",
            "includeEnrichedQuery": false,
            "type": "recommendation",
            "skip": false,
            "secretSourceStageId": "0f2f1f31-2f69-4eec-b846-ead5883ad093"
          },
          {
            "id": "0a812b2e-df3e-420e-aae7-debf00fd274e",
            "script": "function(request, response, ctx) {\n  var timedStage = 'Boosting';\n  var time = new Date().getTime();\n  ctx.put('timer', ctx.get('timer') + '-- Timed Stage: ' + timedStage + ' at ' + (time - ctx.get('stageStartTime')));\n  ctx.put('stageStartTime', time);\n}",
            "shareState": true,
            "type": "javascript-query",
            "skip": false,
            "label": "----- timer -----",
            "condition": "request.hasParam('timer') && request.getFirstParam('timer') === 'true'\n// For QA/Debug purposes - don't go into production with this stage",
            "licensed": true,
            "secretSourceStageId": "0a812b2e-df3e-420e-aae7-debf00fd274e"
          },
          {
            "id": "2dfafd96-13ac-4d24-8079-a17aab3911cc",
            "rows": 10,
            "start": 0,
            "sortOrder": [],
            "queryFields": [
              {
                "field": "s100",
                "boost": 10.0
              },
              {
                "field": "s90",
                "boost": 9.0
              },
              {
                "field": "s80",
                "boost": 8.0
              },
              {
                "field": "s70",
                "boost": 7.0
              },
              {
                "field": "s60",
                "boost": 6.0
              },
              {
                "field": "s50",
                "boost": 5.0
              },
              {
                "field": "s40",
                "boost": 4.0
              },
              {
                "field": "s30",
                "boost": 3.0
              },
              {
                "field": "s20",
                "boost": 2.0
              },
              {
                "field": "s10",
                "boost": 1.0
              }
            ],
            "returnFields": [
              "*"
            ],
            "returnScore": true,
            "minimumMatch": "",
            "type": "search-fields",
            "skip": false,
            "label": "Scalable Query Fields",
            "condition": "true\n//use this either this stage (when using scalable query fields), or the DM Query Fields when using traditional field boosting.",
            "secretSourceStageId": "2dfafd96-13ac-4d24-8079-a17aab3911cc"
          },
          {
            "id": "a5da99ed-64e4-42a9-9315-5088d75805e5",
            "rows": 10,
            "start": 0,
            "sortOrder": [],
            "queryFields": [
              {
                "field": "productID_t",
                "boost": 10.0
              },
              {
                "field": "skuID_t",
                "boost": 10.0
              },
              {
                "field": "name_t",
                "boost": 10.0
              },
              {
                "field": "description_t",
                "boost": 2.0
              },
              {
                "field": "category_txt",
                "boost": 4.0
              },
              {
                "field": "type_txt",
                "boost": 6.0
              },
              {
                "field": "brand_t",
                "boost": 6.0
              },
              {
                "field": "color_t",
                "boost": 6.0
              },
              {
                "field": "colorFamily_t",
                "boost": 5.0
              },
              {
                "field": "manufacturer_t",
                "boost": 2.0
              },
              {
                "field": "gender_t",
                "boost": 3.0
              },
              {
                "field": "size_t",
                "boost": 3.0
              },
              {
                "field": "material_t",
                "boost": 4.0
              },
              {
                "field": "searchable_txt",
                "boost": 2.0
              }
            ],
            "returnFields": [
              "*"
            ],
            "returnScore": true,
            "minimumMatch": "",
            "type": "search-fields",
            "skip": true,
            "label": "DM Query Fields",
            "condition": "true;\n//Use this stage OR the scalable query fields; not both",
            "secretSourceStageId": "a5da99ed-64e4-42a9-9315-5088d75805e5"
          },
          {
            "id": "d1c1c288-1c03-4cec-95b9-eefdf0a27a36",
            "fieldFacets": [
              {
                "field": "categoryDepth_ss",
                "limit": 100,
                "minCount": 1,
                "missing": false
              },
              {
                "field": "productID_s",
                "limit": 100,
                "minCount": 1,
                "missing": false
              },
              {
                "field": "MetalColor_t",
                "limit": 100,
                "minCount": 1,
                "missing": false
              }
            ],
            "rangeFacets": [],
            "type": "facet",
            "skip": false,
            "label": "Global Facets",
            "secretSourceStageId": "d1c1c288-1c03-4cec-95b9-eefdf0a27a36",
            "properties": {
              "autoCreated": true
            }
          },
          {
            "id": "6f03eec0-7cfc-4a63-8038-bfa114a60359",
            "script": "function (request, response, ctx) {\n  //with (DSL) {\n  var orig_taxo_field = \"categoryDepth_ss\"; //\"categoryDepth_ss\";   //actual filter field received from the client; it contains depth prefixes (e.g., 2/Clothing/Dresses/Cocktail)\n\n  //the following fields are used for DESCENDANT matching and EXACT matching, respectively; they do NOT contain depth prefixes, so those must be stripped from the fq's\n  var desc_taxo_field = \"category_ss\";         \n  var exact_taxo_field = \"exact_category_ss\";         \n  var sep = \"\\\\|\";          //taxonomy node separator, usually pipe or slash; be sure to escape any regex special chars (e.g., pipe)      \n\n  //find orig field in FQs\n  var fqs = request.getParam('fq');\n  logger.info('fqs:'+fqs);\n  var orig_fq_pattern = new RegExp('.*'+orig_taxo_field+'.*');\n  var field_replace_pattern = new RegExp(orig_taxo_field,'g');\n  var value_replace_pattern = new RegExp('[0-9]'+sep,'g');\n\n  for each (var fq in fqs){\n    if (orig_fq_pattern.test(fq)) {\n      var exact_fq = fq.replace(field_replace_pattern,exact_taxo_field);\n      exact_fq = exact_fq.replace(value_replace_pattern,'');\n      var desc_fq = fq.replace(field_replace_pattern,desc_taxo_field);\n      desc_fq = desc_fq.replace(value_replace_pattern,'');\n      request.addParam('fq',exact_fq)\n      request.addParam('fq',desc_fq)\n      ctx[\"exact_param_added\"] = true;\n      logger.info(\"DESC added fq:\"+ desc_fq)\n      logger.info(\"EXACT added fq:\"+ exact_fq)\n      break;  \n    }\n  }\n  //}\n}",
            "shareState": true,
            "type": "javascript-query",
            "skip": false,
            "label": "TAXO_EXACT_OR_DESC_MATCH Taxo FQs - Add exact and depth",
            "condition": "true;\n//TAXO_EXACT_OR_DESC_MATCH",
            "secretSourceStageId": "6f03eec0-7cfc-4a63-8038-bfa114a60359"
          },
          {
            "id": "8a6c8a0f-daa8-4df7-b11b-dc07f7f3887a",
            "useOriginalQueryIfNoRulesMatch": true,
            "matchPartialFilterQueries": true,
            "handler": "select",
            "method": "POST",
            "ruleLimit": "100",
            "params": [],
            "hierarchicalFilter": [
              {
                "field": "category_ss",
                "delimiter": "|"
              }
            ],
            "headers": [],
            "maxWaitMs": 500,
            "type": "query-rules",
            "skip": false,
            "label": "TAXO_EXACT_OR_DESC_MATCH* Apply Rules",
            "condition": "true;\n//TAXO_EXACT_OR_DESC_MATCH\n",
            "licensed": true,
            "secretSourceStageId": "8a6c8a0f-daa8-4df7-b11b-dc07f7f3887a"
          },
          {
            "id": "c4dc91e4-90c4-4d94-9953-59cf99b96de3",
            "useOriginalQueryIfNoRulesMatch": true,
            "matchPartialFilterQueries": true,
            "handler": "select",
            "method": "POST",
            "ruleLimit": "100",
            "params": [
              {
                "key": "fq",
                "value": "{!collapse field=rollup sort='priority asc, updatedOn desc'}"
              }
            ],
            "hierarchicalFilter": [
              {
                "field": "category_ss",
                "delimiter": "|"
              }
            ],
            "headers": [],
            "maxWaitMs": 500,
            "type": "query-rules",
            "skip": false,
            "label": "Apply Rules with Collapse",
            "condition": "true;\n//use the collapsing query parser to collapse rules around rollup field",
            "secretSourceStageId": "c4dc91e4-90c4-4d94-9953-59cf99b96de3"
          },
          {
            "id": "3eb9d275-1fec-4830-8247-785f6425dd73",
            "script": "function(request, response, ctx) {\n  var timedStage = 'Apply Rules';\n  var time = new Date().getTime();\n  ctx.put('timer', ctx.get('timer') + '-- Timed Stage: ' + timedStage + ' at ' + (time - ctx.get('stageStartTime')));\n  ctx.put('stageStartTime', time);\n}",
            "shareState": true,
            "type": "javascript-query",
            "skip": false,
            "label": "----- timer -----",
            "condition": "request.hasParam('timer') && request.getFirstParam('timer') === 'true'\n// For QA/Debug purposes - don't go into production with this stage",
            "licensed": true,
            "secretSourceStageId": "3eb9d275-1fec-4830-8247-785f6425dd73"
          },
          {
            "id": "65a7d5c0-5e8f-4890-bd90-4e79f2ece234",
            "useOriginalQueryIfNoRulesMatch": true,
            "matchPartialFilterQueries": true,
            "handler": "select",
            "method": "POST",
            "ruleLimit": "100",
            "params": [
              {
                "key": "fq",
                "value": "{!collapse field=alt_rollup_s sort='priority asc, updatedOn desc'}"
              }
            ],
            "hierarchicalFilter": [
              {
                "field": "category_ss",
                "delimiter": "|"
              }
            ],
            "headers": [],
            "maxWaitMs": 500,
            "type": "query-rules",
            "skip": true,
            "label": "Apply Rules with Collapse (alternate rollup field)",
            "condition": "true;\n//use this version of rules collapse if you want to use the alt_rollup_s version of rollup (see query rewrite index pipeline for how field is populated)",
            "secretSourceStageId": "65a7d5c0-5e8f-4890-bd90-4e79f2ece234"
          },
          {
            "id": "59cb3cea-b674-49df-bcac-0e0e79152c3b",
            "paramToTag": "q",
            "spell_corrections_enabled": false,
            "phrase_boosting_enabled": true,
            "tail_rewrites_enabled": true,
            "phraseBoost": 2.0,
            "phraseSlop": 10,
            "synonymExpansionBoost": 2.0,
            "synonym_expansion_enabled": true,
            "remove_words_enabled": true,
            "overlaps": "all",
            "params": [],
            "maxWaitMs": 500,
            "type": "text-tagger",
            "skip": false,
            "label": "Text Tagger - Phrase, Synonyms, Head/Tail",
            "secretSourceStageId": "59cb3cea-b674-49df-bcac-0e0e79152c3b"
          },
          {
            "id": "039ec390-c1aa-4acc-819d-1724ede45ac4",
            "script": "//drop all fq's with 'exact_' or 'desc_' prefix\n\nfunction (request, response, ctx) {\n  //with (DSL) {\n    \n  var fq_pattern = new RegExp('^exact_.*|^category_ss.*');\n  var fqs = request.getParam('fq');\n  logger.info('fqs:'+fqs);\n\n  var newFqs = [];\n  var needToSwap = false;\n\n  for each (var fq in fqs){\n    if (fq_pattern.test(fq)) {\n      needToSwap = true;  \n      logger.info(\"dropping rule param fq:\"+fq)\n    }\n    else {\n      newFqs.push(fq)\n    }\n   \n  }\n\n  if (needToSwap){\n    request.removeParam('fq');\n    for (i=0;i<newFqs.length;i++){\n      request.addParam('fq',newFqs[i]);\n      logger.info(\"adding fq:\"+newFqs[i]);\n    }\n  }\n\n  logger.info(\"NEW FQ:\"+newFqs);\n\n  //}\n}",
            "shareState": true,
            "type": "javascript-query",
            "skip": false,
            "label": "TAXO_EXACT_OR_DESC_MATCH Remove added FQs",
            "condition": "true;\n//TAXO_EXACT_OR_DESC_MATCH",
            "secretSourceStageId": "039ec390-c1aa-4acc-819d-1724ede45ac4"
          },
          {
            "id": "027ded65-9f9c-4f74-b2b2-ddaa7179318a",
            "script": "function cleanName(name) { \n  return name.replace(/{.*}/,''); //Drop local params, uppercase\n}\n\nfunction (request, response, ctx) {\n  //with (DSL) {\n  \n  var allParams = request.getParams();\n  var paramkeys = request.getParams().keySet();\n\n  var collapseFilter = 'mainQuery';     //this is the tag referenced in the collapse parameter used to group products\n\n  var productIdFld = 'productRollup_s';       //Field containing the parent id (usually the product ID; assign in index pipeline).\n  var rollupBucket = \"products\";        //Arbitrary name for the rolled up counts\n  var rollupParam = '\"' + rollupBucket + '\": \"unique(' + productIdFld + ')\"';   //JSON element to retrieve product-level rollup counts\n\n  var countSortParam = '{\"' + rollupBucket + '\":desc}';                         //JSON element to specify Count sort (vs Index)\n  var indexSortParam = '\"index\"';                                               //Index sort just needs to be wrapped in quotes\n  \n  var rules = ctx.getProperty(\"lw.rules\");\n  var stdFacetsToDrop = [];\n\n  if (null != rules && rules.length > 0) {\n    logger.info(\"***Rules Found***\");\n\n    for (var i=0; i < rules.length; i++) {\n      var rule = rules[i];\n      logger.info(\"***Rule #\"+i);\n      //logger.info(rule);\n      //logger.info(\"RULE TYPE:\"+rule[\"type\"]);\n\n      if (null != rule && rule[\"type\"].equals(\"set_facets\")) {\n        logger.info(\"***Facet Rule***\");\n        var facets = rule.getFacetData();\n        if (null != facets && facets.length > 0) {\n          var HashMap = Java.type(\"java.util.HashMap\");\n          var multivalueMap = ctx.getProperty(\"multivalueMap.json.facet\");\n          if (multivalueMap == null) {\n            multivalueMap = new HashMap;\n          }\n          var boostValuesMap = new HashMap;\n          var buryValuesMap = new HashMap;\n          var suppressValuesMap = new HashMap;\n\n          for (var j = 0; j < facets.length; j++) {\n            var facet = facets[j];\n\n            //get details of facet from rule \n            var fieldName = facet.getFieldName();\n            var minCount = facet.getMinCount();\n\n            var sort = facet.getSort();\n            var sortParam = (sort == \"count\") ? countSortParam : indexSortParam;\n\n            var selectType = facet.getSelectType();\n            //single select should only exclude the collapseFilter tag; multiselect facets must also exclude filters tagged with their own names\n            var excludeTags = (selectType == 'multi') ? fieldName + ','+ collapseFilter : collapseFilter;\n\n\n            logger.info(\"===============================\");\n            logger.info(\"facet: \" + fieldName);\n            logger.info(\"sort: \" + sort);\n            logger.info(\"minCount: \" + minCount);\n            logger.info(\"selectType: \" + selectType);            \n            logger.info(\"===============================\");     \n\n            var jf = '{' + rollupParam + ',   \"' + fieldName + '\": { \"type\": \"terms\",     \"field\": \"' + fieldName + '\", \"sort\": ' + sortParam + ', \"limit\":-1,  \"mincount\": ' + minCount +',  \"facet\": { ' + rollupParam + '} , \"domain\":{\"excludeTags\":\"' + excludeTags + '\"}  }}';\n            request.addParam('json.facet', jf);\n            logger.info(JSON.stringify(jf));\n            \n            var boostValues = facet.getBoostValues();\n            if (null != boostValues && boostValues.length > 0) {\n              boostValuesMap.put(fieldName, facet.getBoostValues());\n            }\n            var buryValues = facet.getBuryValues();\n            if (null != buryValues && buryValues.length > 0) {\n              buryValuesMap.put(fieldName, facet.getBuryValues());\n            }\n            var suppressValues = facet.getSuppressValues();\n            if (null != suppressValues && suppressValues.length > 0) {\n              suppressValuesMap.put(fieldName, facet.getSuppressValues());\n            }\n\n            //Add field name to list of facet params to drop\n            stdFacetsToDrop.push(fieldName);\n\n          }\n          //TODO: This solution assumes a single active facet rule at a given time; if multiple facet rules fire, only the boosts/buries/suppresses for last facet rule will stored\n          ctx.setProperty(\"multivalueMap.json.facet\", multivalueMap);\n          ctx.setProperty(\"boostValues.json.facet\", boostValuesMap);\n          ctx.setProperty(\"buryValues.json.facet\", buryValuesMap);\n          ctx.setProperty(\"suppressValues.json.facet\", suppressValuesMap);\n\n          //Drop traditional facets (they'll be added back after the query for QWB)\n          var facetFields = request.getParam('facet.field');\n          logger.info('stdFacetsToDrop:'+stdFacetsToDrop);\n          logger.info(\"BEFORE:\"+facetFields);\n          var newFacetFields = [];\n          \n          for each (var ff in facetFields){\n            ff = cleanName(ff);\n            logger.info(\"ff:\"+ff);\n            if (stdFacetsToDrop.indexOf(ff) < 0) {\n              newFacetFields.push(ff);\n            }\n            else {\n              //find all the additional params for this facet and delete them\n              var facetPattern = new RegExp('^f[.]'+ff+'.*');  \n              for each(var param in paramkeys) {\n                if (facetPattern.test(param)) {\n                  request.removeParam(param);\n                  break;\n                }\n              }\n            }\n          }\n\n          logger.info(\"AFTER:\"+newFacetFields);\n\n          //Only delete traditional facets if we're not in QWB\n          if(!request.hasParam('workbench')) {\n            request.removeParam(\"facet.field\");\n            if (newFacetFields.length > 0) {\n              request.putParams(\"facet.field\",newFacetFields);\n            }\n          }\n\n        }\n      }\n    }\n  }\n  //}\n}",
            "shareState": true,
            "type": "javascript-query",
            "skip": false,
            "label": "JSON_FACETS_RULES JSON Facets From Rules",
            "condition": "true;\n//JSON_FACETS_RULES",
            "secretSourceStageId": "027ded65-9f9c-4f74-b2b2-ddaa7179318a"
          },
          {
            "id": "2026d5d8-5339-4737-9e58-3e04b159cbc3",
            "httpMethod": "POST",
            "allowFederatedSearch": false,
            "preferredReplicaType": "pull",
            "type": "solr-query",
            "skip": false,
            "responseSignalsEnabled": true,
            "secretSourceStageId": "2026d5d8-5339-4737-9e58-3e04b159cbc3"
          },
          {
            "id": "66fe0f8c-8ce5-448d-a0fa-2d5606e56e91",
            "script": "function(request, response, ctx) {\n  var timedStage = 'Main Query';\n  var time = new Date().getTime();\n  ctx.put('timer', ctx.get('timer') + '-- Timed Stage: ' + timedStage + ' at ' + (time - ctx.get('stageStartTime')));\n  ctx.put('stageStartTime', time);\n\n  var inner = response.getInnerResponse();\n  var dict = inner.getUnderlyingObject(); \n  if (dict.get('response') && dict.get('response').get('docs')) {\n    ctx.put('docs', dict.get('response').get('docs').size());\n  } else {\n    ctx.put('docs', 'null');\n  }\n  ctx.put('hits', dict.get('response').get('numFound'));\n}",
            "shareState": true,
            "type": "javascript-query",
            "skip": false,
            "label": "----- timer -----",
            "condition": "request.hasParam('timer') && request.getFirstParam('timer') === 'true'\n// For QA/Debug purpooses - don't go into production with this stage",
            "licensed": true,
            "secretSourceStageId": "66fe0f8c-8ce5-448d-a0fa-2d5606e56e91"
          },
          {
            "id": "bee1dc5f-e7e7-4ef4-9cc8-63d43ce1b29a",
            "params": [
              {
                "key": "spellcheck",
                "value": "true",
                "policy": "replace"
              },
              {
                "key": "spellcheck.collate",
                "value": "true",
                "policy": "replace"
              },
              {
                "key": "spellcheck.dictionary",
                "value": "default",
                "policy": "replace"
              },
              {
                "key": "spellcheck.dictionary",
                "value": "wordbreak",
                "policy": "append"
              },
              {
                "key": "spellcheck.dictionary",
                "value": "fileDictionary",
                "policy": "append"
              },
              {
                "key": "_lwps_spell_is_initial_query_s",
                "value": "false",
                "policy": "remove"
              },
              {
                "key": "_lwps_zero_result_queries_i",
                "value": "1",
                "policy": "replace"
              }
            ],
            "type": "set-params",
            "skip": false,
            "label": "SOLR_SPELL if ZERO results ",
            "condition": "response && response.get() && \n  response.get().\n  getInnerResponse().getNumFound().get() == 0",
            "secretSourceStageId": "bee1dc5f-e7e7-4ef4-9cc8-63d43ce1b29a"
          },
          {
            "id": "28097228-8399-4f30-a373-c1be1fbb3290",
            "httpMethod": "POST",
            "allowFederatedSearch": false,
            "preferredReplicaType": "pull",
            "type": "solr-query",
            "skip": false,
            "label": "SOLR_SPELL Solr getSpellcheck Term",
            "condition": "request.getFirstParam(\"_lwps_zero_result_queries_i\") > 0",
            "responseSignalsEnabled": false,
            "secretSourceStageId": "28097228-8399-4f30-a373-c1be1fbb3290"
          },
          {
            "id": "e03f17d1-2472-4806-8cbc-3daa5ca8df9a",
            "script": "function(request, response, ctx) {\n  var timedStage = 'Spellcheck Query';\n  var time = new Date().getTime();\n  ctx.put('timer', ctx.get('timer') + '-- Timed Stage: ' + timedStage + ' at ' + (time - ctx.get('stageStartTime')));\n  ctx.put('stageStartTime', time);\n}",
            "shareState": true,
            "type": "javascript-query",
            "skip": false,
            "label": "----- timer -----",
            "condition": "request.hasParam('timer') && request.getFirstParam('timer') === 'true'\n// For QA/Debug purposes - don't go into production with this stage",
            "licensed": true,
            "secretSourceStageId": "e03f17d1-2472-4806-8cbc-3daa5ca8df9a"
          },
          {
            "id": "24bc9d47-5129-4f04-9152-da37afdcbb38",
            "script": "(function () {\n    \"use strict\";\n    var isDebug = true;\n    function logIfDebug(message){\n      if(isDebug){ var args = Array.prototype.slice.call(arguments);\n        if(args.length > 0){logger.info(args[0],args.slice(1));}}\n    }\n\n    function nonSpellFallback(req,ctx) {\n      var fallback_mm = req.getFirstParam('_lwps_fallback_mm_value_s');\n      if (fallback_mm) {\n        logger.info(\"Falling back, loosening mm param to: \"+fallback_mm);\n        req.putSingleParam(\"mm\",fallback_mm);\n        req.putSingleParam(\"_lwps_loosened_mm_s\",1);\n        ctx.put(\"hasLoosenedMm\",true);\n        logIfDebug(\"Loosened mm to {}\",fallback_mm);\n      }\n    }\n\n    /**\n     * @see https://doc.lucidworks.com/fusion-server/5.3/concepts/querying/pipelines/custom-javascript-query-stages.html\n     */\n    return function(request,response,ctx){\n \n      var abstractResponse = response.getInnerResponse(); // likely a JSONResponse but perhaps XMLResponse or other\n      var underlyingResponse = abstractResponse.getUnderlyingObject();// if JSON then Map<String, Object>.  If XML then org.w3c.dom/Document\n\n      //turn off spell check for subsiquent queries\n      request.putSingleParam(\"spellcheck\",\"false\")\n\n\n      // we could use nashorn's instanceof operator but future compatibility is unknown    \n      var spellcheck, spellCorrection = null;\n      if(abstractResponse && abstractResponse.getClass().getSimpleName().equals(\"JSONResponse\")){\n\n        spellcheck = underlyingResponse.get(\"spellcheck\")  \n              //logIfDebug(\"\\n\\nspellcheck type is {}\\n\\n\",   spellcheck.getClass())\n\n        if (spellcheck) {\n          var collationsVal = spellcheck.getOrDefault(\"collations\",null);\n\n          if (collationsVal) {\n            var jsonnlVal = request.getFirstParam('json.nl');\n            logIfDebug(\"extracting spellcheck collation for json.nl={}\",jsonnlVal)\n            if(\"map\".equalsIgnoreCase(jsonnlVal)){\n              spellCorrection = collationsVal.get(\"collation\")\n            }else if(\"arrmap\".equalsIgnoreCase(jsonnlVal) && collationsVal.length > 0){\n              spellCorrection = collationsVal[0].get(\"collation\");\n            } else if (\"arrarr\".equalsIgnoreCase(jsonnlVal) && collationsVal.length > 0) {\n              spellCorrection = collationsVal[0][1];\n            } else if (collationsVal.length > 1){  // jsonVal is likely flat, the default\n              spellCorrection = collationsVal[1];\n            }\n              logIfDebug(\"found spellcheck collation {}\",   spellCorrection)\n\n          }\n          logger.info(\"no collations!\");\n          nonSpellFallback(request,ctx);\n        }\n        else {\n          nonSpellFallback(request,ctx);\n        }\n\n      }\n      else if(abstractResponse && abstractResponse.getClass().getSimpleName().equals(\"Document\")){\n        //TODO: extend for the org.w3c.dom.Document use case but short circuit for now\n        return\n      }\n      else{\n      return // short circuit\n      }\n\n      \n      if (spellCorrection){\n        var queryParam = request.hasParam('orig_q') ? 'orig_q' : 'q'\n        request.putSingleParam(queryParam,spellCorrection);\n        request.putSingleParam(\"_lwps_spell_corrected_q_s\",spellCorrection)\n        //The pipeline may want to change mm or otherwise widen the query if we don't have a colation so flag this fact\n        ctx.put(\"hasSolrSpellCorrection\",true)\n        logIfDebug(\"Spellcheck Correction changing query to {}\",spellCorrection)\n      }    \n    };\n})();",
            "shareState": true,
            "type": "javascript-query",
            "skip": false,
            "label": "SOLR_SPELL apply spell fix",
            "condition": "request.getFirstParam(\"_lwps_zero_result_queries_i\") > 0",
            "secretSourceStageId": "24bc9d47-5129-4f04-9152-da37afdcbb38"
          },
          {
            "id": "486a33a0-a1ec-45fe-8679-4aad7aa77d97",
            "params": [
              {
                "key": "_lwps_is_spellcheck_requery_i",
                "value": "1",
                "policy": "replace"
              },
              {
                "key": "_lwps_spell_debug_hasSolrSpellCorrection_d",
                "value": "<ctx.hasSolrSpellCorrection>",
                "policy": "append"
              },
              {
                "key": "_lwps_spell_corrected_queries_i",
                "value": "1",
                "policy": "append"
              }
            ],
            "type": "set-params",
            "skip": false,
            "label": "SOLR_SPELL_set extra corrected-spell params",
            "condition": "true == ctx.get(\"hasSolrSpellCorrection\")\n/*\nif hasSolrSpellCorrection is true then the pipeline is set to requery with a changed (spell corrected) query.\nAdd any additional parameters here e.g. changes to mm or\nparameters needed in response signals for tracking/ML\n*/",
            "secretSourceStageId": "486a33a0-a1ec-45fe-8679-4aad7aa77d97"
          },
          {
            "id": "dc1f4a5c-b3d5-417c-8364-8c314a056f3e",
            "httpMethod": "POST",
            "allowFederatedSearch": false,
            "preferredReplicaType": "pull",
            "type": "solr-query",
            "skip": false,
            "label": "SOLR_SPELL_requery",
            "condition": "true == (ctx.get(\"hasSolrSpellCorrection\") || ctx.get(\"hasLoosenedMm\"))",
            "responseSignalsEnabled": true,
            "secretSourceStageId": "dc1f4a5c-b3d5-417c-8364-8c314a056f3e"
          },
          {
            "id": "dde46ed1-15ea-49af-9208-79499acf4517",
            "script": "function(request, response, ctx) {\n  var timedStage = 'Apply Spell Check Main Query';\n  var time = new Date().getTime();\n  ctx.put('timer', ctx.get('timer') + '-- Timed Stage: ' + timedStage + ' at ' + (time - ctx.get('stageStartTime')));\n  ctx.put('stageStartTime', time);\n\n  var inner = response.getInnerResponse();\n  var dict = inner.getUnderlyingObject();\n  if (dict.get('response') && dict.get('response').get('docs')) {\n    ctx.put('zrdocs', dict.get('response').get('docs').size());\n  } else {\n    ctx.put('zrdocs', 'null');\n  }\n  ctx.put('zrhits', dict.get('response').get('numFound'));\n}",
            "shareState": true,
            "type": "javascript-query",
            "skip": false,
            "label": "----- timer -----",
            "condition": "!ctx.containsKey(\"hasRedirect\") && ctx.get(\"autoSpellCorrected\") === true && request.hasParam('timer') && request.getFirstParam('timer') === 'true'\n// For QA/Debug purpooses - don't go into production with this stage",
            "licensed": true,
            "secretSourceStageId": "dde46ed1-15ea-49af-9208-79499acf4517"
          },
          {
            "id": "2e1397a7-49bb-4f88-812a-a4818a2991a9",
            "script": "function (request, response, ctx, collection, solrServer, solrServerFactory) {\n    //Type imports\n    var String = Java.type(\"java.lang.String\");\n    var ArrayList = Java.type(\"java.util.ArrayList\");\n    var HashMap = Java.type(\"java.util.LinkedHashMap\");\n    var HashSet = Java.type(\"java.util.LinkedHashSet\");\n    var TreeSet = Java.type(\"java.util.TreeSet\");\n    var Integer = Java.type(\"java.lang.Integer\");\n\n    //get map out of response\n    var map = response.getInnerResponse().getUnderlyingObject();\n\n    var facets = map.get(\"facets\");\n\n    var facetBoostValues = ctx.getProperty(\"boostValues.json.facet\");\n    var facetBuryValues = ctx.getProperty(\"buryValues.json.facet\");\n    var facetSuppressValues = ctx.getProperty(\"suppressValues.json.facet\");\n    var facetMultiValue = ctx.getProperty(\"multivalueMap.json.facet\");\n    \n    if (facets != null) {\n       //Process JSON facets\n       if (facets.get(\"count\") != null) facets.remove(\"count\");\n       if (facets.get(\"products\") != null) facets.remove(\"products\");\n\n      // Set multivalue and number to show as defaults\n      var facetKeySet = facets.keySet();\n      if (facetKeySet != null) {\n\n         var facetIterator = facetKeySet.iterator();\n         while (facetIterator.hasNext()) {\n            var facet = facetIterator.next();\n\n            logger.info(\"==================\");\n            logger.info(\"Processing facet: \"+facet.toString());\n\n            facets.get(facet).put(\"multivalue\", true);\n            var multiSelect = facetMultiValue.get(facet.toString());\n            if (null != multiSelect && multiSelect == 'single') {\n               facets.get(facet).put(\"multivalue\", false);\n               logger.info(\"multi: False\");\n            }\n\n            var buckets = facets.get(facet).get(\"buckets\");\n\n            var boostValues = new ArrayList();\n            var boostBuckets = new ArrayList();\n            var boostValList = new ArrayList();\n            if (null != facetBoostValues) {\n               boostValues = facetBoostValues.get(facet.toString());\n               logger.info(\"BOOST: \"+boostValues);\n            }\n\n            var buryValues = new ArrayList();\n            var buryBuckets = new ArrayList();\n            var buryValList = new ArrayList();\n            if (null != facetBuryValues) {\n               buryValues = facetBuryValues.get(facet.toString());\n               logger.info(\"BURY: \"+buryValues);\n            }\n\n            var suppressValues = new ArrayList();\n            if (null != facetSuppressValues) {\n               suppressValues = facetSuppressValues.get(facet.toString());\n               logger.info(\"suppressValues: \"+suppressValues);\n            }\n\n            var normalBuckets = new ArrayList();\n            for (var i = 0; i < buckets.size(); i++) {\n               var bucket = buckets[i];\n               var val = bucket.get(\"val\");\n               if (null != boostValues && boostValues.indexOf(val) > -1) {\n                  boostBuckets.add(bucket);\n                  boostValList.add(val);\n               } else if (null != buryValues && buryValues.indexOf(val) > -1) {\n                  buryBuckets.add(bucket);\n                  buryValList.add(val);\n               } else if ((null == suppressValues) || (suppressValues.isEmpty()) || (suppressValues.indexOf(val) < 0)) {\n                  normalBuckets.add(bucket);\n               }\n            }\n\n            if (null != boostValues) {\n               var finalBoostedBuckets = new ArrayList();\n               for (var i = 0; i < boostValues.size(); i++) {\n                  var boostIndex = boostValList.indexOf(boostValues[i]);\n                  if (boostIndex > -1) {\n                     finalBoostedBuckets.add(boostBuckets.get(boostIndex));\n                  }\n               }\n               if (finalBoostedBuckets.size() > 0) {\n                  finalBoostedBuckets.addAll(normalBuckets);\n                  facets.get(facet).put(\"buckets\", finalBoostedBuckets);\n               }\n            }\n\n            if (null != buryValues) {\n               var finalBuriedBuckets = new ArrayList();\n               for (var i = 0; i < buryValues.size(); i++) {\n                  var buryIndex = buryValList.indexOf(buryValues[i]);\n                  if (buryIndex > -1) {\n                     finalBuriedBuckets.add(buryBuckets.get(buryIndex));\n                  }\n               }\n               if (finalBuriedBuckets.size() > 0) {\n                  normalBuckets.addAll(finalBuriedBuckets);\n                  facets.get(facet).put(\"buckets\", normalBuckets);\n               }\n            }\n\n         }\n      }\n   }\n}",
            "shareState": true,
            "type": "javascript-query",
            "skip": false,
            "label": "JSON_FACETS_RULES Format JSON Facets",
            "condition": "true;\n//JSON_FACETS_RULES",
            "secretSourceStageId": "2e1397a7-49bb-4f88-812a-a4818a2991a9"
          },
          {
            "id": "d0e969bf-85f0-49d3-8356-52f4d740210e",
            "script": "/*\n * This package is going to iterate through the JSON facets and create the facet_fields data\n */\n\nvar ArrayList = Java.type('java.util.ArrayList')\nvar UtilLib;\nvar rollupBucket = \"products\";\n\n/* \n * Updates the count for a matching value in facet_fields\n * \n * The facet_fields structure looks like:\n * \"facet_fields\": {\n *   \"item_Brand_ss\": [\n *     [\n *       \"ACME\", 20\n *     ]\n *   ],\n *   \"sku_primaryColorFamily_name_s\": [\n *     [\n *       \"Multi Color\", 8\n *     ],[\n *       \"Blue\", 7\n *     ],[\n *       \"Brown\" ,4\n *     ],[\n *       \"Green\",4\n *     ],[\n *       \"Black\",4\n *     ],[\n *       \"Tan\",1\n *     ]\n *   ]\n * },\n */\n\nfunction buildStdFacetsFromJSON(jsonFacets, facetFieldsObjects) {\n  for (var jFacet in jsonFacets){\n    var jfBuckets = jsonFacets[jFacet][\"buckets\"];\n\n    if (!jfBuckets || !UtilLib.getTypeOf(jfBuckets).equals('ArrayList')) {\n      return;\n    }\n\n    if (facetFieldsObjects[jFacet]) {\n      logger.info(\"DROPPING:\"+jFacet);\n      facetFieldsObjects.remove(jFacet);\n    }\n    var stdFacet = jFacet; //.toUpperCase();\n    \n    \n    var newFacetVersion = new ArrayList();\n\n    for (var j = 0; j < jfBuckets.length; j++) {\n      var bucketValue = jfBuckets[j].get('val');    \n      var bucketCount = jfBuckets[j].get(rollupBucket);\n\n      var facEntry = new ArrayList();\n      facEntry.add(bucketValue);\n\n      if(bucketCount){\n        facEntry.add(bucketCount);\n      }\n      else {\n        facEntry.add(0);\n      }\n      \n      newFacetVersion.add(facEntry);\n      //logger.info(\"ADDING facEntry:\"+facEntry);\n    }\n    //logger.info(\"ADDING:\"+stdFacet);\n    facetFieldsObjects[stdFacet] = newFacetVersion;\n\n   }\n};\n\n\n/*\n * Standard query stage entry point function\n */\nfunction(request, response, ctx) {\n\n  // Load in lucidworks.ps util library\n  if (!UtilLib) {\n    UtilLib = ctx.get(\"UtilLib\");\n  }\n\n  var docs = response.getInnerResponse().getDocuments();\n  if (!docs || docs.size() === 0) {\n    return;\n  }\n\n  var inner = response.getInnerResponse();\n  if (!UtilLib.getTypeOf(inner).equals('JSONResponse')) {\n    return;\n  }\n\n  // Retrieve the data table from the JSONResponse\n  var dict = inner.getUnderlyingObject();\n\n  // Top level solr facet structure returned to the caller\n  if (!dict.get('facet_counts')) {\n    return;\n  }\n\n  // Facet fields are what we return to the caller and contains all of the facets and facet value counts\n  var facetFieldsObjects = dict.get('facet_counts').get('facet_fields');\n  if (!facetFieldsObjects) {\n    return;\n  }\n\n  // JSON facets are the calculated rollupBucket (set by default to \"products\")  which combines values on productID but considers values on all SKUs\n  var jsonFacets = dict.get('facets');\n  if (!jsonFacets) {\n    return;\n  }\n\n  buildStdFacetsFromJSON(jsonFacets, facetFieldsObjects);\n\n}",
            "shareState": true,
            "type": "javascript-query",
            "skip": false,
            "label": "JSON_FACETS_RULES Create Full Standard Facets From JSON Facets",
            "condition": "request.hasParam('workbench');\n//JSON_FACETS_RULES\n/* This stage rebuilds the standard facets from JSON facets.  Typically this will only be necessary in the QWB, and should only be executed under that condition.\n*/",
            "secretSourceStageId": "d0e969bf-85f0-49d3-8356-52f4d740210e"
          },
          {
            "id": "8ee7ea23-a8ca-408b-be0f-326f57010282",
            "facetLabelParseDelimiter": "||",
            "type": "query-rules-augment-response",
            "skip": false,
            "secretSourceStageId": "8ee7ea23-a8ca-408b-be0f-326f57010282"
          },
          {
            "id": "de0c972a-7ea1-4379-b6c8-b17ca06ca86c",
            "script": "function(request,response,ctx){\n\n  if(response && response.initialEntity && typeof(response.initialEntity.appendObject) === 'function'){\n            response.initialEntity.appendObject(\"ctx\",ctx);\n        }\n  \n}",
            "shareState": true,
            "type": "javascript-query",
            "skip": false,
            "label": "SOLR_SPELL debug: append context to response",
            "secretSourceStageId": "de0c972a-7ea1-4379-b6c8-b17ca06ca86c"
          },
          {
            "id": "6e2e0a98-4225-4b94-8d33-440d95a125c1",
            "script": "function(request, response, ctx) {\n  var timedStage = 'Final Modify Response';\n  var time = new Date().getTime();\n  var inner = response.getInnerResponse();\n  var dict = inner.getUnderlyingObject(); \n  if (dict.get('fusion')) {\n    var ttl = time - ctx.get('pipelineStartTime');\n    dict.get('fusion').finalTime = ttl;\n    dict.get('fusion').finalTimer = ctx.get('timer') + '-- Timed Stage: ' + timedStage + ' at ' + (time - ctx.get('stageStartTime')) + ', and total time was ' + ttl + \"#DOCS:#\" + ctx.get('docs') + \"#HITS:#\" + ctx.get('hits') + \"#ZRDOCS:#\" + ctx.get('zrdocs') + \"#ZRHITS:#\" + ctx.get('zrhits') + \"#QRY:#\" + ctx.get('originalQueryTerms');\n    logger.info(\"HHHITS:#\"+ctx.get('hits')+\"#TTL:#\"+ttl+\"# QRY:#\"+ctx.get('originalQueryTerms'));\n  }\n}",
            "shareState": true,
            "type": "javascript-query",
            "skip": false,
            "label": "----- timer -----",
            "condition": "request.hasParam('timer') && request.getFirstParam('timer') === 'true'\n// For QA/Debug purpooses - don't go into production with this stage",
            "licensed": true,
            "secretSourceStageId": "6e2e0a98-4225-4b94-8d33-440d95a125c1"
          },
          {
            "id": "4d1baf9d-ba03-4504-ae2d-564ff145592f",
            "script": "function(request, response, ctx) {\n  var timedStage = 'Log Timer';\n  var inner = response.getInnerResponse();\n  var dict = inner.getUnderlyingObject(); \n  if (dict.get('fusion')) {\n    logger.info(\"===========\");\n    logger.info(\"===========\");\n    logger.info(\"TIMER_DATA:\"+dict.get('fusion').finalTimer);\n    logger.info(\"===========\");\n    logger.info(\"===========\");\n  }\n}",
            "shareState": true,
            "type": "javascript-query",
            "skip": false,
            "label": "----- write timer -----",
            "condition": "request.hasParam('timer') && request.getFirstParam('timer') === 'true'\n// For QA/Debug purpooses - don't go into production with this stage",
            "licensed": true,
            "secretSourceStageId": "4d1baf9d-ba03-4504-ae2d-564ff145592f"
          }
        ],
        "updates": [
          {
            "userId": "admin",
            "timestamp": "2021-04-14T15:28:02.305Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-04-14T12:38:00.601Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-04-14T12:36:32.525Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-04-14T12:27:28.695Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-04-14T12:25:53.648Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-04-14T12:25:42.959Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-04-14T12:25:06.932Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-04-14T12:24:58.908Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-04-14T12:23:02.983Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-04-14T12:22:54.378Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-04-14T12:22:48.664Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-04-14T12:22:44.471Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-04-14T12:21:35.213Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-04-14T12:20:44.709Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-04-14T12:20:31.735Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-04-14T12:20:25.935Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-04-14T12:20:16.352Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-04-14T12:16:20.934Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-04-14T12:16:15.269Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-04-14T12:16:11.225Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-04-14T12:15:39.131Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-04-14T12:15:14.056Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-04-14T12:13:59.642Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-04-14T12:13:53.783Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-04-14T12:13:41.528Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-04-14T12:12:59.082Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-04-14T12:12:53.407Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-04-14T12:12:21.627Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-04-14T12:12:17.235Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-04-14T12:10:59.822Z"
          }
        ],
        "properties": {
          "supportedMode": "all",
          "secretSourcePipelineId": "DC_Large"
        }
      },
      {
        "id": "DC_Large-question-answering",
        "stages": [
          {
            "id": "bf9cb0e8-7986-477e-9640-00087fb5038a",
            "rows": 10,
            "start": 0,
            "sortOrder": [],
            "queryFields": [],
            "returnFields": [
              "*",
              "compressed_document_vector_s",
              "document_clusters_is"
            ],
            "returnScore": true,
            "type": "search-fields",
            "skip": false,
            "secretSourceStageId": "bf9cb0e8-7986-477e-9640-00087fb5038a"
          },
          {
            "id": "e8872358-aec1-4b4e-8b1e-5fbd9b53d114",
            "rowsFromSolrToRerank": 500,
            "type": "fusion-reranking",
            "skip": false,
            "secretSourceStageId": "e8872358-aec1-4b4e-8b1e-5fbd9b53d114"
          },
          {
            "id": "d378e1d5-b088-41f2-ae55-a3f393e04d55",
            "serviceId": "ml-model-service",
            "modelId": "change-me",
            "failOnError": false,
            "inputScript": "/* \nModel input construction. \n*/\nvar modelInput = new java.util.HashMap()\nmodelInput.put(\"text\", request.getFirstParam(\"q\"))\nmodelInput.put(\"pipeline\", \"query\")\nmodelInput.put(\"compress\", \"false\")\nmodelInput.put(\"unidecode\", \"true\")\nmodelInput.put(\"lowercase\", \"false\")\n\nmodelInput",
            "outputScript": "/*\nDocument clusters Solr field name. If clustering is used then Filter Query is \nconstructed against this field to return all documents that have the same clusters as \nquery. This concept is similar to Inverted File Index (IVF).\n\nNOTE: Only models from the training module support clustering.\n*/\nvar documentClustersField = \"document_clusters_is\"\n\n/*\nVariable `numClusters` specifies how many top clusters should be used for each query.\nThe value should be less or equal to the value in the training configuration. \nBy default it's set to 0 which means that clustering isn't used. If you want to use \nclustering, value 10 is a good choice for most cases. \n*/\nvar numClusters = 0\n\n/*\nModel output parsing.\n*/\nvar queryVector = modelOutput.get(\"vector\").stream().mapToDouble(function(d){return d}).toArray()\ncontext.put(\"query_vector\", queryVector)\n\nif (numClusters > 0 && modelOutput.containsKey(\"clusters\")) {\n    clusters = Java.from(modelOutput.get(\"clusters\").subList(0, numClusters))\n    if (clusters.length > 1) {\n      fq = documentClustersField+\":(\"+clusters.join(' OR ')+\")\"\n    } else {\n      fq = documentClustersField+\":\"+clusters[0]\n    }\n    \n    request.putSingleParam(\"q\", \"*:*\")\n    request.addParam(\"fq\", fq)\n}",
            "type": "ml-query",
            "skip": false,
            "label": "Query Encoding",
            "secretSourceStageId": "d378e1d5-b088-41f2-ae55-a3f393e04d55",
            "requiredLicensedCapability": "fusion.ai"
          },
          {
            "id": "2fcdff2c-c9e2-419a-a03d-185fb0912de1",
            "inputParam": "q",
            "stopWords": "a,about,actual,actually,am,an,and,answer,any,anyone,anything,anyway,are,ask,asked,asking,at,away,based,basically,be,been,being,btw,by,can,consider,considered,could,did,do,does,doing,done,especially,essentially,etc,feel,find,for,found,from,generally,get,getting,give,given,giving,go,goes,gone,got,guess,had,happen,happened,happening,has,have,having,he,hello,help,hence,her,here,hers,hey,him,his,hope,hoped,however,i,I'd,i'm,'m,'ll,'d,ie,if,im,in,into,is,it,its,just,keeping,kept,knew,know,let,like,likely,list,look,looked,looking,makes,making,maybe,me,mention,mentioned,might,mind,much,my,need,needed,of,off,on,onto,otherwise,our,ours,out,perhaps,please,possible,possibly,pretty,probably,provide,provided,question,quite,rather,really,regard,regarding,relatively,said,saw,say,saying,search,searching,see,seeing,seem,seemed,seeming,seems,seen,select,she,should,show,simply,so,some,somehow,something,specifically,still,such,suggest,suggested,sure,take,taken,taking,tell,thank,thanks,that,the,their,them,then,there,thereby,therefore,therein,these,they,thing,think,thinking,this,those,though,thought,through,throughout,thru,thus,to,too,took,totally,toward,towards,tried,try,trying,up,upon,us,use,used,using,usually,very,via,want,wanted,was,we,went,were,what,will,wish,wished,with,within,wonder,wondering,would,yet,you,your,yours",
            "type": "stop-filter-query-stage",
            "skip": false,
            "secretSourceStageId": "2fcdff2c-c9e2-419a-a03d-185fb0912de1"
          },
          {
            "id": "02f62658-1dce-41bb-acbc-9b6e1d52000f",
            "inputParam": "q",
            "type": "query-escaping-query-stage",
            "skip": false,
            "secretSourceStageId": "02f62658-1dce-41bb-acbc-9b6e1d52000f"
          },
          {
            "id": "75e0abef-b372-4cff-b5e7-a4e5235015d9",
            "httpMethod": "POST",
            "allowFederatedSearch": false,
            "preferredReplicaType": "pull",
            "type": "solr-query",
            "skip": false,
            "responseSignalsEnabled": true,
            "secretSourceStageId": "75e0abef-b372-4cff-b5e7-a4e5235015d9"
          },
          {
            "id": "49d15d28-a734-46ea-a2ef-668bd64959c8",
            "queryVectorContextKey": "query_vector",
            "documentVectorField": "compressed_document_vector_s",
            "keepDocumentVectorField": false,
            "distanceType": "cosine_similarity",
            "documentDistanceResultField": "vectors_distance",
            "failOnError": false,
            "type": "per-result-vectors-distance",
            "skip": false,
            "secretSourceStageId": "49d15d28-a734-46ea-a2ef-668bd64959c8",
            "requiredLicensedCapability": "fusion.ai.qa"
          },
          {
            "id": "e00af34b-8ffc-433a-988f-820a5b67158b",
            "expression": "0.3 * score / max_score + 0.7 * vectors_distance",
            "resultFieldName": "ensemble_score",
            "type": "response-math-expression",
            "skip": false,
            "secretSourceStageId": "e00af34b-8ffc-433a-988f-820a5b67158b",
            "requiredLicensedCapability": "fusion.ai.qa"
          },
          {
            "id": "1fe1edb0-63ab-41d2-8e50-4720573b6085",
            "sortField": "ensemble_score",
            "sortOrder": "desc",
            "failOnError": false,
            "type": "result-doc-field-sorting",
            "skip": false,
            "secretSourceStageId": "1fe1edb0-63ab-41d2-8e50-4720573b6085"
          }
        ],
        "properties": {
          "secretSourcePipelineId": "DC_Large-question-answering"
        }
      },
      {
        "id": "DC_Large-question-answering-dual-fields",
        "stages": [
          {
            "id": "4d749761-ee4b-4506-90fd-fc1722300c1c",
            "rows": 10,
            "start": 0,
            "sortOrder": [],
            "queryFields": [],
            "returnFields": [
              "*",
              "compressed_document_vector_s",
              "document_clusters_ss"
            ],
            "returnScore": true,
            "type": "search-fields",
            "skip": false,
            "secretSourceStageId": "4d749761-ee4b-4506-90fd-fc1722300c1c"
          },
          {
            "id": "ebf9b622-f8f6-4937-83cb-0b981c13ae00",
            "rowsFromSolrToRerank": 500,
            "type": "fusion-reranking",
            "skip": false,
            "secretSourceStageId": "ebf9b622-f8f6-4937-83cb-0b981c13ae00"
          },
          {
            "id": "dd6b808f-2b9a-44f3-ab8a-893bca46b9c0",
            "serviceId": "ml-model-service",
            "modelId": "change-me",
            "failOnError": false,
            "inputScript": "/* \nModel input construction. \n*/\nvar modelInput = new java.util.HashMap()\nmodelInput.put(\"text\", request.getFirstParam(\"q\"))\nmodelInput.put(\"pipeline\", \"query\")\nmodelInput.put(\"compress\", \"false\")\nmodelInput.put(\"unidecode\", \"true\")\nmodelInput.put(\"lowercase\", \"false\")\n\nmodelInput",
            "outputScript": "/*\nDocument clusters Solr field name. If clustering is used then Filter Query is \nconstructed against this field to return all documents that have the same clusters as \nquery. This concept is similar to Inverted File Index (IVF).\n\nNOTE: Only models from the training module support clustering.\n*/\nvar documentClustersField = \"question_clusters_is\"\n\n/*\nVariable `numClusters` specifies how many top clusters should be used for each query.\nThe value should be less or equal to the value in the training configuration. \nBy default it's set to 0 which means that clustering isn't used. If you want to use \nclustering, value 10 is a good choice for most cases. \n*/\nvar numClusters = 0\n\n/*\nModel output parsing.\n*/\nvar queryVector = modelOutput.get(\"vector\").stream().mapToDouble(function(d){return d}).toArray()\ncontext.put(\"query_vector\", queryVector)\n\nif (numClusters > 0 && modelOutput.containsKey(\"clusters\")) {\n    clusters = Java.from(modelOutput.get(\"clusters\").subList(0, numClusters))\n    if (clusters.length > 1) {\n      fq = documentClustersField+\":(\"+clusters.join(' OR ')+\")\"\n    } else {\n      fq = documentClustersField+\":\"+clusters[0]\n    }\n    \n    request.putSingleParam(\"q\", \"*:*\")\n    request.addParam(\"fq\", fq)\n}",
            "type": "ml-query",
            "skip": false,
            "label": "Query Encoding",
            "secretSourceStageId": "dd6b808f-2b9a-44f3-ab8a-893bca46b9c0",
            "requiredLicensedCapability": "fusion.ai"
          },
          {
            "id": "7d63566e-c623-48c7-b98d-7dea02601420",
            "inputParam": "q",
            "stopWords": "a,about,actual,actually,am,an,and,answer,any,anyone,anything,anyway,are,ask,asked,asking,at,away,based,basically,be,been,being,btw,by,can,consider,considered,could,did,do,does,doing,done,especially,essentially,etc,feel,find,for,found,from,generally,get,getting,give,given,giving,go,goes,gone,got,guess,had,happen,happened,happening,has,have,having,he,hello,help,hence,her,here,hers,hey,him,his,hope,hoped,however,i,I'd,i'm,'m,'ll,'d,ie,if,im,in,into,is,it,its,just,keeping,kept,knew,know,let,like,likely,list,look,looked,looking,makes,making,maybe,me,mention,mentioned,might,mind,much,my,need,needed,of,off,on,onto,otherwise,our,ours,out,perhaps,please,possible,possibly,pretty,probably,provide,provided,question,quite,rather,really,regard,regarding,relatively,said,saw,say,saying,search,searching,see,seeing,seem,seemed,seeming,seems,seen,select,she,should,show,simply,so,some,somehow,something,specifically,still,such,suggest,suggested,sure,take,taken,taking,tell,thank,thanks,that,the,their,them,then,there,thereby,therefore,therein,these,they,thing,think,thinking,this,those,though,thought,through,throughout,thru,thus,to,too,took,totally,toward,towards,tried,try,trying,up,upon,us,use,used,using,usually,very,via,want,wanted,was,we,went,were,what,will,wish,wished,with,within,wonder,wondering,would,yet,you,your,yours",
            "type": "stop-filter-query-stage",
            "skip": false,
            "secretSourceStageId": "7d63566e-c623-48c7-b98d-7dea02601420"
          },
          {
            "id": "b17ba5fc-a420-487b-abe0-4ed67b9ff234",
            "inputParam": "q",
            "type": "query-escaping-query-stage",
            "skip": false,
            "secretSourceStageId": "b17ba5fc-a420-487b-abe0-4ed67b9ff234"
          },
          {
            "id": "945c2780-ce2b-461b-9548-b40f1bdb75d3",
            "httpMethod": "POST",
            "allowFederatedSearch": false,
            "preferredReplicaType": "pull",
            "type": "solr-query",
            "skip": false,
            "responseSignalsEnabled": true,
            "secretSourceStageId": "945c2780-ce2b-461b-9548-b40f1bdb75d3"
          },
          {
            "id": "adb9dc5a-40c4-4c90-9857-e5ee17ca50d3",
            "queryVectorContextKey": "query_vector",
            "documentVectorField": "compressed_question_vector_s",
            "keepDocumentVectorField": false,
            "distanceType": "cosine_similarity",
            "documentDistanceResultField": "qq_distance",
            "failOnError": false,
            "type": "per-result-vectors-distance",
            "skip": false,
            "label": "QQ Vectors Distance",
            "secretSourceStageId": "adb9dc5a-40c4-4c90-9857-e5ee17ca50d3",
            "requiredLicensedCapability": "fusion.ai.qa"
          },
          {
            "id": "09784679-f9bb-4a0c-b07f-10a194132335",
            "queryVectorContextKey": "query_vector",
            "documentVectorField": "compressed_answer_vector_s",
            "keepDocumentVectorField": false,
            "distanceType": "cosine_similarity",
            "documentDistanceResultField": "qa_distance",
            "failOnError": false,
            "type": "per-result-vectors-distance",
            "skip": false,
            "label": "QA Vectors Distance",
            "secretSourceStageId": "09784679-f9bb-4a0c-b07f-10a194132335",
            "requiredLicensedCapability": "fusion.ai.qa"
          },
          {
            "id": "363f2a2d-ad53-48bd-91ce-7717fc9bf033",
            "expression": "0.2 * score / max_score + 0.4 * qq_distance + 0.4 * qa_distance",
            "resultFieldName": "ensemble_score",
            "type": "response-math-expression",
            "skip": false,
            "secretSourceStageId": "363f2a2d-ad53-48bd-91ce-7717fc9bf033",
            "requiredLicensedCapability": "fusion.ai.qa"
          },
          {
            "id": "d48abd49-72a6-4aba-a36a-909bc7746944",
            "sortField": "ensemble_score",
            "sortOrder": "desc",
            "failOnError": false,
            "type": "result-doc-field-sorting",
            "skip": false,
            "secretSourceStageId": "d48abd49-72a6-4aba-a36a-909bc7746944"
          }
        ],
        "properties": {
          "secretSourcePipelineId": "DC_Large-question-answering-dual-fields"
        }
      },
      {
        "id": "DC_Large_TYPEAHEAD_QPL_v4",
        "stages": [
          {
            "id": "e76502fd-1395-43b0-9e50-d326263e366f",
            "key": "subquery-results",
            "collection": "DC_Large",
            "handler": "select",
            "method": "POST",
            "parentParams": [],
            "rollupKeys": [],
            "params": [
              {
                "key": "q",
                "value": "<request.params.q>"
              }
            ],
            "headers": [],
            "asyncConfig": {
              "enabled": true,
              "asyncId": "catalog_async_id"
            },
            "type": "sub-query",
            "skip": false,
            "label": "Catalog Search",
            "condition": "request.hasParam(\"catalogSearch\") && request.getFirstParam(\"catalogSearch\").equals(\"true\");",
            "secretSourceStageId": "e76502fd-1395-43b0-9e50-d326263e366f"
          },
          {
            "id": "a9917311-79e9-483d-b1d1-5dfea3a8a165",
            "script": "function (request, response, ctx) {\n \n  var q = request.getFirstParam('q')\n  request.putSingleParam('q', \"ta_type:entity &&\" + q)\n}",
            "shareState": true,
            "type": "javascript-query",
            "skip": false,
            "label": "Only Return Entity Documents",
            "condition": "request.hasParam(\"entityOnly\") && request.getFirstParam(\"entityOnly\").equals(\"true\");\n// This stage is used to the make the results only entity documents. The DC_Large_TYPEAHEAD_entity_QPF_v4 will send a parameter entityOnly=true",
            "secretSourceStageId": "a9917311-79e9-483d-b1d1-5dfea3a8a165"
          },
          {
            "id": "7a95324c-d6d0-4b13-8e6a-3cd329225dca",
            "script": "function (request, response, ctx) {\n \n  var q = request.getFirstParam('q')\n  request.putSingleParam('q', \"ta_type:history && \" + q)\n}",
            "shareState": true,
            "type": "javascript-query",
            "skip": false,
            "label": "Only Return History Documents",
            "condition": "request.hasParam(\"historyOnly\") && request.getFirstParam(\"historyOnly\").equals(\"true\");\n// This stage is used to the make the results only history documents. The DC_Large_TYPEAHEAD_history_QPF_v4 will send a parameter historyOnly=true",
            "secretSourceStageId": "7a95324c-d6d0-4b13-8e6a-3cd329225dca"
          },
          {
            "id": "9615c4bf-bd84-4c61-9ff3-2c07c73dc582",
            "numRecommendations": 10,
            "numSignals": 100,
            "aggrType": "click@doc_id,filters,query",
            "boostId": "id",
            "boostingMethod": "query-param",
            "boostingParam": "boost",
            "queryParams": [
              {
                "key": "qf",
                "value": "query_t"
              },
              {
                "key": "pf",
                "value": "query_t^50"
              },
              {
                "key": "pf",
                "value": "query_t~3^20"
              },
              {
                "key": "pf2",
                "value": "query_t^20"
              },
              {
                "key": "pf2",
                "value": "query_t~3^10"
              },
              {
                "key": "pf3",
                "value": "query_t^10"
              },
              {
                "key": "pf3",
                "value": "query_t~3^5"
              },
              {
                "key": "boost",
                "value": "map(query({!field f=query_s v=$q}),0,0,1,20)"
              },
              {
                "key": "mm",
                "value": "50%"
              },
              {
                "key": "defType",
                "value": "edismax"
              },
              {
                "key": "sort",
                "value": "score desc, weight_d desc"
              },
              {
                "key": "fq",
                "value": "weight_d:[* TO *]"
              }
            ],
            "rollupField": "doc_id_s",
            "rollupWeightField": "weight_d",
            "weightExpression": "math:log(weight_d + 1) + 10 * math:log(score+1)",
            "rollupWeightStrategy": "max",
            "queryParamToBoost": "q",
            "includeEnrichedQuery": false,
            "type": "recommendation",
            "skip": false,
            "secretSourceStageId": "9615c4bf-bd84-4c61-9ff3-2c07c73dc582"
          },
          {
            "id": "3e16eb81-b5e6-47fd-b8c4-a1ff94ed47d4",
            "fieldFacets": [
              {
                "field": "ta_type",
                "limit": 100,
                "minCount": 1,
                "missing": false
              },
              {
                "field": "type",
                "limit": 100,
                "minCount": 1,
                "missing": false
              }
            ],
            "rangeFacets": [],
            "type": "facet",
            "skip": false,
            "secretSourceStageId": "3e16eb81-b5e6-47fd-b8c4-a1ff94ed47d4",
            "properties": {
              "autoCreated": true
            }
          },
          {
            "id": "5f4e1208-afe4-4fc7-941e-15872d5642f3",
            "params": [
              {
                "key": "defType",
                "value": "edismax",
                "policy": "append"
              }
            ],
            "type": "set-params",
            "skip": false,
            "secretSourceStageId": "5f4e1208-afe4-4fc7-941e-15872d5642f3"
          },
          {
            "id": "14fb0ccb-943e-43c2-a5b2-16889cadb2eb",
            "params": [
              {
                "key": "hl",
                "value": "true",
                "policy": "append"
              },
              {
                "key": "hl.fl",
                "value": "value_t",
                "policy": "append"
              }
            ],
            "type": "set-params",
            "skip": true,
            "label": "Highlighting",
            "secretSourceStageId": "14fb0ccb-943e-43c2-a5b2-16889cadb2eb"
          },
          {
            "id": "71e7f340-2dc3-41c8-8330-d2991d87e363",
            "rows": 10,
            "start": 0,
            "sortOrder": [
              {
                "type": "field",
                "order": "desc",
                "value": "score"
              }
            ],
            "queryFields": [
              {
                "field": "value_t"
              },
              {
                "field": "value_s"
              },
              {
                "field": "value_phonetic_en"
              },
              {
                "field": "value_edge"
              },
              {
                "field": "value_en"
              }
            ],
            "returnFields": [
              "value_s",
              "type",
              "ta_type",
              "document_url",
              "image_url",
              "popularity_d",
              "signal_count",
              "indexed_date"
            ],
            "returnScore": true,
            "type": "search-fields",
            "skip": false,
            "secretSourceStageId": "71e7f340-2dc3-41c8-8330-d2991d87e363"
          },
          {
            "id": "3ea61720-eb40-4bfc-be00-e4f2db6868fd",
            "httpMethod": "POST",
            "allowFederatedSearch": false,
            "preferredReplicaType": "pull",
            "type": "solr-query",
            "skip": false,
            "responseSignalsEnabled": true,
            "secretSourceStageId": "3ea61720-eb40-4bfc-be00-e4f2db6868fd"
          },
          {
            "id": "7a874040-2243-4cb3-afb4-ab5a44eb9fa5",
            "asyncStageIds": [
              "catalog_async_id"
            ],
            "timeoutMs": 1000,
            "failFast": false,
            "strictAsyncIds": true,
            "type": "join",
            "skip": false,
            "label": "Merge Async Catalog Results",
            "condition": "request.hasParam(\"catalogSearch\") && request.getFirstParam(\"catalogSearch\").equals(\"true\");",
            "secretSourceStageId": "7a874040-2243-4cb3-afb4-ab5a44eb9fa5"
          },
          {
            "id": "294f93fa-8a86-4cf6-9ef8-87ad54d1c1d6",
            "script": "function(request, response, ctx) {\n  var timedStage = 'Final Modify Response';\n  var time = new Date().getTime();\n  var inner = response.getInnerResponse();\n  var dict = inner.getUnderlyingObject(); \n    \n  var subqueryReults = ctx.getProperty('subquery-results').response;\n  if(subqueryReults != null && subqueryReults.numFound > 0){\n    dict.put(\"catalog_documents\", subqueryReults.docs);\n  }\n\n}",
            "shareState": true,
            "type": "javascript-query",
            "skip": false,
            "label": "Move Subquery Result to Response",
            "condition": "request.hasParam(\"catalogSearch\") && request.getFirstParam(\"catalogSearch\").equals(\"true\");",
            "secretSourceStageId": "294f93fa-8a86-4cf6-9ef8-87ad54d1c1d6"
          },
          {
            "id": "6713beba-089c-47a8-a8c1-c3f0715eafc8",
            "script": "function(request, response, ctx){\n  // logger.info('\\n\\n***REQUEST INFO = ' + response.getInnerResponse().toString());\n\n  // var q = request.getFirstParam('q');\n  // qmsg = [];\n  // qmsg.push(q);\n  // response.initialEntity.appendStringList('myqis',qmsg);\n\n  // var fq = request.getParam(\"fq\");\n  // fqmsg = [];\n  // for each (var item in fq) {\n  //   fqmsg.push(item);\n  // }\n  // response.initialEntity.appendStringList('myfqs',fqmsg);\n  \n  var qtime = response.getInnerResponse().getQTime().orElse(\"ERROR\").toString();\n  respMsg1 = [];\n  respMsg1.push(qtime);\n  response.initialEntity.appendStringList('qtime',respMsg1);\n\n  var value = response.getInnerResponse().getResponseHeaderParams().toString();\n  // var params = value.get(\"responseHeader\").get(\"params\");\n  // logger.info('\\n\\n***REQUEST INFO = ' + params);\n\n  respMsg2 = [];\n  respMsg2.push(value);\n    response.initialEntity.appendStringList('params',respMsg2);\n}",
            "shareState": true,
            "type": "javascript-query",
            "skip": false,
            "label": "Add response details to response messages",
            "secretSourceStageId": "6713beba-089c-47a8-a8c1-c3f0715eafc8"
          }
        ],
        "updates": [
          {
            "userId": "admin",
            "timestamp": "2021-05-10T17:27:42.531Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-05-10T17:27:34.124Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-05-10T17:26:53.446Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-05-06T17:08:57.994Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-05-06T17:08:52.043Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-05-05T22:47:44.830Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-05-05T22:47:34.015Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-05-05T22:18:38.653Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-05-05T21:46:51.095Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-05-05T20:19:59.745Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-05-05T19:56:29.128Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-05-05T19:56:15.283Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-05-05T19:56:06.127Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-05-05T19:56:03.449Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-05-03T21:54:35.635Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-05-03T20:52:59.258Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-05-03T20:52:55.979Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-05-03T20:52:44.867Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-05-03T20:52:43.402Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-05-03T20:52:39.733Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-05-03T20:52:04.586Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-04-28T22:12:43.669Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-04-28T22:12:39.726Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-04-28T22:09:11.600Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-04-28T21:34:39.530Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-04-28T20:53:52.886Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-04-28T20:22:53.297Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-04-27T21:54:57.197Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-04-27T21:54:43.120Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-04-27T21:54:07.457Z"
          }
        ],
        "properties": {
          "supportedMode": "all",
          "secretSourcePipelineId": "DC_Large_TYPEAHEAD_QPL_v4"
        }
      },
      {
        "id": "JSON_Facets_Rules_DC",
        "stages": [
          {
            "id": "54c1941f-204c-47dd-9204-d1b6523fdd07",
            "ref": "urn:x-fusion:blob:lib/query/UtilLib.js",
            "shareState": true,
            "type": "managed-js-query",
            "skip": false,
            "label": "* Load UtilLib Managed JS :: All",
            "condition": "//JSON_FACETS_RULES\ntrue",
            "licensed": true,
            "secretSourceStageId": "54c1941f-204c-47dd-9204-d1b6523fdd07"
          },
          {
            "id": "38a57201-9950-4d19-89fe-d10655d07563",
            "params": [
              {
                "key": "fq",
                "value": "{!collapse field=groupId_s tag=mainQuery}",
                "policy": "append"
              }
            ],
            "type": "set-params",
            "skip": false,
            "label": "** Collapse ",
            "condition": "//JSON_FACETS_RULES\ntrue",
            "secretSourceStageId": "38a57201-9950-4d19-89fe-d10655d07563"
          },
          {
            "id": "f7cfc013-e62e-45ef-a2e1-975a53178d53",
            "paramToTag": "q",
            "spell_corrections_enabled": true,
            "phrase_boosting_enabled": true,
            "tail_rewrites_enabled": true,
            "phraseBoost": 2.0,
            "phraseSlop": 10,
            "synonymExpansionBoost": 2.0,
            "synonym_expansion_enabled": true,
            "remove_words_enabled": true,
            "overlaps": "longest_dominant_right",
            "params": [],
            "maxWaitMs": 500,
            "type": "text-tagger",
            "skip": false,
            "secretSourceStageId": "f7cfc013-e62e-45ef-a2e1-975a53178d53"
          },
          {
            "id": "39178612-92f2-4532-9ef8-1a1ab2e11cdf",
            "numRecommendations": 10,
            "numSignals": 100,
            "aggrType": "click@doc_id,filters,query",
            "boostId": "id",
            "boostingMethod": "query-param",
            "boostingParam": "boost",
            "queryParams": [
              {
                "key": "qf",
                "value": "query_t"
              },
              {
                "key": "pf",
                "value": "query_t^50"
              },
              {
                "key": "pf",
                "value": "query_t~3^20"
              },
              {
                "key": "pf2",
                "value": "query_t^20"
              },
              {
                "key": "pf2",
                "value": "query_t~3^10"
              },
              {
                "key": "pf3",
                "value": "query_t^10"
              },
              {
                "key": "pf3",
                "value": "query_t~3^5"
              },
              {
                "key": "boost",
                "value": "map(query({!field f=query_s v=$q}),0,0,1,20)"
              },
              {
                "key": "mm",
                "value": "50%"
              },
              {
                "key": "defType",
                "value": "edismax"
              },
              {
                "key": "sort",
                "value": "score desc, weight_d desc"
              },
              {
                "key": "fq",
                "value": "weight_d:[* TO *]"
              }
            ],
            "rollupField": "doc_id_s",
            "rollupWeightField": "weight_d",
            "weightExpression": "math:log(weight_d + 1) + 10 * math:log(score+1)",
            "rollupWeightStrategy": "max",
            "queryParamToBoost": "q",
            "includeEnrichedQuery": false,
            "type": "recommendation",
            "skip": false,
            "secretSourceStageId": "39178612-92f2-4532-9ef8-1a1ab2e11cdf"
          },
          {
            "id": "ec007fda-7333-4c1c-8d13-d6265647c248",
            "rows": 10,
            "start": 0,
            "sortOrder": [],
            "queryFields": [],
            "returnFields": [],
            "returnScore": false,
            "type": "search-fields",
            "skip": false,
            "secretSourceStageId": "ec007fda-7333-4c1c-8d13-d6265647c248"
          },
          {
            "id": "d5f760f3-6d80-4634-b6db-a15e10648b99",
            "fieldFacets": [],
            "rangeFacets": [],
            "type": "facet",
            "skip": false,
            "secretSourceStageId": "d5f760f3-6d80-4634-b6db-a15e10648b99",
            "properties": {
              "autoCreated": true
            }
          },
          {
            "id": "7916454f-4ae1-43a4-aae7-1722772f5b5c",
            "useOriginalQueryIfNoRulesMatch": true,
            "matchPartialFilterQueries": true,
            "handler": "select",
            "method": "POST",
            "ruleLimit": "100",
            "params": [],
            "hierarchicalFilter": [],
            "headers": [],
            "maxWaitMs": 500,
            "type": "query-rules",
            "skip": false,
            "secretSourceStageId": "7916454f-4ae1-43a4-aae7-1722772f5b5c"
          },
          {
            "id": "b2606857-929f-4e6a-838a-a8006c6c822c",
            "script": "function cleanName(name) { \n  return name.replace(/{.*}/,''); //Drop local params, uppercase\n}\n\nfunction (request, response, ctx) {\n  //with (DSL) {\n  \n  var allParams = request.getParams();\n  var paramkeys = request.getParams().keySet();\n\n  var collapseFilter = 'mainQuery';     //this is the tag referenced in the collapse parameter used to group products\n\n  var productIdFld = 'groupId_s';       //Field containing the parent id (usually the product ID)\n  var rollupBucket = \"products\";        //Arbitrary name for the rolled up counts\n  var rollupParam = '\"' + rollupBucket + '\": \"unique(' + productIdFld + ')\"';   //JSON element to retrieve product-level rollup counts\n\n  var countSortParam = '{\"' + rollupBucket + '\":desc}';                         //JSON element to specify Count sort (vs Index)\n  var indexSortParam = '\"index\"';                                               //Index sort just needs to be wrapped in quotes\n  \n  var rules = ctx.getProperty(\"lw.rules\");\n  var stdFacetsToDrop = [];\n\n  if (null != rules && rules.length > 0) {\n    logger.info(\"***Rules Found***\");\n\n    for (var i=0; i < rules.length; i++) {\n      var rule = rules[i];\n      logger.info(\"***Rule #\"+i);\n      //logger.info(rule);\n      //logger.info(\"RULE TYPE:\"+rule[\"type\"]);\n\n      if (null != rule && rule[\"type\"].equals(\"set_facets\")) {\n        logger.info(\"***Facet Rule***\");\n        var facets = rule.getFacetData();\n        if (null != facets && facets.length > 0) {\n          var HashMap = Java.type(\"java.util.HashMap\");\n          var multivalueMap = ctx.getProperty(\"multivalueMap.json.facet\");\n          if (multivalueMap == null) {\n            multivalueMap = new HashMap;\n          }\n          var boostValuesMap = new HashMap;\n          var buryValuesMap = new HashMap;\n          var suppressValuesMap = new HashMap;\n\n          for (var j = 0; j < facets.length; j++) {\n            var facet = facets[j];\n\n            //get details of facet from rule \n            var fieldName = facet.getFieldName();\n            var minCount = facet.getMinCount();\n\n            var sort = facet.getSort();\n            var sortParam = (sort == \"count\") ? countSortParam : indexSortParam;\n\n            var selectType = facet.getSelectType();\n            //single select should only exclude the collapseFilter tag; multiselect facets must also exclude filters tagged with their own names\n            var excludeTags = (selectType == 'multi') ? fieldName + ','+ collapseFilter : collapseFilter;\n\n\n            logger.info(\"===============================\");\n            logger.info(\"facet: \" + fieldName);\n            logger.info(\"sort: \" + sort);\n            logger.info(\"minCount: \" + minCount);\n            logger.info(\"selectType: \" + selectType);            \n            logger.info(\"===============================\");     \n\n            var jf = '{' + rollupParam + ',   \"' + fieldName + '\": { \"type\": \"terms\",     \"field\": \"' + fieldName + '\", \"sort\": ' + sortParam + ', \"limit\":-1,  \"mincount\": ' + minCount +',  \"facet\": { ' + rollupParam + '} , \"domain\":{\"excludeTags\":\"' + excludeTags + '\"}  }}';\n            request.addParam('json.facet', jf);\n            logger.info(JSON.stringify(jf));\n            \n            var boostValues = facet.getBoostValues();\n            if (null != boostValues && boostValues.length > 0) {\n              boostValuesMap.put(fieldName, facet.getBoostValues());\n            }\n            var buryValues = facet.getBuryValues();\n            if (null != buryValues && buryValues.length > 0) {\n              buryValuesMap.put(fieldName, facet.getBuryValues());\n            }\n            var suppressValues = facet.getSuppressValues();\n            if (null != suppressValues && suppressValues.length > 0) {\n              suppressValuesMap.put(fieldName, facet.getSuppressValues());\n            }\n\n            //Add field name to list of facet params to drop\n            stdFacetsToDrop.push(fieldName);\n\n          }\n          //TODO: This solution assumes a single active facet rule at a given time; if multiple facet rules fire, only the boosts/buries/suppresses for last facet rule will stored\n          ctx.setProperty(\"multivalueMap.json.facet\", multivalueMap);\n          ctx.setProperty(\"boostValues.json.facet\", boostValuesMap);\n          ctx.setProperty(\"buryValues.json.facet\", buryValuesMap);\n          ctx.setProperty(\"suppressValues.json.facet\", suppressValuesMap);\n\n          //Drop traditional facets (they'll be added back after the query for QWB)\n          var facetFields = request.getParam('facet.field');\n          //logger.info('stdFacetsToDrop:'+stdFacetsToDrop);\n          //logger.info(\"BEFORE:\"+facetFields);\n          var newFacetFIelds = [];\n          \n          for each (var ff in facetFields){\n            ff = cleanName(ff);\n            logger.info(\"ff:\"+ff);\n            if (stdFacetsToDrop.indexOf(ff) < 0) {\n              newFacetFIelds.push(ff);\n            }\n            else {\n              //find all the additional params for this facet and delete them\n              var facetPattern = new RegExp('^f[.]'+ff+'.*');  \n              for each(var param in paramkeys) {\n                if (facetPattern.test(param)) {\n                  request.removeParam(param);\n                  break;\n                }\n              }\n            }\n          }\n          //logger.info(\"AFTER:\"+newFacetFIelds);\n\n        }\n      }\n    }\n  }\n  //}\n}",
            "shareState": true,
            "type": "javascript-query",
            "skip": false,
            "label": "**JSON Facets From Rules",
            "condition": "//JSON_FACETS_RULES\ntrue",
            "secretSourceStageId": "b2606857-929f-4e6a-838a-a8006c6c822c"
          },
          {
            "id": "ae17d969-3610-4845-a500-2f5a8db074d2",
            "httpMethod": "POST",
            "allowFederatedSearch": false,
            "preferredReplicaType": "pull",
            "type": "solr-query",
            "skip": false,
            "responseSignalsEnabled": true,
            "secretSourceStageId": "ae17d969-3610-4845-a500-2f5a8db074d2"
          },
          {
            "id": "9bc26bd4-8f98-4b3a-a382-bd69d3875fc5",
            "script": "function (request, response, ctx, collection, solrServer, solrServerFactory) {\n    //Type imports\n    var String = Java.type(\"java.lang.String\");\n    var ArrayList = Java.type(\"java.util.ArrayList\");\n    var HashMap = Java.type(\"java.util.LinkedHashMap\");\n    var HashSet = Java.type(\"java.util.LinkedHashSet\");\n    var TreeSet = Java.type(\"java.util.TreeSet\");\n    var Integer = Java.type(\"java.lang.Integer\");\n\n    //get map out of response\n    var map = response.getInnerResponse().getUnderlyingObject();\n\n    var facets = map.get(\"facets\");\n\n    var facetBoostValues = ctx.getProperty(\"boostValues.json.facet\");\n    var facetBuryValues = ctx.getProperty(\"buryValues.json.facet\");\n    var facetSuppressValues = ctx.getProperty(\"suppressValues.json.facet\");\n    var facetMultiValue = ctx.getProperty(\"multivalueMap.json.facet\");\n    \n    if (facets != null) {\n       //Process JSON facets\n       if (facets.get(\"count\") != null) facets.remove(\"count\");\n       if (facets.get(\"products\") != null) facets.remove(\"products\");\n\n      // Set multivalue and number to show as defaults\n      var facetKeySet = facets.keySet();\n      if (facetKeySet != null) {\n\n         var facetIterator = facetKeySet.iterator();\n         while (facetIterator.hasNext()) {\n            var facet = facetIterator.next();\n\n            logger.info(\"==================\");\n            logger.info(\"Processing facet: \"+facet.toString());\n\n            facets.get(facet).put(\"multivalue\", true);\n            var multiSelect = facetMultiValue.get(facet.toString());\n            if (null != multiSelect && multiSelect == 'single') {\n               facets.get(facet).put(\"multivalue\", false);\n               logger.info(\"multi: False\");\n            }\n\n            var buckets = facets.get(facet).get(\"buckets\");\n\n            var boostValues = new ArrayList();\n            var boostBuckets = new ArrayList();\n            var boostValList = new ArrayList();\n            if (null != facetBoostValues) {\n               boostValues = facetBoostValues.get(facet.toString());\n               logger.info(\"BOOST: \"+boostValues);\n            }\n\n            var buryValues = new ArrayList();\n            var buryBuckets = new ArrayList();\n            var buryValList = new ArrayList();\n            if (null != facetBuryValues) {\n               buryValues = facetBuryValues.get(facet.toString());\n               logger.info(\"BURY: \"+buryValues);\n            }\n\n            var suppressValues = new ArrayList();\n            if (null != facetSuppressValues) {\n               suppressValues = facetSuppressValues.get(facet.toString());\n               logger.info(\"suppressValues: \"+suppressValues);\n            }\n\n            var normalBuckets = new ArrayList();\n            for (var i = 0; i < buckets.size(); i++) {\n               var bucket = buckets[i];\n               var val = bucket.get(\"val\");\n               if (null != boostValues && boostValues.indexOf(val) > -1) {\n                  boostBuckets.add(bucket);\n                  boostValList.add(val);\n               } else if (null != buryValues && buryValues.indexOf(val) > -1) {\n                  buryBuckets.add(bucket);\n                  buryValList.add(val);\n               } else if ((null == suppressValues) || (suppressValues.isEmpty()) || (suppressValues.indexOf(val) < 0)) {\n                  normalBuckets.add(bucket);\n               }\n            }\n\n            if (null != boostValues) {\n               var finalBoostedBuckets = new ArrayList();\n               for (var i = 0; i < boostValues.size(); i++) {\n                  var boostIndex = boostValList.indexOf(boostValues[i]);\n                  if (boostIndex > -1) {\n                     finalBoostedBuckets.add(boostBuckets.get(boostIndex));\n                  }\n               }\n               if (finalBoostedBuckets.size() > 0) {\n                  finalBoostedBuckets.addAll(normalBuckets);\n                  facets.get(facet).put(\"buckets\", finalBoostedBuckets);\n               }\n            }\n\n            if (null != buryValues) {\n               var finalBuriedBuckets = new ArrayList();\n               for (var i = 0; i < buryValues.size(); i++) {\n                  var buryIndex = buryValList.indexOf(buryValues[i]);\n                  if (buryIndex > -1) {\n                     finalBuriedBuckets.add(buryBuckets.get(buryIndex));\n                  }\n               }\n               if (finalBuriedBuckets.size() > 0) {\n                  normalBuckets.addAll(finalBuriedBuckets);\n                  facets.get(facet).put(\"buckets\", normalBuckets);\n               }\n            }\n\n         }\n      }\n   }\n}",
            "shareState": true,
            "type": "javascript-query",
            "skip": false,
            "label": "** Format JSON Facets",
            "condition": "//JSON_FACETS_RULES\ntrue",
            "secretSourceStageId": "9bc26bd4-8f98-4b3a-a382-bd69d3875fc5"
          },
          {
            "id": "fb85e341-863d-475b-a827-04cd4d93cda5",
            "script": "/*\n * This package is going to iterate through the facet_counts object and will \n * update the count field to what was calculated by the JSON Facets.\n * NOTE that this approach works for basic scenarios using Index facet sorting and minCount=0.\n */\n\nvar ArrayList = Java.type('java.util.ArrayList')\nvar UtilLib;\nvar rollupBucket = \"products\";\n\n/* \n * Updates the count for a matching value in facet_fields\n * \n * The facet_fields structure looks like:\n * \"facet_fields\": {\n *   \"item_Brand_ss\": [\n *     [\n *       \"ACME\", 20\n *     ]\n *   ],\n *   \"sku_primaryColorFamily_name_s\": [\n *     [\n *       \"Multi Color\", 8\n *     ],[\n *       \"Blue\", 7\n *     ],[\n *       \"Brown\" ,4\n *     ],[\n *       \"Green\",4\n *     ],[\n *       \"Black\",4\n *     ],[\n *       \"Tan\",1\n *     ]\n *   ]\n * },\n */\n\nfunction buildStdFacetsFromJSON(jsonFacets, facetFieldsObjects) {\n  for (var jFacet in jsonFacets){\n    var jfBuckets = jsonFacets[jFacet][\"buckets\"];\n\n    if (!jfBuckets || !UtilLib.getTypeOf(jfBuckets).equals('ArrayList')) {\n      return;\n    }\n\n    if (facetFieldsObjects[jFacet]) {\n      logger.info(\"DROPPING:\"+jFacet);\n      facetFieldsObjects.remove(jFacet);\n    }\n    var stdFacet = jFacet; //.toUpperCase();\n    \n    \n    var newFacetVersion = new ArrayList();\n\n    for (var j = 0; j < jfBuckets.length; j++) {\n      var bucketValue = jfBuckets[j].get('val');    \n      var bucketCount = jfBuckets[j].get(rollupBucket);\n\n      var facEntry = new ArrayList();\n      facEntry.add(bucketValue);\n\n      if(bucketCount){\n        facEntry.add(bucketCount);\n      }\n      else {\n        facEntry.add(0);\n      }\n      \n      newFacetVersion.add(facEntry);\n      //logger.info(\"ADDING facEntry:\"+facEntry);\n    }\n    //logger.info(\"ADDING:\"+stdFacet);\n    facetFieldsObjects[stdFacet] = newFacetVersion;\n\n   }\n};\n\n\n/*\n * Standard query stage entry point function\n */\nfunction(request, response, ctx) {\n\n  // Load in lucidworks.ps util library\n  if (!UtilLib) {\n    UtilLib = ctx.get(\"UtilLib\");\n  }\n\n  var docs = response.getInnerResponse().getDocuments();\n  if (!docs || docs.size() === 0) {\n    return;\n  }\n\n  var inner = response.getInnerResponse();\n  if (!UtilLib.getTypeOf(inner).equals('JSONResponse')) {\n    return;\n  }\n\n  // Retrieve the data table from the JSONResponse\n  var dict = inner.getUnderlyingObject();\n\n  // Top level solr facet structure returned to the caller\n  if (!dict.get('facet_counts')) {\n    return;\n  }\n\n  // Facet fields are what we return to the caller and contains all of the facets and facet value counts\n  var facetFieldsObjects = dict.get('facet_counts').get('facet_fields');\n  if (!facetFieldsObjects) {\n    return;\n  }\n\n  // JSON facets are the calculated rollupBucket (set by default to \"products\")  which combines values on productID but considers values on all SKUs\n  var jsonFacets = dict.get('facets');\n  if (!jsonFacets) {\n    return;\n  }\n\n  buildStdFacetsFromJSON(jsonFacets, facetFieldsObjects);\n\n}",
            "shareState": true,
            "type": "javascript-query",
            "skip": false,
            "label": "** Create Full Standard Facets From JSON Facets",
            "condition": "//JSON_FACETS_RULES\n/* This stage rebuilds the standard facets from JSON facets.  Typically this will only be necessary in the QWB, and should only be executed under that condition.\n*/\ntrue",
            "secretSourceStageId": "fb85e341-863d-475b-a827-04cd4d93cda5"
          },
          {
            "id": "48682841-b61a-47c1-9647-9d201a82a058",
            "facetLabelParseDelimiter": "||",
            "type": "query-rules-augment-response",
            "skip": false,
            "secretSourceStageId": "48682841-b61a-47c1-9647-9d201a82a058"
          }
        ],
        "updates": [
          {
            "userId": "admin",
            "timestamp": "2021-03-23T18:39:44.957Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-03-23T18:39:35.710Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-03-23T18:39:24.159Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-03-23T18:39:16.229Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-03-23T18:39:00.502Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-03-23T18:38:40.778Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-03-23T18:37:55.149Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-03-23T18:30:19.582Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-02-03T09:27:42.782Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-02-03T09:19:08.900Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-02-03T09:19:04.225Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-02-03T09:16:46.136Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-02-03T09:10:03.268Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-02-03T09:10:01.179Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-02-03T09:09:58.764Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-02-03T09:09:56.365Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-02-03T09:04:16.602Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-02-03T09:04:07.499Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-02-03T09:04:04.809Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-02-03T08:56:37.603Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-02-03T08:53:25.182Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-02-03T08:49:25.784Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-02-03T08:46:49.655Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-02-03T08:46:06.476Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-02-03T08:39:36.118Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-02-03T08:35:54.561Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-02-03T08:33:32.042Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-02-03T08:31:33.479Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-02-03T08:02:52.949Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-02-03T08:00:06.700Z"
          }
        ],
        "properties": {
          "supportedMode": "all",
          "secretSourcePipelineId": "JSON_Facets_Rules_DC"
        }
      },
      {
        "id": "RECENCY-stub",
        "stages": [
          {
            "id": "072fb067-b193-4577-8ed4-87cf36d71b3b",
            "params": [],
            "type": "set-params",
            "skip": false,
            "label": "README (condition)",
            "condition": "false;\n/*\nThe RECENCY feature does not use a pipeline.  Rather it is a JS stage which needs to be inserted into a pipeline.  The RECENCY Index pipeline stage will create a date reflecting how new a document is.  The Query Pipeline side will boost by this date value\n \n*/",
            "secretSourceStageId": "072fb067-b193-4577-8ed4-87cf36d71b3b"
          },
          {
            "id": "ee80e2a0-5d3b-4687-b191-05c290c27302",
            "params": [
              {
                "key": "boost",
                "value": "max(1,sum(0.6,recip(ms(NOW,recentDate_dt),3.16e-11,1,1)))",
                "policy": "append"
              }
            ],
            "type": "set-params",
            "skip": false,
            "label": "RECENCY boost recent docs",
            "condition": "true;\n// TODO keep recentDate_dt in sync with index pipeline\n// RECENCY JS:calculate recency date stage ",
            "secretSourceStageId": "ee80e2a0-5d3b-4687-b191-05c290c27302"
          }
        ],
        "updates": [
          {
            "userId": "clinteads",
            "timestamp": "2020-12-09T18:36:48.954Z"
          },
          {
            "userId": "clinteads",
            "timestamp": "2020-12-09T18:36:49.115Z"
          },
          {
            "userId": "clinteads",
            "timestamp": "2020-12-09T18:39:19.040Z"
          },
          {
            "userId": "clinteads",
            "timestamp": "2020-12-09T18:39:31.855Z"
          },
          {
            "userId": "admin",
            "timestamp": "2020-12-09T18:39:34.799Z"
          }
        ],
        "properties": {
          "secretSourcePipelineId": "RECENCY-stub"
        }
      },
      {
        "id": "SOLR_SPELL_zeroCheck",
        "stages": [
          {
            "id": "edadcbbc-3c98-46e5-bf2b-9edb8985b5d6",
            "useOriginalQueryIfNoRulesMatch": true,
            "matchPartialFilterQueries": true,
            "handler": "select",
            "method": "POST",
            "ruleLimit": "100",
            "params": [],
            "hierarchicalFilter": [],
            "headers": [],
            "maxWaitMs": 500,
            "type": "query-rules",
            "skip": false,
            "secretSourceStageId": "edadcbbc-3c98-46e5-bf2b-9edb8985b5d6"
          },
          {
            "id": "3a50d71e-8ebf-4424-9e30-a23892dda79b",
            "httpMethod": "POST",
            "allowFederatedSearch": false,
            "preferredReplicaType": "pull",
            "type": "solr-query",
            "skip": false,
            "responseSignalsEnabled": true,
            "secretSourceStageId": "3a50d71e-8ebf-4424-9e30-a23892dda79b",
            "properties": {
              "autoCreated": true
            }
          },
          {
            "id": "a01a8032-329f-4a34-8958-431e8e84841b",
            "params": [
              {
                "key": "spellcheck",
                "value": "false",
                "policy": "replace"
              },
              {
                "key": "_lwps_initial_query_s",
                "value": "<q>",
                "policy": "replace"
              },
              {
                "key": "spellcheck.q",
                "value": "<q>",
                "policy": "append"
              },
              {
                "key": "_lwps_spell_is_initial_query_s",
                "value": "true",
                "policy": "append"
              }
            ],
            "type": "set-params",
            "skip": false,
            "label": "SOLR_SPELL_capture user query and prep spellcheck",
            "condition": "true;\n/*\nturn off spellcheck and capture the initial query value.\nTODO: logic may be needed to ensure that spellcheck is skipped for\n   - overly long queries as they spike cvolation times e.g. \"DEWALT 2 in. x 18-Gauge Metal Brad Nails (2500 per Pack)\"\n   - queries of product numbers or things which never result in a valid spelling e.g. 12-abc-225#blk\n   - queries for which identifying the term is difficult. e.g `{!frange l=10 u=15}product(basePrice, sum(1, $userSalesTax))``\n*/",
            "secretSourceStageId": "a01a8032-329f-4a34-8958-431e8e84841b"
          },
          {
            "id": "77194bf6-f0a6-4249-91eb-51cefe44d821",
            "params": [
              {
                "key": "spellcheck",
                "value": "true",
                "policy": "replace"
              },
              {
                "key": "spellcheck.collate",
                "value": "true",
                "policy": "replace"
              },
              {
                "key": "spellcheck.dictionary",
                "value": "default",
                "policy": "replace"
              },
              {
                "key": "spellcheck.dictionary",
                "value": "wordbreak",
                "policy": "append"
              },
              {
                "key": "spellcheck.dictionary",
                "value": "fileDictionary",
                "policy": "append"
              },
              {
                "key": "_lwps_spell_is_initial_query_s",
                "value": "false",
                "policy": "remove"
              },
              {
                "key": "_lwps_zero_result_queries_i",
                "value": "1",
                "policy": "replace"
              }
            ],
            "type": "set-params",
            "skip": false,
            "label": "SOLR_SPELL if ZERO results ",
            "condition": "response && response.get() && \n  response.get().\n  getInnerResponse().getNumFound().get() == 0",
            "secretSourceStageId": "77194bf6-f0a6-4249-91eb-51cefe44d821"
          },
          {
            "id": "c6880ea7-312e-4cf4-a76c-a5e0ed81b547",
            "httpMethod": "POST",
            "allowFederatedSearch": false,
            "preferredReplicaType": "pull",
            "type": "solr-query",
            "skip": false,
            "label": "SOLR_SPELL Solr getSpellcheck Term",
            "condition": "request.getFirstParam(\"_lwps_zero_result_queries_i\") > 0",
            "responseSignalsEnabled": false,
            "secretSourceStageId": "c6880ea7-312e-4cf4-a76c-a5e0ed81b547"
          },
          {
            "id": "c2a858e2-7899-4949-8ce2-2d9e498c9179",
            "script": "(function () {\n    \"use strict\";\n    var isDebug = false\n    function logIfDebug(message){\n      if(isDebug){ var args = Array.prototype.slice.call(arguments);\n        if(args.length > 0){logger.info(args[0],args.slice(1));}}\n    }\n\n    /**\n     * @see https://doc.lucidworks.com/fusion-server/5.3/concepts/querying/pipelines/custom-javascript-query-stages.html\n     */\n    return function(request,response,ctx){\n \n      var abstractResponse = response.getInnerResponse(); // likely a JSONResponse but perhaps XMLResponse or other\n      var underlyingResponse = abstractResponse.getUnderlyingObject();// if JSON then Map<String, Object>.  If XML then org.w3c.dom/Document\n\n      //turn off spell check for subsiquent queries\n      request.putSingleParam(\"spellcheck\",\"false\")\n\n\n      // we could use nashorn's instanceof operator but future compatibility is unknown    \n      var spellcheck, spellCorrection = null;\n      if(abstractResponse && abstractResponse.getClass().getSimpleName().equals(\"JSONResponse\")){\n\n        spellcheck = underlyingResponse.get(\"spellcheck\")  \n              logIfDebug(\"\\n\\nspellcheck type is {}\\n\\n\",   spellcheck.getClass())\n\n        if (spellcheck) {\n          var collationsVal = spellcheck.getOrDefault(\"collations\",null);\n\n          if (collationsVal) {\n            var jsonnlVal = request.getFirstParam('json.nl');\n            logIfDebug(\"extracting spellcheck collation for json.nl={}\",jsonnlVal)\n            if(\"map\".equalsIgnoreCase(jsonnlVal)){\n              spellCorrection = collationsVal.get(\"collation\")\n            }else if(\"arrmap\".equalsIgnoreCase(jsonnlVal) && collationsVal.length > 0){\n              spellCorrection = collationsVal[0].get(\"collation\");\n            } else if (\"arrarr\".equalsIgnoreCase(jsonnlVal) && collationsVal.length > 0) {\n              spellCorrection = collationsVal[0][1];\n            } else if (collationsVal.length > 1){  // jsonVal is likely flat, the default\n              spellCorrection = collationsVal[1];\n            }\n              logIfDebug(\"found spellcheck collation {}\",   spellCorrection)\n\n          }\n        }\n      }\n      else if(abstractResponse && abstractResponse.getClass().getSimpleName().equals(\"Document\")){\n        //TODO: extend for the org.w3c.dom.Document use case but short circuit for now\n        return\n      }\n      else{\n      return // short circuit\n      }\n\n      \n      if (spellCorrection){\n        var queryParam = request.hasParam('orig_q') ? 'orig_q' : 'q'\n        request.putSingleParam(queryParam,spellCorrection);\n        request.putSingleParam(\"_lwps_spell_corrected_q_s\",spellCorrection)\n        //The pipeline may want to change mm or otherwise widen the query if we don't have a colation so flag this fact\n        ctx.put(\"hasSolrSpellCorrection\",true)\n        logIfDebug(\"Spellcheck Correction changing query to {}\",spellCorrection)\n      }    \n    };\n})();",
            "shareState": true,
            "type": "javascript-query",
            "skip": false,
            "label": "SOLR_SPELL apply spell fix",
            "condition": "request.getFirstParam(\"_lwps_zero_result_queries_i\") > 0",
            "secretSourceStageId": "c2a858e2-7899-4949-8ce2-2d9e498c9179"
          },
          {
            "id": "8df53127-ace0-4a17-b17d-6d6fed3ab8b0",
            "params": [
              {
                "key": "_lwps_is_spellcheck_requery_i",
                "value": "1",
                "policy": "replace"
              },
              {
                "key": "_lwps_spell_debug_hasSolrSpellCorrection_d",
                "value": "<ctx.hasSolrSpellCorrection>",
                "policy": "append"
              },
              {
                "key": "_lwps_spell_corrected_queries_i",
                "value": "1",
                "policy": "append"
              }
            ],
            "type": "set-params",
            "skip": false,
            "label": "SOLR_SPELL_set extra corrected-spell params",
            "condition": "true == ctx.get(\"hasSolrSpellCorrection\")\n/*\nif hasSolrSpellCorrection is true then the pipeline is set to requery with a changed (spell corrected) query.\nAdd any additional parameters here e.g. changes to mm or\nparameters needed in response signals for tracking/ML\n*/",
            "secretSourceStageId": "8df53127-ace0-4a17-b17d-6d6fed3ab8b0"
          },
          {
            "id": "298d3be5-f2a9-4a91-817f-6eca2a4e6d73",
            "httpMethod": "POST",
            "allowFederatedSearch": false,
            "preferredReplicaType": "pull",
            "type": "solr-query",
            "skip": false,
            "label": "SOLR_SPELL_requery",
            "condition": "true == ctx.get(\"hasSolrSpellCorrection\")",
            "responseSignalsEnabled": true,
            "secretSourceStageId": "298d3be5-f2a9-4a91-817f-6eca2a4e6d73"
          },
          {
            "id": "2aabada2-96bf-4725-b546-1829efd84b00",
            "script": "function(request,response,ctx){\n\n  if(response && response.initialEntity && typeof(response.initialEntity.appendObject) === 'function'){\n            response.initialEntity.appendObject(\"ctx\",ctx);\n        }\n  \n}",
            "shareState": true,
            "type": "javascript-query",
            "skip": false,
            "label": "SOLR_SPELL debug: append context to response",
            "secretSourceStageId": "2aabada2-96bf-4725-b546-1829efd84b00"
          }
        ],
        "updates": [
          {
            "userId": "admin",
            "timestamp": "2021-01-29T20:34:18.724Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-01-29T20:32:54.067Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-01-06T17:16:50.668Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-01-06T17:09:51.836Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-01-06T15:46:58.015Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-01-06T15:39:57.711Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-01-06T15:37:14.265Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-01-06T15:14:19.554Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-01-06T15:13:44.441Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-01-06T15:12:45.128Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-01-06T15:12:40.996Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-01-06T15:11:00.475Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-01-05T23:45:44.958Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-01-05T23:41:49.108Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-01-05T23:41:40.714Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-01-05T23:38:18.681Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-01-05T23:02:51.872Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-01-05T23:01:28.755Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-01-05T23:00:03.875Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-01-05T22:59:10.075Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-01-05T22:53:54.570Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-01-05T22:53:26.995Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-01-05T22:51:57.228Z"
          },
          {
            "userId": "admin",
            "timestamp": "2020-12-22T21:11:10.279Z"
          },
          {
            "userId": "admin",
            "timestamp": "2020-12-22T21:00:34.945Z"
          },
          {
            "userId": "admin",
            "timestamp": "2020-12-22T20:44:42.623Z"
          },
          {
            "userId": "admin",
            "timestamp": "2020-12-22T20:40:46.790Z"
          },
          {
            "userId": "admin",
            "timestamp": "2020-12-22T20:24:54.120Z"
          },
          {
            "userId": "admin",
            "timestamp": "2020-12-22T19:50:37.816Z"
          },
          {
            "userId": "admin",
            "timestamp": "2020-12-22T19:50:01.622Z"
          }
        ],
        "properties": {
          "supportedMode": "legacy",
          "secretSourcePipelineId": "SOLR_SPELL_zeroCheck"
        }
      },
      {
        "id": "TAXO_QPL",
        "stages": [
          {
            "id": "6bd0cd14-de98-492a-b635-28493521d0cd",
            "script": "function getPrefix(fqs){\n  var sep = \"|\"\n  try {\n    var depth = 0;\n    if (null != fqs && fqs.length > 0) {\n      for (var i = 0; i < fqs.length; i++) {\n        var fq = fqs[i];\n        logger.info(\"**FQ:\"+fq);\n        if (fq.startsWith(taxoFld)) {\n          var fqVal = fq.split(':')[1].replace(/{.*}/,'');            //grab the value, but drop local params if they're there\n          fqVal = fqVal.replace(/[(\")]/g,\"\");                         //drop quotes and params \n          depth = fqVal.split(sep)[0];\n          depth++;\n          fqVal = fqVal.split(sep).slice(1,depth+1).join(sep);        //grab the prefix for the next level\n        \n          //logger.info(\"PREFIX:\"+depth + sep + fqVal);\n          return depth + sep + fqVal;\n        }\n      }\n    }\n    return 0;  //didn't find any category filters\n  }\n  catch (error) {\n    logger.info(\"Error: \"+error);\n    return 0;\n  }\n}\n\nfunction (request, response, ctx) {\n  taxoFld = \"depth_catNamePath_ss\";\n\n  //assume facets set to true\n  var fqs = request.getParam(\"fq\");\n  var currPrefix = getPrefix(fqs);\n\n  request.addParam(\"facet.field\",taxoFld);\n  request.addParam(\"f.\"+taxoFld+\".facet.prefix\", currPrefix);\n\n}",
            "shareState": true,
            "type": "javascript-query",
            "skip": false,
            "label": "** Create Taxo Facets",
            "condition": "//TAXO_EXACT_OR_DESC_MATCH\ntrue;",
            "secretSourceStageId": "6bd0cd14-de98-492a-b635-28493521d0cd"
          },
          {
            "id": "48a35338-85a3-4bfb-bbc6-4bdd4dc95cef",
            "paramToTag": "q",
            "spell_corrections_enabled": true,
            "phrase_boosting_enabled": true,
            "tail_rewrites_enabled": true,
            "phraseBoost": 2.0,
            "phraseSlop": 10,
            "synonymExpansionBoost": 2.0,
            "synonym_expansion_enabled": true,
            "remove_words_enabled": true,
            "overlaps": "all",
            "params": [],
            "maxWaitMs": 500,
            "type": "text-tagger",
            "skip": false,
            "label": "This is a Text Tagger",
            "licensed": true,
            "secretSourceStageId": "48a35338-85a3-4bfb-bbc6-4bdd4dc95cef"
          },
          {
            "id": "4fad695f-b699-4c44-b43f-b2c8b124793e",
            "numRecommendations": 10,
            "numSignals": 100,
            "aggrType": "click@doc_id,filters,query",
            "boostId": "id",
            "boostingMethod": "query-param",
            "boostingParam": "boost",
            "queryParams": [
              {
                "key": "qf",
                "value": "query_t"
              },
              {
                "key": "pf",
                "value": "query_t^50"
              },
              {
                "key": "pf",
                "value": "query_t~3^20"
              },
              {
                "key": "pf2",
                "value": "query_t^20"
              },
              {
                "key": "pf2",
                "value": "query_t~3^10"
              },
              {
                "key": "pf3",
                "value": "query_t^10"
              },
              {
                "key": "pf3",
                "value": "query_t~3^5"
              },
              {
                "key": "boost",
                "value": "map(query({!field f=query_s v=$q}),0,0,1,20)"
              },
              {
                "key": "mm",
                "value": "50%"
              },
              {
                "key": "defType",
                "value": "edismax"
              },
              {
                "key": "sort",
                "value": "score desc, weight_d desc"
              },
              {
                "key": "fq",
                "value": "weight_d:[* TO *]"
              }
            ],
            "rollupField": "doc_id_s",
            "rollupWeightField": "weight_d",
            "weightExpression": "math:log(weight_d + 1) + 10 * math:log(score+1)",
            "rollupWeightStrategy": "max",
            "queryParamToBoost": "q",
            "includeEnrichedQuery": false,
            "type": "recommendation",
            "skip": false,
            "licensed": true,
            "secretSourceStageId": "4fad695f-b699-4c44-b43f-b2c8b124793e"
          },
          {
            "id": "3b5c758d-d786-4647-b96a-723c773b2459",
            "rows": 10,
            "start": 0,
            "sortOrder": [],
            "queryFields": [],
            "returnFields": [
              "*"
            ],
            "returnScore": true,
            "type": "search-fields",
            "skip": false,
            "licensed": true,
            "secretSourceStageId": "3b5c758d-d786-4647-b96a-723c773b2459"
          },
          {
            "id": "b7b1f25a-0bcb-402d-8327-f91507a1abea",
            "fieldFacets": [
              {
                "field": "priceRange_s",
                "limit": 100,
                "minCount": 1,
                "missing": false
              },
              {
                "field": "groupId_s",
                "limit": 100,
                "minCount": 1,
                "missing": false
              },
              {
                "field": "threCMetalType_s",
                "limit": 100,
                "minCount": 1,
                "missing": false
              },
              {
                "field": "catNamePath_ss",
                "limit": 100,
                "minCount": 1,
                "missing": false
              }
            ],
            "rangeFacets": [],
            "type": "facet",
            "skip": false,
            "licensed": true,
            "secretSourceStageId": "b7b1f25a-0bcb-402d-8327-f91507a1abea",
            "properties": {
              "autoCreated": true
            }
          },
          {
            "id": "d6bdd443-67df-4761-ad4b-8fdee97d667e",
            "script": "function (request, response, ctx) {\n  //with (DSL) {\n  var orig_taxo_field = \"depth_catNamePath_ss\";   //actual filter field received from the client; it contains depth prefixes (e.g., 2/Clothing/Dresses/Cocktail)\n\n  //the following fields are used for DESCENDANT matching and EXACT matching, respectively; they do NOT contain depth prefixes, so those must be stripped from the fq's\n  var desc_taxo_field = \"catNamePath_ss\";         \n  var exact_taxo_field = \"exact_catNamePath_ss\";         \n  var sep = \"\\\\|\";          //taxonomy node separator, usually pipe or slash; be sure to escape any regex special chars (e.g., pipe)      \n\n  //find orig field in FQs\n  var fqs = request.getParam('fq');\n  logger.info('fqs:'+fqs);\n  var orig_fq_pattern = new RegExp('.*'+orig_taxo_field+'.*');\n  var field_replace_pattern = new RegExp(orig_taxo_field,'g');\n  var value_replace_pattern = new RegExp('[0-9]'+sep,'g');\n\n  for each (var fq in fqs){\n    if (orig_fq_pattern.test(fq)) {\n      var exact_fq = fq.replace(field_replace_pattern,exact_taxo_field);\n      exact_fq = exact_fq.replace(value_replace_pattern,'');\n      var desc_fq = fq.replace(field_replace_pattern,desc_taxo_field);\n      desc_fq = desc_fq.replace(value_replace_pattern,'');\n      request.addParam('fq',exact_fq)\n      request.addParam('fq',desc_fq)\n      ctx[\"exact_param_added\"] = true;\n      logger.info(\"DESC added fq:\"+ desc_fq)\n      logger.info(\"EXACT added fq:\"+ exact_fq)\n      break;  \n    }\n  }\n  //}\n}",
            "shareState": true,
            "type": "javascript-query",
            "skip": false,
            "label": "** Taxo FQs - Add exact and depth",
            "condition": "//TAXO_EXACT_OR_DESC_MATCH\ntrue;",
            "secretSourceStageId": "d6bdd443-67df-4761-ad4b-8fdee97d667e"
          },
          {
            "id": "adfee403-cd65-435a-968f-54eaf555b322",
            "useOriginalQueryIfNoRulesMatch": true,
            "matchPartialFilterQueries": true,
            "handler": "select",
            "method": "POST",
            "ruleLimit": "100",
            "params": [],
            "hierarchicalFilter": [
              {
                "field": "catNamePath_ss",
                "delimiter": "|"
              }
            ],
            "headers": [],
            "maxWaitMs": 500,
            "type": "query-rules",
            "skip": false,
            "label": "* Apply Rules",
            "condition": "//TAXO_EXACT_OR_DESC_MATCH\ntrue;",
            "licensed": true,
            "secretSourceStageId": "adfee403-cd65-435a-968f-54eaf555b322"
          },
          {
            "id": "9ed2e8e6-a6dc-4b68-82b4-f5b551469d5b",
            "script": "//drop all fq's with 'exact_' or 'desc_' prefix\n\nfunction (request, response, ctx) {\n  //with (DSL) {\n    \n  var fq_pattern = new RegExp('^exact_.*|^catNamePath_ss.*');\n  var fqs = request.getParam('fq');\n  logger.info('fqs:'+fqs);\n\n  var newFqs = [];\n  var needToSwap = false;\n\n  for each (var fq in fqs){\n    if (fq_pattern.test(fq)) {\n      needToSwap = true;  \n      logger.info(\"dropping rule param fq:\"+fq)\n    }\n    else {\n      newFqs.push(fq)\n    }\n   \n  }\n\n  if (needToSwap){\n    request.removeParam('fq');\n    for (i=0;i<newFqs.length;i++){\n      request.addParam('fq',newFqs[i]);\n      logger.info(\"adding fq:\"+newFqs[i]);\n    }\n  }\n\n  logger.info(\"NEW FQ:\"+newFqs);\n\n  //}\n}",
            "shareState": true,
            "type": "javascript-query",
            "skip": false,
            "label": "** Remove added FQs",
            "condition": "//TAXO_EXACT_OR_DESC_MATCH\ntrue;",
            "secretSourceStageId": "9ed2e8e6-a6dc-4b68-82b4-f5b551469d5b"
          },
          {
            "id": "c5e3c6ce-2e44-42eb-91cd-da5f16e47b39",
            "httpMethod": "POST",
            "allowFederatedSearch": false,
            "preferredReplicaType": "pull",
            "type": "solr-query",
            "skip": false,
            "responseSignalsEnabled": true,
            "licensed": true,
            "secretSourceStageId": "c5e3c6ce-2e44-42eb-91cd-da5f16e47b39"
          },
          {
            "id": "b24be046-fc99-4a26-a183-6897e8ba7580",
            "facetLabelParseDelimiter": "||",
            "type": "query-rules-augment-response",
            "skip": false,
            "condition": "",
            "licensed": true,
            "secretSourceStageId": "b24be046-fc99-4a26-a183-6897e8ba7580"
          }
        ],
        "updates": [
          {
            "userId": "admin",
            "timestamp": "2021-02-18T03:17:00.136Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-02-18T03:22:12.865Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-02-18T03:42:03.212Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-02-18T03:58:27.759Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-02-18T04:03:49.330Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-02-18T04:42:32.334Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-03-23T03:55:22.132Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-03-23T06:05:15.262Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-03-23T17:19:45.031Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-03-23T17:19:57.321Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-03-23T17:20:01.826Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-03-23T17:20:10.571Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-03-23T17:24:36.172Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-03-23T17:24:41.527Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-03-23T17:24:46.921Z"
          }
        ],
        "properties": {
          "supportedMode": "all",
          "secretSourcePipelineId": "TAXO_QPL"
        }
      }
    ],
    "features": {
      "DC_Large": [
        {
          "name": "partitionByTime",
          "collectionId": "DC_Large",
          "params": {},
          "enabled": false
        },
        {
          "name": "recommendations",
          "collectionId": "DC_Large",
          "params": {
            "idField": "id",
            "itemsForItem": true,
            "queriesForQuery": true,
            "itemsForUser": true,
            "itemsForQuery": false,
            "content": true
          },
          "enabled": false
        },
        {
          "name": "searchLogs",
          "collectionId": "DC_Large",
          "params": {},
          "enabled": true
        },
        {
          "name": "signals",
          "collectionId": "DC_Large",
          "params": {},
          "enabled": true
        }
      ],
      "DC_Large_ALS_grid_items_for_item_recommendations": [
        {
          "name": "partitionByTime",
          "collectionId": "DC_Large_ALS_grid_items_for_item_recommendations",
          "params": {},
          "enabled": false
        },
        {
          "name": "recommendations",
          "collectionId": "DC_Large_ALS_grid_items_for_item_recommendations",
          "params": {
            "idField": "id",
            "itemsForItem": true,
            "queriesForQuery": true,
            "itemsForUser": true,
            "itemsForQuery": false,
            "content": true
          },
          "enabled": false
        },
        {
          "name": "searchLogs",
          "collectionId": "DC_Large_ALS_grid_items_for_item_recommendations",
          "params": {
            "strategy": "LOG"
          },
          "enabled": true
        },
        {
          "name": "signals",
          "collectionId": "DC_Large_ALS_grid_items_for_item_recommendations",
          "params": {},
          "enabled": false
        }
      ],
      "DC_Large_ALS_grid_items_for_item_recommendations_logs": [
        {
          "name": "partitionByTime",
          "collectionId": "DC_Large_ALS_grid_items_for_item_recommendations_logs",
          "params": {},
          "enabled": false
        },
        {
          "name": "recommendations",
          "collectionId": "DC_Large_ALS_grid_items_for_item_recommendations_logs",
          "params": {
            "idField": "id",
            "itemsForItem": true,
            "queriesForQuery": true,
            "itemsForUser": true,
            "itemsForQuery": false,
            "content": true
          },
          "enabled": false
        },
        {
          "name": "searchLogs",
          "collectionId": "DC_Large_ALS_grid_items_for_item_recommendations_logs",
          "params": {},
          "enabled": false
        },
        {
          "name": "signals",
          "collectionId": "DC_Large_ALS_grid_items_for_item_recommendations_logs",
          "params": {},
          "enabled": false
        }
      ],
      "DC_Large_ALS_grid_items_for_user_recommendations": [
        {
          "name": "partitionByTime",
          "collectionId": "DC_Large_ALS_grid_items_for_user_recommendations",
          "params": {},
          "enabled": false
        },
        {
          "name": "recommendations",
          "collectionId": "DC_Large_ALS_grid_items_for_user_recommendations",
          "params": {
            "idField": "id",
            "itemsForItem": true,
            "queriesForQuery": true,
            "itemsForUser": true,
            "itemsForQuery": false,
            "content": true
          },
          "enabled": false
        },
        {
          "name": "searchLogs",
          "collectionId": "DC_Large_ALS_grid_items_for_user_recommendations",
          "params": {
            "strategy": "LOG"
          },
          "enabled": true
        },
        {
          "name": "signals",
          "collectionId": "DC_Large_ALS_grid_items_for_user_recommendations",
          "params": {},
          "enabled": false
        }
      ],
      "DC_Large_ALS_grid_items_for_user_recommendations_logs": [
        {
          "name": "partitionByTime",
          "collectionId": "DC_Large_ALS_grid_items_for_user_recommendations_logs",
          "params": {},
          "enabled": false
        },
        {
          "name": "recommendations",
          "collectionId": "DC_Large_ALS_grid_items_for_user_recommendations_logs",
          "params": {
            "idField": "id",
            "itemsForItem": true,
            "queriesForQuery": true,
            "itemsForUser": true,
            "itemsForQuery": false,
            "content": true
          },
          "enabled": false
        },
        {
          "name": "searchLogs",
          "collectionId": "DC_Large_ALS_grid_items_for_user_recommendations_logs",
          "params": {},
          "enabled": false
        },
        {
          "name": "signals",
          "collectionId": "DC_Large_ALS_grid_items_for_user_recommendations_logs",
          "params": {},
          "enabled": false
        }
      ],
      "DC_Large_ALS_items_for_item_recommendations": [
        {
          "name": "partitionByTime",
          "collectionId": "DC_Large_ALS_items_for_item_recommendations",
          "params": {},
          "enabled": false
        },
        {
          "name": "recommendations",
          "collectionId": "DC_Large_ALS_items_for_item_recommendations",
          "params": {
            "idField": "id",
            "itemsForItem": true,
            "queriesForQuery": true,
            "itemsForUser": true,
            "itemsForQuery": false,
            "content": true
          },
          "enabled": false
        },
        {
          "name": "searchLogs",
          "collectionId": "DC_Large_ALS_items_for_item_recommendations",
          "params": {
            "strategy": "LOG"
          },
          "enabled": true
        },
        {
          "name": "signals",
          "collectionId": "DC_Large_ALS_items_for_item_recommendations",
          "params": {},
          "enabled": false
        }
      ],
      "DC_Large_ALS_items_for_item_recommendations_logs": [
        {
          "name": "partitionByTime",
          "collectionId": "DC_Large_ALS_items_for_item_recommendations_logs",
          "params": {},
          "enabled": false
        },
        {
          "name": "recommendations",
          "collectionId": "DC_Large_ALS_items_for_item_recommendations_logs",
          "params": {
            "idField": "id",
            "itemsForItem": true,
            "queriesForQuery": true,
            "itemsForUser": true,
            "itemsForQuery": false,
            "content": true
          },
          "enabled": false
        },
        {
          "name": "searchLogs",
          "collectionId": "DC_Large_ALS_items_for_item_recommendations_logs",
          "params": {},
          "enabled": false
        },
        {
          "name": "signals",
          "collectionId": "DC_Large_ALS_items_for_item_recommendations_logs",
          "params": {},
          "enabled": false
        }
      ],
      "DC_Large_ALS_items_for_user_recommendations": [
        {
          "name": "partitionByTime",
          "collectionId": "DC_Large_ALS_items_for_user_recommendations",
          "params": {},
          "enabled": false
        },
        {
          "name": "recommendations",
          "collectionId": "DC_Large_ALS_items_for_user_recommendations",
          "params": {
            "idField": "id",
            "itemsForItem": true,
            "queriesForQuery": true,
            "itemsForUser": true,
            "itemsForQuery": false,
            "content": true
          },
          "enabled": false
        },
        {
          "name": "searchLogs",
          "collectionId": "DC_Large_ALS_items_for_user_recommendations",
          "params": {
            "strategy": "LOG"
          },
          "enabled": true
        },
        {
          "name": "signals",
          "collectionId": "DC_Large_ALS_items_for_user_recommendations",
          "params": {},
          "enabled": false
        }
      ],
      "DC_Large_ALS_items_for_user_recommendations_logs": [
        {
          "name": "partitionByTime",
          "collectionId": "DC_Large_ALS_items_for_user_recommendations_logs",
          "params": {},
          "enabled": false
        },
        {
          "name": "recommendations",
          "collectionId": "DC_Large_ALS_items_for_user_recommendations_logs",
          "params": {
            "idField": "id",
            "itemsForItem": true,
            "queriesForQuery": true,
            "itemsForUser": true,
            "itemsForQuery": false,
            "content": true
          },
          "enabled": false
        },
        {
          "name": "searchLogs",
          "collectionId": "DC_Large_ALS_items_for_user_recommendations_logs",
          "params": {},
          "enabled": false
        },
        {
          "name": "signals",
          "collectionId": "DC_Large_ALS_items_for_user_recommendations_logs",
          "params": {},
          "enabled": false
        }
      ],
      "DC_Large_ALS_run_1_items_for_item_recommendations": [
        {
          "name": "partitionByTime",
          "collectionId": "DC_Large_ALS_run_1_items_for_item_recommendations",
          "params": {},
          "enabled": false
        },
        {
          "name": "recommendations",
          "collectionId": "DC_Large_ALS_run_1_items_for_item_recommendations",
          "params": {
            "idField": "id",
            "itemsForItem": true,
            "queriesForQuery": true,
            "itemsForUser": true,
            "itemsForQuery": false,
            "content": true
          },
          "enabled": false
        },
        {
          "name": "searchLogs",
          "collectionId": "DC_Large_ALS_run_1_items_for_item_recommendations",
          "params": {
            "strategy": "LOG"
          },
          "enabled": true
        },
        {
          "name": "signals",
          "collectionId": "DC_Large_ALS_run_1_items_for_item_recommendations",
          "params": {},
          "enabled": false
        }
      ],
      "DC_Large_ALS_run_1_items_for_item_recommendations_logs": [
        {
          "name": "partitionByTime",
          "collectionId": "DC_Large_ALS_run_1_items_for_item_recommendations_logs",
          "params": {},
          "enabled": false
        },
        {
          "name": "recommendations",
          "collectionId": "DC_Large_ALS_run_1_items_for_item_recommendations_logs",
          "params": {
            "idField": "id",
            "itemsForItem": true,
            "queriesForQuery": true,
            "itemsForUser": true,
            "itemsForQuery": false,
            "content": true
          },
          "enabled": false
        },
        {
          "name": "searchLogs",
          "collectionId": "DC_Large_ALS_run_1_items_for_item_recommendations_logs",
          "params": {},
          "enabled": false
        },
        {
          "name": "signals",
          "collectionId": "DC_Large_ALS_run_1_items_for_item_recommendations_logs",
          "params": {},
          "enabled": false
        }
      ],
      "DC_Large_ALS_run_1_items_for_user_recommendations": [
        {
          "name": "partitionByTime",
          "collectionId": "DC_Large_ALS_run_1_items_for_user_recommendations",
          "params": {},
          "enabled": false
        },
        {
          "name": "recommendations",
          "collectionId": "DC_Large_ALS_run_1_items_for_user_recommendations",
          "params": {
            "idField": "id",
            "itemsForItem": true,
            "queriesForQuery": true,
            "itemsForUser": true,
            "itemsForQuery": false,
            "content": true
          },
          "enabled": false
        },
        {
          "name": "searchLogs",
          "collectionId": "DC_Large_ALS_run_1_items_for_user_recommendations",
          "params": {
            "strategy": "LOG"
          },
          "enabled": true
        },
        {
          "name": "signals",
          "collectionId": "DC_Large_ALS_run_1_items_for_user_recommendations",
          "params": {},
          "enabled": false
        }
      ],
      "DC_Large_ALS_run_1_items_for_user_recommendations_logs": [
        {
          "name": "partitionByTime",
          "collectionId": "DC_Large_ALS_run_1_items_for_user_recommendations_logs",
          "params": {},
          "enabled": false
        },
        {
          "name": "recommendations",
          "collectionId": "DC_Large_ALS_run_1_items_for_user_recommendations_logs",
          "params": {
            "idField": "id",
            "itemsForItem": true,
            "queriesForQuery": true,
            "itemsForUser": true,
            "itemsForQuery": false,
            "content": true
          },
          "enabled": false
        },
        {
          "name": "searchLogs",
          "collectionId": "DC_Large_ALS_run_1_items_for_user_recommendations_logs",
          "params": {},
          "enabled": false
        },
        {
          "name": "signals",
          "collectionId": "DC_Large_ALS_run_1_items_for_user_recommendations_logs",
          "params": {},
          "enabled": false
        }
      ],
      "DC_Large_ALS_run_2_items_for_item_recommendations": [
        {
          "name": "partitionByTime",
          "collectionId": "DC_Large_ALS_run_2_items_for_item_recommendations",
          "params": {},
          "enabled": false
        },
        {
          "name": "recommendations",
          "collectionId": "DC_Large_ALS_run_2_items_for_item_recommendations",
          "params": {
            "idField": "id",
            "itemsForItem": true,
            "queriesForQuery": true,
            "itemsForUser": true,
            "itemsForQuery": false,
            "content": true
          },
          "enabled": false
        },
        {
          "name": "searchLogs",
          "collectionId": "DC_Large_ALS_run_2_items_for_item_recommendations",
          "params": {
            "strategy": "LOG"
          },
          "enabled": true
        },
        {
          "name": "signals",
          "collectionId": "DC_Large_ALS_run_2_items_for_item_recommendations",
          "params": {},
          "enabled": false
        }
      ],
      "DC_Large_ALS_run_2_items_for_item_recommendations_logs": [
        {
          "name": "partitionByTime",
          "collectionId": "DC_Large_ALS_run_2_items_for_item_recommendations_logs",
          "params": {},
          "enabled": false
        },
        {
          "name": "recommendations",
          "collectionId": "DC_Large_ALS_run_2_items_for_item_recommendations_logs",
          "params": {
            "idField": "id",
            "itemsForItem": true,
            "queriesForQuery": true,
            "itemsForUser": true,
            "itemsForQuery": false,
            "content": true
          },
          "enabled": false
        },
        {
          "name": "searchLogs",
          "collectionId": "DC_Large_ALS_run_2_items_for_item_recommendations_logs",
          "params": {},
          "enabled": false
        },
        {
          "name": "signals",
          "collectionId": "DC_Large_ALS_run_2_items_for_item_recommendations_logs",
          "params": {},
          "enabled": false
        }
      ],
      "DC_Large_ALS_run_2_items_for_user_recommendations": [
        {
          "name": "partitionByTime",
          "collectionId": "DC_Large_ALS_run_2_items_for_user_recommendations",
          "params": {},
          "enabled": false
        },
        {
          "name": "recommendations",
          "collectionId": "DC_Large_ALS_run_2_items_for_user_recommendations",
          "params": {
            "idField": "id",
            "itemsForItem": true,
            "queriesForQuery": true,
            "itemsForUser": true,
            "itemsForQuery": false,
            "content": true
          },
          "enabled": false
        },
        {
          "name": "searchLogs",
          "collectionId": "DC_Large_ALS_run_2_items_for_user_recommendations",
          "params": {
            "strategy": "LOG"
          },
          "enabled": true
        },
        {
          "name": "signals",
          "collectionId": "DC_Large_ALS_run_2_items_for_user_recommendations",
          "params": {},
          "enabled": false
        }
      ],
      "DC_Large_ALS_run_2_items_for_user_recommendations_logs": [
        {
          "name": "partitionByTime",
          "collectionId": "DC_Large_ALS_run_2_items_for_user_recommendations_logs",
          "params": {},
          "enabled": false
        },
        {
          "name": "recommendations",
          "collectionId": "DC_Large_ALS_run_2_items_for_user_recommendations_logs",
          "params": {
            "idField": "id",
            "itemsForItem": true,
            "queriesForQuery": true,
            "itemsForUser": true,
            "itemsForQuery": false,
            "content": true
          },
          "enabled": false
        },
        {
          "name": "searchLogs",
          "collectionId": "DC_Large_ALS_run_2_items_for_user_recommendations_logs",
          "params": {},
          "enabled": false
        },
        {
          "name": "signals",
          "collectionId": "DC_Large_ALS_run_2_items_for_user_recommendations_logs",
          "params": {},
          "enabled": false
        }
      ],
      "DC_Large_Populate_Signals_DS_job_state": [
        {
          "name": "partitionByTime",
          "collectionId": "DC_Large_Populate_Signals_DS_job_state",
          "params": {},
          "enabled": false
        },
        {
          "name": "recommendations",
          "collectionId": "DC_Large_Populate_Signals_DS_job_state",
          "params": {
            "idField": "id",
            "itemsForItem": true,
            "queriesForQuery": true,
            "itemsForUser": true,
            "itemsForQuery": false,
            "content": true
          },
          "enabled": false
        },
        {
          "name": "searchLogs",
          "collectionId": "DC_Large_Populate_Signals_DS_job_state",
          "params": {},
          "enabled": false
        },
        {
          "name": "signals",
          "collectionId": "DC_Large_Populate_Signals_DS_job_state",
          "params": {},
          "enabled": false
        }
      ],
      "DC_Large_TYPEAHEAD_v3_signals": [
        {
          "name": "partitionByTime",
          "collectionId": "DC_Large_TYPEAHEAD_v3_signals",
          "params": {},
          "enabled": false
        },
        {
          "name": "recommendations",
          "collectionId": "DC_Large_TYPEAHEAD_v3_signals",
          "params": {
            "idField": "id",
            "itemsForItem": true,
            "queriesForQuery": true,
            "itemsForUser": true,
            "itemsForQuery": false,
            "content": true
          },
          "enabled": false
        },
        {
          "name": "searchLogs",
          "collectionId": "DC_Large_TYPEAHEAD_v3_signals",
          "params": {},
          "enabled": false
        },
        {
          "name": "signals",
          "collectionId": "DC_Large_TYPEAHEAD_v3_signals",
          "params": {},
          "enabled": false
        }
      ],
      "DC_Large_TYPEAHEAD_v3_signals_aggr": [
        {
          "name": "partitionByTime",
          "collectionId": "DC_Large_TYPEAHEAD_v3_signals_aggr",
          "params": {},
          "enabled": false
        },
        {
          "name": "recommendations",
          "collectionId": "DC_Large_TYPEAHEAD_v3_signals_aggr",
          "params": {
            "idField": "id",
            "itemsForItem": true,
            "queriesForQuery": true,
            "itemsForUser": true,
            "itemsForQuery": false,
            "content": true
          },
          "enabled": false
        },
        {
          "name": "searchLogs",
          "collectionId": "DC_Large_TYPEAHEAD_v3_signals_aggr",
          "params": {},
          "enabled": false
        },
        {
          "name": "signals",
          "collectionId": "DC_Large_TYPEAHEAD_v3_signals_aggr",
          "params": {},
          "enabled": false
        }
      ],
      "DC_Large_TYPEAHEAD_v4": [
        {
          "name": "partitionByTime",
          "collectionId": "DC_Large_TYPEAHEAD_v4",
          "params": {},
          "enabled": false
        },
        {
          "name": "recommendations",
          "collectionId": "DC_Large_TYPEAHEAD_v4",
          "params": {
            "idField": "id",
            "itemsForItem": true,
            "queriesForQuery": true,
            "itemsForUser": true,
            "itemsForQuery": false,
            "content": true
          },
          "enabled": false
        },
        {
          "name": "searchLogs",
          "collectionId": "DC_Large_TYPEAHEAD_v4",
          "params": {},
          "enabled": false
        },
        {
          "name": "signals",
          "collectionId": "DC_Large_TYPEAHEAD_v4",
          "params": {},
          "enabled": true
        }
      ],
      "DC_Large_TYPEAHEAD_v4_signals": [
        {
          "name": "partitionByTime",
          "collectionId": "DC_Large_TYPEAHEAD_v4_signals",
          "params": {},
          "enabled": false
        },
        {
          "name": "recommendations",
          "collectionId": "DC_Large_TYPEAHEAD_v4_signals",
          "params": {
            "idField": "id",
            "itemsForItem": true,
            "queriesForQuery": true,
            "itemsForUser": true,
            "itemsForQuery": false,
            "content": true
          },
          "enabled": false
        },
        {
          "name": "searchLogs",
          "collectionId": "DC_Large_TYPEAHEAD_v4_signals",
          "params": {},
          "enabled": false
        },
        {
          "name": "signals",
          "collectionId": "DC_Large_TYPEAHEAD_v4_signals",
          "params": {},
          "enabled": false
        }
      ],
      "DC_Large_TYPEAHEAD_v4_signals_aggr": [
        {
          "name": "partitionByTime",
          "collectionId": "DC_Large_TYPEAHEAD_v4_signals_aggr",
          "params": {},
          "enabled": false
        },
        {
          "name": "recommendations",
          "collectionId": "DC_Large_TYPEAHEAD_v4_signals_aggr",
          "params": {
            "idField": "id",
            "itemsForItem": true,
            "queriesForQuery": true,
            "itemsForUser": true,
            "itemsForQuery": false,
            "content": true
          },
          "enabled": false
        },
        {
          "name": "searchLogs",
          "collectionId": "DC_Large_TYPEAHEAD_v4_signals_aggr",
          "params": {},
          "enabled": false
        },
        {
          "name": "signals",
          "collectionId": "DC_Large_TYPEAHEAD_v4_signals_aggr",
          "params": {},
          "enabled": false
        }
      ],
      "DC_Large_job_reports": [
        {
          "name": "partitionByTime",
          "collectionId": "DC_Large_job_reports",
          "params": {},
          "enabled": false
        },
        {
          "name": "recommendations",
          "collectionId": "DC_Large_job_reports",
          "params": {
            "idField": "id",
            "itemsForItem": true,
            "queriesForQuery": true,
            "itemsForUser": true,
            "itemsForQuery": false,
            "content": true
          },
          "enabled": false
        },
        {
          "name": "searchLogs",
          "collectionId": "DC_Large_job_reports",
          "params": {},
          "enabled": false
        },
        {
          "name": "signals",
          "collectionId": "DC_Large_job_reports",
          "params": {},
          "enabled": false
        }
      ],
      "DC_Large_query_rewrite": [
        {
          "name": "partitionByTime",
          "collectionId": "DC_Large_query_rewrite",
          "params": {},
          "enabled": false
        },
        {
          "name": "recommendations",
          "collectionId": "DC_Large_query_rewrite",
          "params": {
            "idField": "id",
            "itemsForItem": true,
            "queriesForQuery": true,
            "itemsForUser": true,
            "itemsForQuery": false,
            "content": true
          },
          "enabled": false
        },
        {
          "name": "searchLogs",
          "collectionId": "DC_Large_query_rewrite",
          "params": {},
          "enabled": false
        },
        {
          "name": "signals",
          "collectionId": "DC_Large_query_rewrite",
          "params": {},
          "enabled": false
        }
      ],
      "DC_Large_query_rewrite_staging": [
        {
          "name": "partitionByTime",
          "collectionId": "DC_Large_query_rewrite_staging",
          "params": {},
          "enabled": false
        },
        {
          "name": "recommendations",
          "collectionId": "DC_Large_query_rewrite_staging",
          "params": {
            "idField": "id",
            "itemsForItem": true,
            "queriesForQuery": true,
            "itemsForUser": true,
            "itemsForQuery": false,
            "content": true
          },
          "enabled": false
        },
        {
          "name": "searchLogs",
          "collectionId": "DC_Large_query_rewrite_staging",
          "params": {},
          "enabled": false
        },
        {
          "name": "signals",
          "collectionId": "DC_Large_query_rewrite_staging",
          "params": {},
          "enabled": false
        }
      ],
      "DC_Large_signals": [
        {
          "name": "partitionByTime",
          "collectionId": "DC_Large_signals",
          "params": {},
          "enabled": false
        },
        {
          "name": "recommendations",
          "collectionId": "DC_Large_signals",
          "params": {
            "idField": "id",
            "itemsForItem": true,
            "queriesForQuery": true,
            "itemsForUser": true,
            "itemsForQuery": false,
            "content": true
          },
          "enabled": false
        },
        {
          "name": "searchLogs",
          "collectionId": "DC_Large_signals",
          "params": {},
          "enabled": false
        },
        {
          "name": "signals",
          "collectionId": "DC_Large_signals",
          "params": {},
          "enabled": false
        }
      ],
      "DC_Large_signals_aggr": [
        {
          "name": "partitionByTime",
          "collectionId": "DC_Large_signals_aggr",
          "params": {},
          "enabled": false
        },
        {
          "name": "recommendations",
          "collectionId": "DC_Large_signals_aggr",
          "params": {
            "idField": "id",
            "itemsForItem": true,
            "queriesForQuery": true,
            "itemsForUser": true,
            "itemsForQuery": false,
            "content": true
          },
          "enabled": false
        },
        {
          "name": "searchLogs",
          "collectionId": "DC_Large_signals_aggr",
          "params": {},
          "enabled": false
        },
        {
          "name": "signals",
          "collectionId": "DC_Large_signals_aggr",
          "params": {},
          "enabled": false
        }
      ],
      "DC_Large_user_prefs": [
        {
          "name": "partitionByTime",
          "collectionId": "DC_Large_user_prefs",
          "params": {},
          "enabled": false
        },
        {
          "name": "recommendations",
          "collectionId": "DC_Large_user_prefs",
          "params": {
            "idField": "id",
            "itemsForItem": true,
            "queriesForQuery": true,
            "itemsForUser": true,
            "itemsForQuery": false,
            "content": true
          },
          "enabled": false
        },
        {
          "name": "searchLogs",
          "collectionId": "DC_Large_user_prefs",
          "params": {},
          "enabled": false
        },
        {
          "name": "signals",
          "collectionId": "DC_Large_user_prefs",
          "params": {},
          "enabled": false
        }
      ],
      "DW_Large_signals": [
        {
          "name": "partitionByTime",
          "collectionId": "DW_Large_signals",
          "params": {},
          "enabled": false
        },
        {
          "name": "recommendations",
          "collectionId": "DW_Large_signals",
          "params": {
            "idField": "id",
            "itemsForItem": true,
            "queriesForQuery": true,
            "itemsForUser": true,
            "itemsForQuery": false,
            "content": true
          },
          "enabled": false
        },
        {
          "name": "searchLogs",
          "collectionId": "DW_Large_signals",
          "params": {},
          "enabled": false
        },
        {
          "name": "signals",
          "collectionId": "DW_Large_signals",
          "params": {},
          "enabled": false
        }
      ],
      "DW_Large_signals_aggr": [
        {
          "name": "partitionByTime",
          "collectionId": "DW_Large_signals_aggr",
          "params": {},
          "enabled": false
        },
        {
          "name": "recommendations",
          "collectionId": "DW_Large_signals_aggr",
          "params": {
            "idField": "id",
            "itemsForItem": true,
            "queriesForQuery": true,
            "itemsForUser": true,
            "itemsForQuery": false,
            "content": true
          },
          "enabled": false
        },
        {
          "name": "searchLogs",
          "collectionId": "DW_Large_signals_aggr",
          "params": {},
          "enabled": false
        },
        {
          "name": "signals",
          "collectionId": "DW_Large_signals_aggr",
          "params": {},
          "enabled": false
        }
      ]
    },
    "indexProfiles": [
      {
        "id": "DC_Large",
        "parser": "DC_Large",
        "indexPipeline": "DC_Large",
        "collection": "DC_Large",
        "params": []
      }
    ],
    "queryProfiles": [
      {
        "id": "DC_Large",
        "queryPipeline": "DC_Large",
        "searchHandler": "/select",
        "searchMode": "all",
        "collection": "DC_Large"
      },
      {
        "id": "DC_Large_TYPEAHEAD_QPF_v4",
        "queryPipeline": "DC_Large_TYPEAHEAD_QPL_v4",
        "searchHandler": "select",
        "searchMode": "all",
        "collection": "DC_Large_TYPEAHEAD_v4",
        "additionalProperties": {},
        "updates": [
          {
            "userId": "admin",
            "timestamp": "2021-02-11T22:08:21.955Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-03-22T17:43:38.380Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-03-31T17:49:44.157Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-04-01T15:35:37.179Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-04-13T17:55:01.464Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-04-13T21:11:03.814Z"
          }
        ]
      },
      {
        "id": "DC_Large_TYPEAHEAD_catalog_QPF_v4",
        "queryPipeline": "DC_Large_TYPEAHEAD_QPL_v4",
        "searchHandler": "select",
        "searchMode": "all",
        "collection": "DC_Large_TYPEAHEAD_v4",
        "additionalProperties": {},
        "params": [
          {
            "key": "catalogSearch",
            "value": "true",
            "policy": "append"
          }
        ],
        "updates": [
          {
            "userId": "admin",
            "timestamp": "2021-03-29T23:58:55.546Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-03-31T17:49:50.863Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-04-01T15:35:37.218Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-04-13T17:55:01.490Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-04-13T21:11:03.841Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-04-27T21:37:55.232Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-04-27T21:53:10.023Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-04-27T21:53:49.373Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-05-03T20:47:13.317Z"
          }
        ]
      },
      {
        "id": "DC_Large_TYPEAHEAD_entity_QPF_v4",
        "queryPipeline": "DC_Large_TYPEAHEAD_QPL_v4",
        "searchHandler": "select",
        "searchMode": "all",
        "collection": "DC_Large_TYPEAHEAD_v4",
        "additionalProperties": {},
        "params": [
          {
            "key": "entityOnly",
            "value": "true",
            "policy": "append"
          }
        ],
        "updates": [
          {
            "userId": "admin",
            "timestamp": "2021-02-11T20:52:46.292Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-02-11T22:12:41.998Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-03-22T17:43:38.402Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-03-31T17:49:49.307Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-04-01T15:35:37.240Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-04-13T17:55:01.506Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-04-13T21:11:03.862Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-04-27T21:53:20.021Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-04-27T21:53:36.862Z"
          }
        ]
      },
      {
        "id": "DC_Large_TYPEAHEAD_history_QPF_v4",
        "queryPipeline": "DC_Large_TYPEAHEAD_QPL_v4",
        "searchHandler": "select",
        "searchMode": "all",
        "collection": "DC_Large_TYPEAHEAD_v4",
        "additionalProperties": {},
        "params": [
          {
            "key": "historyOnly",
            "value": "true",
            "policy": "append"
          }
        ],
        "updates": [
          {
            "userId": "admin",
            "timestamp": "2021-02-11T20:14:28.067Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-02-11T22:12:55.747Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-03-22T17:43:38.427Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-03-31T17:49:47.565Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-04-01T15:35:37.259Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-04-13T17:55:01.528Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-04-13T21:11:03.886Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-04-27T21:52:40.497Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-04-27T21:52:56.819Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-04-27T21:53:42.665Z"
          }
        ]
      },
      {
        "id": "DC_Large_rules_simulator",
        "queryPipeline": "DC_Large",
        "searchHandler": "/select",
        "searchMode": "all",
        "collection": "DC_Large",
        "params": [
          {
            "key": "lw.rules.simulate",
            "value": "DC_Large_query_rewrite_staging",
            "policy": "default"
          },
          {
            "key": "lw.rules.debug",
            "value": "1",
            "policy": "default"
          },
          {
            "key": "lw.tagger.debug",
            "value": "1",
            "policy": "default"
          },
          {
            "key": "lw.skip_response_signal",
            "value": "1",
            "policy": "default"
          }
        ]
      }
    ],
    "parsers": [
      {
        "id": "DC_Large",
        "editPanel": {},
        "idField": "id",
        "maxParserDepth": 16,
        "parserStages": [
          {
            "type": "archive",
            "enabled": true,
            "mediaTypes": [],
            "pathPatterns": [],
            "errorHandling": "mark",
            "id": "ae918a58-68c5-456d-8267-ffaf3cacbddd",
            "alwaysDetect": true,
            "inheritMediaTypes": true,
            "ignoredMediaTypes": [],
            "outputFieldPrefix": ""
          },
          {
            "type": "csv",
            "enabled": true,
            "mediaTypes": [],
            "pathPatterns": [],
            "errorHandling": "mark",
            "id": "6d64eb55-bd8f-4968-9ca0-a654c0d53553",
            "charset": "detect",
            "ignoreBOM": false,
            "autoDetect": true,
            "hasHeaders": true,
            "headers": [],
            "fillValue": "<FILL>",
            "trimWhitespace": true,
            "skipEmptyLines": true,
            "includeRowNumber": true,
            "commentHandling": "ignore",
            "maxRowLength": 10485760,
            "maxNumColumns": 1000,
            "maxColumnChars": 10485760,
            "columnHandling": "default",
            "inheritMediaTypes": true,
            "ignoredMediaTypes": [],
            "outputFieldPrefix": ""
          },
          {
            "type": "json",
            "enabled": true,
            "mediaTypes": [],
            "pathPatterns": [],
            "errorHandling": "mark",
            "id": "91d491ba-15d5-4407-8965-4a6b074c3624",
            "splitArrays": true,
            "includePath": false,
            "mappings": [],
            "listHandling": "multivalued",
            "expectJsonL": false,
            "maxLineSize": 8192,
            "inheritMediaTypes": true,
            "ignoredMediaTypes": [],
            "outputFieldPrefix": ""
          },
          {
            "type": "xml",
            "enabled": true,
            "mediaTypes": [],
            "pathPatterns": [],
            "errorHandling": "mark",
            "id": "30d6094f-b9f0-4151-9dec-da81f9c1de2e",
            "rootPaths": [
              "/products/product"
            ],
            "maxSize": 65536,
            "listHandling": "multivalued",
            "inheritMediaTypes": true,
            "ignoredMediaTypes": [],
            "outputFieldPrefix": ""
          },
          {
            "type": "html",
            "enabled": true,
            "mediaTypes": [],
            "pathPatterns": [],
            "errorHandling": "mark",
            "id": "328a2ebb-3a8d-4c19-a4a4-c31e3a2bd932",
            "charset": "detect",
            "excludeFilters": [],
            "filterBeforeMapping": false,
            "filterBeforeExtractingLinks": false,
            "mappings": [],
            "keepParent": true,
            "extractHtmlLinks": false,
            "extractBodyText": true,
            "metatagsPrefix": "",
            "inheritMediaTypes": true,
            "ignoredMediaTypes": [],
            "outputFieldPrefix": ""
          },
          {
            "type": "text",
            "enabled": true,
            "mediaTypes": [],
            "pathPatterns": [],
            "errorHandling": "mark",
            "id": "611d47c6-e265-4bda-9433-c9bbd205dd3a",
            "charset": "detect",
            "ignoreBOM": false,
            "maxLength": 1048576,
            "maxLineLength": 1048576,
            "outputField": "body",
            "splitLines": false,
            "skipEmptyLines": false,
            "skipHeaderLines": 0,
            "trimWhitespace": false,
            "commentHandling": "include",
            "comment": "#",
            "commentField": "comment",
            "inheritMediaTypes": true,
            "ignoredMediaTypes": [],
            "outputFieldPrefix": ""
          },
          {
            "type": "tika",
            "enabled": true,
            "mediaTypes": [],
            "pathPatterns": [],
            "errorHandling": "mark",
            "id": "5c7778cd-f941-49b2-a357-da04b615bfa6",
            "includeImages": false,
            "flattenCompound": true,
            "addFailedDocs": false,
            "addOriginalContent": false,
            "contentEncoding": "binary",
            "returnXml": false,
            "keepOriginalStructure": false,
            "extractHtmlLinks": false,
            "extractOtherLinks": false,
            "excludeContentTypes": [],
            "zipBombCompressionRatio": 200,
            "zipBombMaxDepth": 200,
            "zipBombMaxPackageEntryDepth": 20,
            "inheritMediaTypes": true,
            "ignoredMediaTypes": [],
            "outputFieldPrefix": ""
          },
          {
            "type": "fallback",
            "enabled": true,
            "mediaTypes": [],
            "pathPatterns": [],
            "errorHandling": "mark",
            "id": "70de976d-099a-43c4-a327-db9c0380e68b",
            "metadataOnly": false,
            "maxBytesToKeep": 1048576,
            "inheritMediaTypes": true,
            "ignoredMediaTypes": [],
            "outputFieldPrefix": ""
          }
        ],
        "detectMediaTypeBasedOnExtension": true,
        "updates": [
          {
            "userId": "admin",
            "timestamp": "2021-04-14T06:42:48.794Z"
          }
        ],
        "enableMediaTypeDetection": true,
        "maxFieldLength": -1
      },
      {
        "id": "_system",
        "maxParserDepth": 16,
        "parserStages": [
          {
            "type": "archive",
            "enabled": true,
            "mediaTypes": [],
            "pathPatterns": [],
            "errorHandling": "mark",
            "id": "1efdf01f-3e2e-44fb-b499-aad77219314c",
            "alwaysDetect": true,
            "inheritMediaTypes": true,
            "ignoredMediaTypes": [],
            "outputFieldPrefix": ""
          },
          {
            "type": "csv",
            "enabled": true,
            "mediaTypes": [],
            "pathPatterns": [],
            "errorHandling": "mark",
            "id": "1a870163-e4db-41c8-81d2-6b03dbe4e8a8",
            "charset": "detect",
            "ignoreBOM": false,
            "autoDetect": true,
            "hasHeaders": true,
            "headers": [],
            "fillValue": "<FILL>",
            "trimWhitespace": true,
            "skipEmptyLines": true,
            "includeRowNumber": true,
            "commentHandling": "ignore",
            "maxRowLength": 10485760,
            "maxNumColumns": 1000,
            "maxColumnChars": 10485760,
            "columnHandling": "default",
            "inheritMediaTypes": true,
            "ignoredMediaTypes": [],
            "outputFieldPrefix": ""
          },
          {
            "type": "json",
            "enabled": true,
            "mediaTypes": [],
            "pathPatterns": [],
            "errorHandling": "mark",
            "id": "a8f6c016-47a9-4fab-b896-a93787b3456f",
            "splitArrays": true,
            "includePath": false,
            "mappings": [],
            "listHandling": "multivalued",
            "expectJsonL": false,
            "maxLineSize": 8192,
            "inheritMediaTypes": true,
            "ignoredMediaTypes": [],
            "outputFieldPrefix": ""
          },
          {
            "type": "xml",
            "enabled": true,
            "mediaTypes": [],
            "pathPatterns": [],
            "errorHandling": "mark",
            "id": "4d8bf550-85a9-477f-acfe-fbf93cf0172e",
            "rootPaths": [
              "/"
            ],
            "maxSize": 65536,
            "listHandling": "multivalued",
            "inheritMediaTypes": true,
            "ignoredMediaTypes": [],
            "outputFieldPrefix": ""
          },
          {
            "type": "html",
            "enabled": true,
            "mediaTypes": [],
            "pathPatterns": [],
            "errorHandling": "mark",
            "id": "c61e8095-3e42-467c-be82-5422f27c17bc",
            "charset": "detect",
            "excludeFilters": [],
            "filterBeforeMapping": false,
            "filterBeforeExtractingLinks": false,
            "mappings": [],
            "keepParent": true,
            "extractHtmlLinks": false,
            "extractBodyText": true,
            "metatagsPrefix": "",
            "inheritMediaTypes": true,
            "ignoredMediaTypes": [],
            "outputFieldPrefix": ""
          },
          {
            "type": "text",
            "enabled": true,
            "mediaTypes": [],
            "pathPatterns": [],
            "errorHandling": "mark",
            "id": "e3a11e87-484f-4780-b0d2-83280aaf4e4a",
            "charset": "detect",
            "ignoreBOM": false,
            "maxLength": 1048576,
            "maxLineLength": 1048576,
            "outputField": "body",
            "splitLines": false,
            "skipEmptyLines": false,
            "skipHeaderLines": 0,
            "trimWhitespace": false,
            "commentHandling": "include",
            "comment": "#",
            "commentField": "comment",
            "inheritMediaTypes": true,
            "ignoredMediaTypes": [],
            "outputFieldPrefix": ""
          },
          {
            "type": "tika",
            "enabled": true,
            "mediaTypes": [],
            "pathPatterns": [],
            "errorHandling": "mark",
            "id": "ae33237d-a55d-4acf-9a6e-b38fc49b6011",
            "includeImages": false,
            "flattenCompound": true,
            "addFailedDocs": false,
            "addOriginalContent": false,
            "contentEncoding": "binary",
            "returnXml": false,
            "keepOriginalStructure": false,
            "extractHtmlLinks": false,
            "extractOtherLinks": false,
            "excludeContentTypes": [],
            "zipBombCompressionRatio": 200,
            "zipBombMaxDepth": 200,
            "zipBombMaxPackageEntryDepth": 20,
            "inheritMediaTypes": true,
            "ignoredMediaTypes": [],
            "outputFieldPrefix": ""
          },
          {
            "type": "fallback",
            "enabled": true,
            "mediaTypes": [],
            "pathPatterns": [],
            "errorHandling": "mark",
            "id": "f45238a9-c9d9-4e15-abc0-c232a609c653",
            "metadataOnly": false,
            "maxBytesToKeep": 1048576,
            "inheritMediaTypes": true,
            "ignoredMediaTypes": [],
            "outputFieldPrefix": ""
          }
        ],
        "detectMediaTypeBasedOnExtension": true,
        "enableMediaTypeDetection": true,
        "maxFieldLength": -1
      }
    ],
    "objectGroups": [
      {
        "id": "74cc606e-2e6d-4f47-8b19-07e819788d18",
        "name": "signals-DC_Large_TYPEAHEAD_v4",
        "isSystem": true,
        "description": "Collection 'DC_Large_TYPEAHEAD_v4' objects for signals support",
        "updates": [
          {
            "userId": "admin",
            "timestamp": "2021-07-14T21:33:00.171Z"
          }
        ]
      },
      {
        "id": "9e073be8-6a3c-4fda-9fe3-c642a1078779",
        "name": "signals-DW_Large",
        "isSystem": true,
        "description": "Collection 'DW_Large' objects for signals support"
      }
    ],
    "links": [
      {
        "subject": "app:DC_Large",
        "object": "group:_shared",
        "linkType": "relatesTo",
        "originator": "unspecified"
      },
      {
        "subject": "blob:CAT_ID_MAPPING_cats_full.txt",
        "object": "app:DC_Large",
        "linkType": "inContextOf",
        "originator": "unspecified"
      },
      {
        "subject": "blob:RESPONSE_TA/full-list-of-bad-words_csv-file_2018_07_30.csv",
        "object": "app:DC_Large",
        "linkType": "inContextOf",
        "originator": "unspecified"
      },
      {
        "subject": "blob:TYPEAHEAD/Typeahead_inclusion_list.csv",
        "object": "app:DC_Large",
        "linkType": "inContextOf",
        "originator": "unspecified"
      },
      {
        "subject": "blob:TYPEAHEAD/full-list-of-bad-words_csv-file_2018_07_30.csv",
        "object": "app:DC_Large",
        "linkType": "inContextOf",
        "originator": "unspecified"
      },
      {
        "subject": "blob:custom_synonyms.txt",
        "object": "app:DC_Large",
        "linkType": "inContextOf",
        "originator": "unspecified"
      },
      {
        "subject": "blob:ecom_keywords.csv",
        "object": "app:DC_Large",
        "linkType": "inContextOf",
        "originator": "unspecified"
      },
      {
        "subject": "blob:lib/index/ConfigMgr.js",
        "object": "app:DC_Large",
        "linkType": "inContextOf",
        "originator": "unspecified"
      },
      {
        "subject": "blob:lib/index/FusionServiceLib.js",
        "object": "app:DC_Large",
        "linkType": "inContextOf",
        "originator": "unspecified"
      },
      {
        "subject": "blob:lib/index/HttpLib.js",
        "object": "app:DC_Large",
        "linkType": "inContextOf",
        "originator": "unspecified"
      },
      {
        "subject": "blob:lib/index/IndexLib.js",
        "object": "app:DC_Large",
        "linkType": "inContextOf",
        "originator": "unspecified"
      },
      {
        "subject": "blob:lib/index/JobHistoryLib.js",
        "object": "app:DC_Large",
        "linkType": "inContextOf",
        "originator": "unspecified"
      },
      {
        "subject": "blob:lib/index/MinimalTemplateLib.js",
        "object": "app:DC_Large",
        "linkType": "inContextOf",
        "originator": "unspecified"
      },
      {
        "subject": "blob:lib/index/QPLib.js",
        "object": "app:DC_Large",
        "linkType": "inContextOf",
        "originator": "unspecified"
      },
      {
        "subject": "blob:lib/index/SlackHelperLib.js",
        "object": "app:DC_Large",
        "linkType": "inContextOf",
        "originator": "unspecified"
      },
      {
        "subject": "blob:lib/index/SolrJHelperLib.js",
        "object": "app:DC_Large",
        "linkType": "inContextOf",
        "originator": "unspecified"
      },
      {
        "subject": "blob:lib/index/TaggerLib.js",
        "object": "app:DC_Large",
        "linkType": "inContextOf",
        "originator": "unspecified"
      },
      {
        "subject": "blob:lib/index/TaggerLib.v5.js",
        "object": "app:DC_Large",
        "linkType": "inContextOf",
        "originator": "unspecified"
      },
      {
        "subject": "blob:lib/index/TestLib.js",
        "object": "app:DC_Large",
        "linkType": "inContextOf",
        "originator": "unspecified"
      },
      {
        "subject": "blob:lib/index/UtilLib.js",
        "object": "app:DC_Large",
        "linkType": "inContextOf",
        "originator": "unspecified"
      },
      {
        "subject": "blob:lib/query/ConfigMgr.js",
        "object": "app:DC_Large",
        "linkType": "inContextOf",
        "originator": "unspecified"
      },
      {
        "subject": "blob:lib/query/FusionServiceLib.js",
        "object": "app:DC_Large",
        "linkType": "inContextOf",
        "originator": "unspecified"
      },
      {
        "subject": "blob:lib/query/HttpLib.js",
        "object": "app:DC_Large",
        "linkType": "inContextOf",
        "originator": "unspecified"
      },
      {
        "subject": "blob:lib/query/IndexLib.js",
        "object": "app:DC_Large",
        "linkType": "inContextOf",
        "originator": "unspecified"
      },
      {
        "subject": "blob:lib/query/JobHistoryLib.js",
        "object": "app:DC_Large",
        "linkType": "inContextOf",
        "originator": "unspecified"
      },
      {
        "subject": "blob:lib/query/MinimalTemplateLib.js",
        "object": "app:DC_Large",
        "linkType": "inContextOf",
        "originator": "unspecified"
      },
      {
        "subject": "blob:lib/query/QPLib.js",
        "object": "app:DC_Large",
        "linkType": "inContextOf",
        "originator": "unspecified"
      },
      {
        "subject": "blob:lib/query/SlackHelperLib.js",
        "object": "app:DC_Large",
        "linkType": "inContextOf",
        "originator": "unspecified"
      },
      {
        "subject": "blob:lib/query/SolrJHelperLib.js",
        "object": "app:DC_Large",
        "linkType": "inContextOf",
        "originator": "unspecified"
      },
      {
        "subject": "blob:lib/query/TaggerLib.js",
        "object": "app:DC_Large",
        "linkType": "inContextOf",
        "originator": "unspecified"
      },
      {
        "subject": "blob:lib/query/TaggerLib.v5.js",
        "object": "app:DC_Large",
        "linkType": "inContextOf",
        "originator": "unspecified"
      },
      {
        "subject": "blob:lib/query/TestLib.js",
        "object": "app:DC_Large",
        "linkType": "inContextOf",
        "originator": "unspecified"
      },
      {
        "subject": "blob:lib/query/TimerLib.js",
        "object": "app:DC_Large",
        "linkType": "inContextOf",
        "originator": "unspecified"
      },
      {
        "subject": "blob:lib/query/UtilLib.js",
        "object": "app:DC_Large",
        "linkType": "inContextOf",
        "originator": "unspecified"
      },
      {
        "subject": "blob:prefs-DC_Large.DC_Large",
        "object": "app:DC_Large",
        "linkType": "inContextOf",
        "originator": "unspecified"
      },
      {
        "subject": "blob:prefs-DC_Large.DC_Large-question-answering",
        "object": "app:DC_Large",
        "linkType": "inContextOf",
        "originator": "unspecified"
      },
      {
        "subject": "blob:prefs-DC_Large.DC_Large_TYPEAHEAD_QPL_v4",
        "object": "app:DC_Large",
        "linkType": "inContextOf",
        "originator": "unspecified"
      },
      {
        "subject": "blob:prefs-DC_Large.DC_Large_Test",
        "object": "app:DC_Large",
        "linkType": "inContextOf",
        "originator": "unspecified"
      },
      {
        "subject": "blob:prefs-DC_Large.JSON_Facets_Rules_DC",
        "object": "app:DC_Large",
        "linkType": "inContextOf",
        "originator": "unspecified"
      },
      {
        "subject": "blob:prefs-DC_Large.SOLR_SPELL_zeroCheck",
        "object": "app:DC_Large",
        "linkType": "inContextOf",
        "originator": "unspecified"
      },
      {
        "subject": "blob:prefs-DC_Large.TAXO_QPL",
        "object": "app:DC_Large",
        "linkType": "inContextOf",
        "originator": "unspecified"
      },
      {
        "subject": "blob:prefs-DC_Large._lw_tmp_1591973111",
        "object": "app:DC_Large",
        "linkType": "inContextOf",
        "originator": "unspecified"
      },
      {
        "subject": "blob:prefs-DC_Large._lw_tmp_1598459790",
        "object": "app:DC_Large",
        "linkType": "inContextOf",
        "originator": "unspecified"
      },
      {
        "subject": "blob:prefs-DC_Large._lw_tmp_1601481983",
        "object": "app:DC_Large",
        "linkType": "inContextOf",
        "originator": "unspecified"
      },
      {
        "subject": "blob:prefs-DC_Large._lw_tmp_1609952627",
        "object": "app:DC_Large",
        "linkType": "inContextOf",
        "originator": "unspecified"
      },
      {
        "subject": "blob:prefs-DC_Large._lw_tmp_1615223423",
        "object": "app:DC_Large",
        "linkType": "inContextOf",
        "originator": "unspecified"
      },
      {
        "subject": "blob:prefs-DC_Large._lw_tmp_1617083507",
        "object": "app:DC_Large",
        "linkType": "inContextOf",
        "originator": "unspecified"
      },
      {
        "subject": "blob:prefs-DC_Large._lw_tmp_1620209764",
        "object": "app:DC_Large",
        "linkType": "inContextOf",
        "originator": "unspecified"
      },
      {
        "subject": "blob:prefs-DC_Large._lw_tmp_1622674194",
        "object": "app:DC_Large",
        "linkType": "inContextOf",
        "originator": "unspecified"
      },
      {
        "subject": "blob:prefs-DC_Large._lw_tmp_1624481627",
        "object": "app:DC_Large",
        "linkType": "inContextOf",
        "originator": "unspecified"
      },
      {
        "subject": "blob:prefs-DC_Large._lw_tmp_1624644730",
        "object": "app:DC_Large",
        "linkType": "inContextOf",
        "originator": "unspecified"
      },
      {
        "subject": "blob:prefs-DC_Large._lw_tmp_1625114553",
        "object": "app:DC_Large",
        "linkType": "inContextOf",
        "originator": "unspecified"
      },
      {
        "subject": "blob:prefs-DC_Large._lw_tmp_1625681806",
        "object": "app:DC_Large",
        "linkType": "inContextOf",
        "originator": "unspecified"
      },
      {
        "subject": "blob:prefs-DC_Large._lw_tmp_1629701262",
        "object": "app:DC_Large",
        "linkType": "inContextOf",
        "originator": "unspecified"
      },
      {
        "subject": "blob:prefs-DC_Large._lw_tmp_1637069684",
        "object": "app:DC_Large",
        "linkType": "inContextOf",
        "originator": "unspecified"
      },
      {
        "subject": "blob:prefs-DC_Large._lw_tmp_1639365574",
        "object": "app:DC_Large",
        "linkType": "inContextOf",
        "originator": "unspecified"
      },
      {
        "subject": "blob:prefs-DC_Large._lw_tmp_1644295034",
        "object": "app:DC_Large",
        "linkType": "inContextOf",
        "originator": "unspecified"
      },
      {
        "subject": "blob:prefs-DC_Large._lw_tmp_1650556828",
        "object": "app:DC_Large",
        "linkType": "inContextOf",
        "originator": "unspecified"
      },
      {
        "subject": "blob:prefs-DC_Large._lw_tmp_1653069127",
        "object": "app:DC_Large",
        "linkType": "inContextOf",
        "originator": "unspecified"
      },
      {
        "subject": "blob:prefs-DC_Large._lw_tmp_1657046193",
        "object": "app:DC_Large",
        "linkType": "inContextOf",
        "originator": "unspecified"
      },
      {
        "subject": "blob:prefs-DC_Large._lw_tmp_1657319500",
        "object": "app:DC_Large",
        "linkType": "inContextOf",
        "originator": "unspecified"
      },
      {
        "subject": "blob:prefs-DC_Large._lw_tmp_1657644879",
        "object": "app:DC_Large",
        "linkType": "inContextOf",
        "originator": "unspecified"
      },
      {
        "subject": "blob:prefs-DC_Large._lw_tmp_1657748875",
        "object": "app:DC_Large",
        "linkType": "inContextOf",
        "originator": "unspecified"
      },
      {
        "subject": "blob:prefs-DC_Large._system",
        "object": "app:DC_Large",
        "linkType": "inContextOf",
        "originator": "unspecified"
      },
      {
        "subject": "blob:prefs-DC_Large_TYPEAHEAD_v3.DC_Large",
        "object": "app:DC_Large",
        "linkType": "inContextOf",
        "originator": "unspecified"
      },
      {
        "subject": "blob:prefs-DC_Large_TYPEAHEAD_v3.DC_Large_TYPEAHEAD_QPL_v3",
        "object": "app:DC_Large",
        "linkType": "inContextOf",
        "originator": "unspecified"
      },
      {
        "subject": "blob:prefs-DC_Large_TYPEAHEAD_v3.DC_Large_TYPEAHEAD_catalog_QPL_v3",
        "object": "app:DC_Large",
        "linkType": "inContextOf",
        "originator": "unspecified"
      },
      {
        "subject": "blob:prefs-DC_Large_TYPEAHEAD_v3._lw_tmp_1617738504",
        "object": "app:DC_Large",
        "linkType": "inContextOf",
        "originator": "unspecified"
      },
      {
        "subject": "blob:prefs-DC_Large_TYPEAHEAD_v3._lw_tmp_1617866573",
        "object": "app:DC_Large",
        "linkType": "inContextOf",
        "originator": "unspecified"
      },
      {
        "subject": "blob:prefs-DC_Large_TYPEAHEAD_v4.DC_Large",
        "object": "app:DC_Large",
        "linkType": "inContextOf",
        "originator": "unspecified"
      },
      {
        "subject": "blob:prefs-DC_Large_TYPEAHEAD_v4.DC_Large_TYPEAHEAD_QPL_v4",
        "object": "app:DC_Large",
        "linkType": "inContextOf",
        "originator": "unspecified"
      },
      {
        "subject": "blob:prefs-DC_Large_TYPEAHEAD_v4._lw_tmp_1650561014",
        "object": "app:DC_Large",
        "linkType": "inContextOf",
        "originator": "unspecified"
      },
      {
        "subject": "blob:prefs-DC_Large_TYPEAHEAD_v4._lw_tmp_1650563739",
        "object": "app:DC_Large",
        "linkType": "inContextOf",
        "originator": "unspecified"
      },
      {
        "subject": "blob:prefs-DC_Large_TYPEAHEAD_v4._system",
        "object": "app:DC_Large",
        "linkType": "inContextOf",
        "originator": "unspecified"
      },
      {
        "subject": "blob:prefs-DC_Large_query_rewrite.DC_Large",
        "object": "app:DC_Large",
        "linkType": "inContextOf",
        "originator": "unspecified"
      },
      {
        "subject": "blob:prefs-DC_Large_query_rewrite._lw_tmp_1624574795",
        "object": "app:DC_Large",
        "linkType": "inContextOf",
        "originator": "unspecified"
      },
      {
        "subject": "blob:prefs-DC_Large_signals.DC_Large",
        "object": "app:DC_Large",
        "linkType": "inContextOf",
        "originator": "unspecified"
      },
      {
        "subject": "blob:prefs-DC_Large_signals._lw_tmp_1617209016",
        "object": "app:DC_Large",
        "linkType": "inContextOf",
        "originator": "unspecified"
      },
      {
        "subject": "blob:prefs-DC_Large_signals._lw_tmp_1639365532",
        "object": "app:DC_Large",
        "linkType": "inContextOf",
        "originator": "unspecified"
      },
      {
        "subject": "blob:prefs-DC_Large_signals._system",
        "object": "app:DC_Large",
        "linkType": "inContextOf",
        "originator": "unspecified"
      },
      {
        "subject": "blob:prefs-DC_Large_signals_aggr.DC_Large",
        "object": "app:DC_Large",
        "linkType": "inContextOf",
        "originator": "unspecified"
      },
      {
        "subject": "blob:prefs-DC_Large_signals_aggr.DC_Large_TYPEAHEAD_QPL_v3",
        "object": "app:DC_Large",
        "linkType": "inContextOf",
        "originator": "unspecified"
      },
      {
        "subject": "blob:prefs-DC_Large_signals_aggr.TAXO_QPL",
        "object": "app:DC_Large",
        "linkType": "inContextOf",
        "originator": "unspecified"
      },
      {
        "subject": "blob:prefs-DC_Large_signals_aggr._lw_tmp_1617895338",
        "object": "app:DC_Large",
        "linkType": "inContextOf",
        "originator": "unspecified"
      },
      {
        "subject": "blob:prefs-RESPONSE_TA.DC_Large",
        "object": "app:DC_Large",
        "linkType": "inContextOf",
        "originator": "unspecified"
      },
      {
        "subject": "blob:prefs-RESPONSE_TA._lw_tmp_1617663084",
        "object": "app:DC_Large",
        "linkType": "inContextOf",
        "originator": "unspecified"
      },
      {
        "subject": "blob:prefs-pm-7d08eff5-b320-41ba-8b9a-6c8166500fb1-DC_Large.json",
        "object": "app:DC_Large",
        "linkType": "inContextOf",
        "originator": "unspecified"
      },
      {
        "subject": "blob:prefs-pm-DC_Large.json",
        "object": "app:DC_Large",
        "linkType": "inContextOf",
        "originator": "unspecified"
      },
      {
        "subject": "blob:prefs-system_jobs_history.DC_Large",
        "object": "app:DC_Large",
        "linkType": "inContextOf",
        "originator": "unspecified"
      },
      {
        "subject": "blob:prefs-system_jobs_history._lw_tmp_1636397075",
        "object": "app:DC_Large",
        "linkType": "inContextOf",
        "originator": "unspecified"
      },
      {
        "subject": "blob:prefs-system_jobs_history._system",
        "object": "app:DC_Large",
        "linkType": "inContextOf",
        "originator": "unspecified"
      },
      {
        "subject": "blob:query-rewrites/QR_HEAD_TAIL/stopwords_only.txt",
        "object": "app:DC_Large",
        "linkType": "inContextOf",
        "originator": "unspecified"
      },
      {
        "subject": "blob:query-rewrites/QR_SYNONYM_DETECTION/ecom_keywords.csv",
        "object": "app:DC_Large",
        "linkType": "inContextOf",
        "originator": "unspecified"
      },
      {
        "subject": "collection:DC_Large",
        "object": "app:DC_Large",
        "linkType": "inContextOf",
        "originator": "unspecified"
      },
      {
        "subject": "collection:DC_Large",
        "object": "collection:DC_Large_job_reports",
        "linkType": "dependsOn",
        "originator": "unspecified"
      },
      {
        "subject": "collection:DC_Large",
        "object": "collection:DC_Large_query_rewrite",
        "linkType": "dependsOn",
        "originator": "unspecified"
      },
      {
        "subject": "collection:DC_Large",
        "object": "collection:DC_Large_query_rewrite_staging",
        "linkType": "dependsOn",
        "originator": "unspecified"
      },
      {
        "subject": "collection:DC_Large",
        "object": "collection:DC_Large_user_prefs",
        "linkType": "dependsOn",
        "originator": "unspecified"
      },
      {
        "subject": "collection:DC_Large",
        "object": "index-pipeline:DC_Large",
        "linkType": "relatesTo",
        "originator": "unspecified"
      },
      {
        "subject": "collection:DC_Large",
        "object": "index-pipeline:DC_Large-question-answering",
        "linkType": "relatesTo",
        "originator": "unspecified"
      },
      {
        "subject": "collection:DC_Large",
        "object": "index-pipeline:DC_Large-question-answering-dual-fields",
        "linkType": "relatesTo",
        "originator": "unspecified"
      },
      {
        "subject": "collection:DC_Large",
        "object": "query-pipeline:DC_Large",
        "linkType": "relatesTo",
        "originator": "unspecified"
      },
      {
        "subject": "collection:DC_Large",
        "object": "query-pipeline:DC_Large-question-answering",
        "linkType": "relatesTo",
        "originator": "unspecified"
      },
      {
        "subject": "collection:DC_Large",
        "object": "query-pipeline:DC_Large-question-answering-dual-fields",
        "linkType": "relatesTo",
        "originator": "unspecified"
      },
      {
        "subject": "collection:DC_Large_ALS_grid_items_for_item_recommendations",
        "object": "app:DC_Large",
        "linkType": "inContextOf",
        "originator": "unspecified"
      },
      {
        "subject": "collection:DC_Large_ALS_grid_items_for_item_recommendations",
        "object": "collection:DC_Large_ALS_grid_items_for_item_recommendations_logs",
        "linkType": "dependsOn",
        "originator": "unspecified"
      },
      {
        "subject": "collection:DC_Large_ALS_grid_items_for_item_recommendations_logs",
        "object": "app:DC_Large",
        "linkType": "inContextOf",
        "originator": "unspecified"
      },
      {
        "subject": "collection:DC_Large_ALS_grid_items_for_user_recommendations",
        "object": "app:DC_Large",
        "linkType": "inContextOf",
        "originator": "unspecified"
      },
      {
        "subject": "collection:DC_Large_ALS_grid_items_for_user_recommendations",
        "object": "collection:DC_Large_ALS_grid_items_for_user_recommendations_logs",
        "linkType": "dependsOn",
        "originator": "unspecified"
      },
      {
        "subject": "collection:DC_Large_ALS_grid_items_for_user_recommendations_logs",
        "object": "app:DC_Large",
        "linkType": "inContextOf",
        "originator": "unspecified"
      },
      {
        "subject": "collection:DC_Large_ALS_items_for_item_recommendations",
        "object": "app:DC_Large",
        "linkType": "inContextOf",
        "originator": "unspecified"
      },
      {
        "subject": "collection:DC_Large_ALS_items_for_item_recommendations",
        "object": "collection:DC_Large_ALS_items_for_item_recommendations_logs",
        "linkType": "dependsOn",
        "originator": "unspecified"
      },
      {
        "subject": "collection:DC_Large_ALS_items_for_item_recommendations_logs",
        "object": "app:DC_Large",
        "linkType": "inContextOf",
        "originator": "unspecified"
      },
      {
        "subject": "collection:DC_Large_ALS_items_for_user_recommendations",
        "object": "app:DC_Large",
        "linkType": "inContextOf",
        "originator": "unspecified"
      },
      {
        "subject": "collection:DC_Large_ALS_items_for_user_recommendations",
        "object": "collection:DC_Large_ALS_items_for_user_recommendations_logs",
        "linkType": "dependsOn",
        "originator": "unspecified"
      },
      {
        "subject": "collection:DC_Large_ALS_items_for_user_recommendations_logs",
        "object": "app:DC_Large",
        "linkType": "inContextOf",
        "originator": "unspecified"
      },
      {
        "subject": "collection:DC_Large_ALS_run_1_items_for_item_recommendations",
        "object": "app:DC_Large",
        "linkType": "inContextOf",
        "originator": "unspecified"
      },
      {
        "subject": "collection:DC_Large_ALS_run_1_items_for_item_recommendations",
        "object": "collection:DC_Large_ALS_run_1_items_for_item_recommendations_logs",
        "linkType": "dependsOn",
        "originator": "unspecified"
      },
      {
        "subject": "collection:DC_Large_ALS_run_1_items_for_item_recommendations_logs",
        "object": "app:DC_Large",
        "linkType": "inContextOf",
        "originator": "unspecified"
      },
      {
        "subject": "collection:DC_Large_ALS_run_1_items_for_user_recommendations",
        "object": "app:DC_Large",
        "linkType": "inContextOf",
        "originator": "unspecified"
      },
      {
        "subject": "collection:DC_Large_ALS_run_1_items_for_user_recommendations",
        "object": "collection:DC_Large_ALS_run_1_items_for_user_recommendations_logs",
        "linkType": "dependsOn",
        "originator": "unspecified"
      },
      {
        "subject": "collection:DC_Large_ALS_run_1_items_for_user_recommendations_logs",
        "object": "app:DC_Large",
        "linkType": "inContextOf",
        "originator": "unspecified"
      },
      {
        "subject": "collection:DC_Large_ALS_run_2_items_for_item_recommendations",
        "object": "app:DC_Large",
        "linkType": "inContextOf",
        "originator": "unspecified"
      },
      {
        "subject": "collection:DC_Large_ALS_run_2_items_for_item_recommendations",
        "object": "collection:DC_Large_ALS_run_2_items_for_item_recommendations_logs",
        "linkType": "dependsOn",
        "originator": "unspecified"
      },
      {
        "subject": "collection:DC_Large_ALS_run_2_items_for_item_recommendations_logs",
        "object": "app:DC_Large",
        "linkType": "inContextOf",
        "originator": "unspecified"
      },
      {
        "subject": "collection:DC_Large_ALS_run_2_items_for_user_recommendations",
        "object": "app:DC_Large",
        "linkType": "inContextOf",
        "originator": "unspecified"
      },
      {
        "subject": "collection:DC_Large_ALS_run_2_items_for_user_recommendations",
        "object": "collection:DC_Large_ALS_run_2_items_for_user_recommendations_logs",
        "linkType": "dependsOn",
        "originator": "unspecified"
      },
      {
        "subject": "collection:DC_Large_ALS_run_2_items_for_user_recommendations_logs",
        "object": "app:DC_Large",
        "linkType": "inContextOf",
        "originator": "unspecified"
      },
      {
        "subject": "collection:DC_Large_Populate_Signals_DS_job_state",
        "object": "app:DC_Large",
        "linkType": "inContextOf",
        "originator": "unspecified"
      },
      {
        "subject": "collection:DC_Large_TYPEAHEAD_v3_signals",
        "object": "app:DC_Large",
        "linkType": "inContextOf",
        "originator": "unspecified"
      },
      {
        "subject": "collection:DC_Large_TYPEAHEAD_v3_signals_aggr",
        "object": "app:DC_Large",
        "linkType": "inContextOf",
        "originator": "unspecified"
      },
      {
        "subject": "collection:DC_Large_TYPEAHEAD_v4",
        "object": "app:DC_Large",
        "linkType": "inContextOf",
        "originator": "unspecified"
      },
      {
        "subject": "collection:DC_Large_TYPEAHEAD_v4_signals",
        "object": "app:DC_Large",
        "linkType": "inContextOf",
        "originator": "unspecified"
      },
      {
        "subject": "collection:DC_Large_TYPEAHEAD_v4_signals_aggr",
        "object": "app:DC_Large",
        "linkType": "inContextOf",
        "originator": "unspecified"
      },
      {
        "subject": "collection:DC_Large_job_reports",
        "object": "app:DC_Large",
        "linkType": "inContextOf",
        "originator": "unspecified"
      },
      {
        "subject": "collection:DC_Large_query_rewrite",
        "object": "app:DC_Large",
        "linkType": "inContextOf",
        "originator": "unspecified"
      },
      {
        "subject": "collection:DC_Large_query_rewrite_staging",
        "object": "app:DC_Large",
        "linkType": "inContextOf",
        "originator": "unspecified"
      },
      {
        "subject": "collection:DC_Large_query_rewrite_staging",
        "object": "index-pipeline:DC_Large_query_rewrite_staging",
        "linkType": "relatesTo",
        "originator": "unspecified"
      },
      {
        "subject": "collection:DC_Large_signals",
        "object": "app:DC_Large",
        "linkType": "inContextOf",
        "originator": "unspecified"
      },
      {
        "subject": "collection:DC_Large_signals_aggr",
        "object": "app:DC_Large",
        "linkType": "inContextOf",
        "originator": "unspecified"
      },
      {
        "subject": "collection:DC_Large_user_prefs",
        "object": "app:DC_Large",
        "linkType": "inContextOf",
        "originator": "unspecified"
      },
      {
        "subject": "collection:DW_Large_signals",
        "object": "app:DC_Large",
        "linkType": "inContextOf",
        "originator": "unspecified"
      },
      {
        "subject": "collection:DW_Large_signals_aggr",
        "object": "app:DC_Large",
        "linkType": "inContextOf",
        "originator": "unspecified"
      },
      {
        "subject": "data-model:dc_datamodel",
        "object": "app:DC_Large",
        "linkType": "inContextOf",
        "originator": "unspecified"
      },
      {
        "subject": "data-model:file",
        "object": "app:DC_Large",
        "linkType": "inContextOf",
        "originator": "unspecified"
      },
      {
        "subject": "datasource:DC_GCS",
        "object": "app:DC_Large",
        "linkType": "inContextOf",
        "originator": "unspecified"
      },
      {
        "subject": "datasource:DC_GCS",
        "object": "collection:DC_Large",
        "linkType": "relatesTo",
        "originator": "com.lucidworks.apollo.component.LinkExtractingUpdateStrategy"
      },
      {
        "subject": "datasource:DC_GCS",
        "object": "index-pipeline:DC_Large",
        "linkType": "dependsOn",
        "originator": "com.lucidworks.apollo.component.LinkExtractingUpdateStrategy"
      },
      {
        "subject": "datasource:DC_GCS",
        "object": "parser:DC_Large",
        "linkType": "dependsOn",
        "originator": "com.lucidworks.apollo.component.LinkExtractingUpdateStrategy"
      },
      {
        "subject": "datasource:DC_Large_Populate_Signals_DS",
        "object": "app:DC_Large",
        "linkType": "inContextOf",
        "originator": "unspecified"
      },
      {
        "subject": "datasource:DC_Large_Populate_Signals_DS",
        "object": "collection:DC_Large_Populate_Signals_DS_job_state",
        "linkType": "relatesTo",
        "originator": "com.lucidworks.apollo.component.LinkExtractingUpdateStrategy"
      },
      {
        "subject": "datasource:DC_Large_Populate_Signals_DS",
        "object": "collection:DC_Large_signals",
        "linkType": "relatesTo",
        "originator": "com.lucidworks.apollo.component.LinkExtractingUpdateStrategy"
      },
      {
        "subject": "datasource:DC_Large_Populate_Signals_DS",
        "object": "index-pipeline:_signals_ingest",
        "linkType": "dependsOn",
        "originator": "com.lucidworks.apollo.component.LinkExtractingUpdateStrategy"
      },
      {
        "subject": "datasource:DC_Large_Populate_Signals_DS",
        "object": "parser:DC_Large",
        "linkType": "dependsOn",
        "originator": "com.lucidworks.apollo.component.LinkExtractingUpdateStrategy"
      },
      {
        "subject": "datasource:DC_Large_TYPEAHEAD_inclusion_list",
        "object": "app:DC_Large",
        "linkType": "inContextOf",
        "originator": "unspecified"
      },
      {
        "subject": "datasource:DC_Large_TYPEAHEAD_inclusion_list",
        "object": "blob:TYPEAHEAD/Typeahead_inclusion_list.csv",
        "linkType": "dependsOn",
        "originator": "com.lucidworks.apollo.component.LinkExtractingUpdateStrategy"
      },
      {
        "subject": "datasource:DC_Large_TYPEAHEAD_inclusion_list",
        "object": "collection:DC_Large_TYPEAHEAD_v4",
        "linkType": "relatesTo",
        "originator": "com.lucidworks.apollo.component.LinkExtractingUpdateStrategy"
      },
      {
        "subject": "datasource:DC_Large_TYPEAHEAD_inclusion_list",
        "object": "index-pipeline:DC_Large_TYPEAHEAD_IPL_v4",
        "linkType": "dependsOn",
        "originator": "com.lucidworks.apollo.component.LinkExtractingUpdateStrategy"
      },
      {
        "subject": "datasource:DC_Large_TYPEAHEAD_inclusion_list",
        "object": "parser:_system",
        "linkType": "dependsOn",
        "originator": "com.lucidworks.apollo.component.LinkExtractingUpdateStrategy"
      },
      {
        "subject": "group:74cc606e-2e6d-4f47-8b19-07e819788d18",
        "object": "collection:DC_Large_TYPEAHEAD_v4",
        "linkType": "relatesTo",
        "originator": "unspecified"
      },
      {
        "subject": "group:74cc606e-2e6d-4f47-8b19-07e819788d18",
        "object": "collection:DC_Large_TYPEAHEAD_v4_signals",
        "linkType": "hasPart",
        "originator": "unspecified"
      },
      {
        "subject": "group:74cc606e-2e6d-4f47-8b19-07e819788d18",
        "object": "collection:DC_Large_TYPEAHEAD_v4_signals_aggr",
        "linkType": "hasPart",
        "originator": "unspecified"
      },
      {
        "subject": "group:74cc606e-2e6d-4f47-8b19-07e819788d18",
        "object": "spark:DC_Large_TYPEAHEAD_v4_click_signals_aggregation",
        "linkType": "hasPart",
        "originator": "unspecified"
      },
      {
        "subject": "group:74cc606e-2e6d-4f47-8b19-07e819788d18",
        "object": "spark:DC_Large_TYPEAHEAD_v4_head_tail",
        "linkType": "hasPart",
        "originator": "unspecified"
      },
      {
        "subject": "group:74cc606e-2e6d-4f47-8b19-07e819788d18",
        "object": "spark:DC_Large_TYPEAHEAD_v4_session_rollup",
        "linkType": "hasPart",
        "originator": "unspecified"
      },
      {
        "subject": "group:9e073be8-6a3c-4fda-9fe3-c642a1078779",
        "object": "collection:DC_Large",
        "linkType": "relatesTo",
        "originator": "unspecified"
      },
      {
        "subject": "group:9e073be8-6a3c-4fda-9fe3-c642a1078779",
        "object": "collection:DC_Large_signals",
        "linkType": "hasPart",
        "originator": "unspecified"
      },
      {
        "subject": "group:9e073be8-6a3c-4fda-9fe3-c642a1078779",
        "object": "collection:DC_Large_signals_aggr",
        "linkType": "hasPart",
        "originator": "unspecified"
      },
      {
        "subject": "group:9e073be8-6a3c-4fda-9fe3-c642a1078779",
        "object": "collection:DW_Large_signals",
        "linkType": "hasPart",
        "originator": "unspecified"
      },
      {
        "subject": "group:9e073be8-6a3c-4fda-9fe3-c642a1078779",
        "object": "collection:DW_Large_signals_aggr",
        "linkType": "hasPart",
        "originator": "unspecified"
      },
      {
        "subject": "group:9e073be8-6a3c-4fda-9fe3-c642a1078779",
        "object": "spark:DW_Large_click_signals_aggregation",
        "linkType": "hasPart",
        "originator": "unspecified"
      },
      {
        "subject": "group:9e073be8-6a3c-4fda-9fe3-c642a1078779",
        "object": "spark:DW_Large_head_tail",
        "linkType": "hasPart",
        "originator": "unspecified"
      },
      {
        "subject": "group:9e073be8-6a3c-4fda-9fe3-c642a1078779",
        "object": "spark:DW_Large_session_rollup",
        "linkType": "hasPart",
        "originator": "unspecified"
      },
      {
        "subject": "group:9e073be8-6a3c-4fda-9fe3-c642a1078779",
        "object": "spark:DW_Large_user_item_preferences_aggregation",
        "linkType": "hasPart",
        "originator": "unspecified"
      },
      {
        "subject": "group:9e073be8-6a3c-4fda-9fe3-c642a1078779",
        "object": "spark:DW_Large_user_query_history_aggregation",
        "linkType": "hasPart",
        "originator": "unspecified"
      },
      {
        "subject": "index-pipeline:DC_Large",
        "object": "app:DC_Large",
        "linkType": "inContextOf",
        "originator": "unspecified"
      },
      {
        "subject": "index-pipeline:DC_Large-question-answering",
        "object": "app:DC_Large",
        "linkType": "inContextOf",
        "originator": "unspecified"
      },
      {
        "subject": "index-pipeline:DC_Large-question-answering-dual-fields",
        "object": "app:DC_Large",
        "linkType": "inContextOf",
        "originator": "unspecified"
      },
      {
        "subject": "index-pipeline:DC_Large_TYPEAHEAD_IPL_v4",
        "object": "app:DC_Large",
        "linkType": "inContextOf",
        "originator": "unspecified"
      },
      {
        "subject": "index-pipeline:DC_Large_products",
        "object": "app:DC_Large",
        "linkType": "inContextOf",
        "originator": "unspecified"
      },
      {
        "subject": "index-pipeline:DC_Large_query_rewrite_staging",
        "object": "app:DC_Large",
        "linkType": "inContextOf",
        "originator": "unspecified"
      },
      {
        "subject": "index-pipeline:RECENCY_stub",
        "object": "app:DC_Large",
        "linkType": "inContextOf",
        "originator": "unspecified"
      },
      {
        "subject": "index-pipeline:RESPONSE_TA_purge_unwanted_terms_JOB",
        "object": "app:DC_Large",
        "linkType": "inContextOf",
        "originator": "unspecified"
      },
      {
        "subject": "index-pipeline:_signals_ingest",
        "object": "app:DC_Large",
        "linkType": "inContextOf",
        "originator": "unspecified"
      },
      {
        "subject": "index-profile:DC_Large",
        "object": "app:DC_Large",
        "linkType": "inContextOf",
        "originator": "unspecified"
      },
      {
        "subject": "index-profile:DC_Large",
        "object": "collection:DC_Large",
        "linkType": "relatesTo",
        "originator": "com.lucidworks.apollo.component.LinkExtractingUpdateStrategy"
      },
      {
        "subject": "index-profile:DC_Large",
        "object": "index-pipeline:DC_Large",
        "linkType": "relatesTo",
        "originator": "com.lucidworks.apollo.component.LinkExtractingUpdateStrategy"
      },
      {
        "subject": "parser:DC_Large",
        "object": "app:DC_Large",
        "linkType": "inContextOf",
        "originator": "unspecified"
      },
      {
        "subject": "query-pipeline:DC_Large",
        "object": "app:DC_Large",
        "linkType": "inContextOf",
        "originator": "unspecified"
      },
      {
        "subject": "query-pipeline:DC_Large-question-answering",
        "object": "app:DC_Large",
        "linkType": "inContextOf",
        "originator": "unspecified"
      },
      {
        "subject": "query-pipeline:DC_Large-question-answering-dual-fields",
        "object": "app:DC_Large",
        "linkType": "inContextOf",
        "originator": "unspecified"
      },
      {
        "subject": "query-pipeline:DC_Large_TYPEAHEAD_QPL_v4",
        "object": "app:DC_Large",
        "linkType": "inContextOf",
        "originator": "unspecified"
      },
      {
        "subject": "query-pipeline:JSON_Facets_Rules_DC",
        "object": "app:DC_Large",
        "linkType": "inContextOf",
        "originator": "unspecified"
      },
      {
        "subject": "query-pipeline:RECENCY-stub",
        "object": "app:DC_Large",
        "linkType": "inContextOf",
        "originator": "unspecified"
      },
      {
        "subject": "query-pipeline:SOLR_SPELL_zeroCheck",
        "object": "app:DC_Large",
        "linkType": "inContextOf",
        "originator": "unspecified"
      },
      {
        "subject": "query-pipeline:TAXO_QPL",
        "object": "app:DC_Large",
        "linkType": "inContextOf",
        "originator": "unspecified"
      },
      {
        "subject": "query-profile:DC_Large",
        "object": "app:DC_Large",
        "linkType": "inContextOf",
        "originator": "unspecified"
      },
      {
        "subject": "query-profile:DC_Large",
        "object": "collection:DC_Large",
        "linkType": "relatesTo",
        "originator": "com.lucidworks.apollo.component.LinkExtractingUpdateStrategy"
      },
      {
        "subject": "query-profile:DC_Large",
        "object": "query-pipeline:DC_Large",
        "linkType": "relatesTo",
        "originator": "com.lucidworks.apollo.component.LinkExtractingUpdateStrategy"
      },
      {
        "subject": "query-profile:DC_Large_TYPEAHEAD_QPF_v4",
        "object": "app:DC_Large",
        "linkType": "inContextOf",
        "originator": "unspecified"
      },
      {
        "subject": "query-profile:DC_Large_TYPEAHEAD_QPF_v4",
        "object": "collection:DC_Large_TYPEAHEAD_v4",
        "linkType": "relatesTo",
        "originator": "com.lucidworks.apollo.component.LinkExtractingUpdateStrategy"
      },
      {
        "subject": "query-profile:DC_Large_TYPEAHEAD_QPF_v4",
        "object": "query-pipeline:DC_Large_TYPEAHEAD_QPL_v4",
        "linkType": "relatesTo",
        "originator": "com.lucidworks.apollo.component.LinkExtractingUpdateStrategy"
      },
      {
        "subject": "query-profile:DC_Large_TYPEAHEAD_catalog_QPF_v4",
        "object": "app:DC_Large",
        "linkType": "inContextOf",
        "originator": "unspecified"
      },
      {
        "subject": "query-profile:DC_Large_TYPEAHEAD_catalog_QPF_v4",
        "object": "collection:DC_Large_TYPEAHEAD_v4",
        "linkType": "relatesTo",
        "originator": "com.lucidworks.apollo.component.LinkExtractingUpdateStrategy"
      },
      {
        "subject": "query-profile:DC_Large_TYPEAHEAD_catalog_QPF_v4",
        "object": "query-pipeline:DC_Large_TYPEAHEAD_QPL_v4",
        "linkType": "relatesTo",
        "originator": "com.lucidworks.apollo.component.LinkExtractingUpdateStrategy"
      },
      {
        "subject": "query-profile:DC_Large_TYPEAHEAD_entity_QPF_v4",
        "object": "app:DC_Large",
        "linkType": "inContextOf",
        "originator": "unspecified"
      },
      {
        "subject": "query-profile:DC_Large_TYPEAHEAD_entity_QPF_v4",
        "object": "collection:DC_Large_TYPEAHEAD_v4",
        "linkType": "relatesTo",
        "originator": "com.lucidworks.apollo.component.LinkExtractingUpdateStrategy"
      },
      {
        "subject": "query-profile:DC_Large_TYPEAHEAD_entity_QPF_v4",
        "object": "query-pipeline:DC_Large_TYPEAHEAD_QPL_v4",
        "linkType": "relatesTo",
        "originator": "com.lucidworks.apollo.component.LinkExtractingUpdateStrategy"
      },
      {
        "subject": "query-profile:DC_Large_TYPEAHEAD_history_QPF_v4",
        "object": "app:DC_Large",
        "linkType": "inContextOf",
        "originator": "unspecified"
      },
      {
        "subject": "query-profile:DC_Large_TYPEAHEAD_history_QPF_v4",
        "object": "collection:DC_Large_TYPEAHEAD_v4",
        "linkType": "relatesTo",
        "originator": "com.lucidworks.apollo.component.LinkExtractingUpdateStrategy"
      },
      {
        "subject": "query-profile:DC_Large_TYPEAHEAD_history_QPF_v4",
        "object": "query-pipeline:DC_Large_TYPEAHEAD_QPL_v4",
        "linkType": "relatesTo",
        "originator": "com.lucidworks.apollo.component.LinkExtractingUpdateStrategy"
      },
      {
        "subject": "query-profile:DC_Large_rules_simulator",
        "object": "app:DC_Large",
        "linkType": "inContextOf",
        "originator": "unspecified"
      },
      {
        "subject": "query-profile:DC_Large_rules_simulator",
        "object": "collection:DC_Large",
        "linkType": "relatesTo",
        "originator": "com.lucidworks.apollo.component.LinkExtractingUpdateStrategy"
      },
      {
        "subject": "query-profile:DC_Large_rules_simulator",
        "object": "query-pipeline:DC_Large",
        "linkType": "relatesTo",
        "originator": "com.lucidworks.apollo.component.LinkExtractingUpdateStrategy"
      },
      {
        "subject": "spark:DC_Large_ALS_grid_item_recommendations",
        "object": "app:DC_Large",
        "linkType": "inContextOf",
        "originator": "unspecified"
      },
      {
        "subject": "spark:DC_Large_ALS_item_recommendations",
        "object": "app:DC_Large",
        "linkType": "inContextOf",
        "originator": "unspecified"
      },
      {
        "subject": "spark:DC_Large_ALS_run_1_item_recommendations",
        "object": "app:DC_Large",
        "linkType": "inContextOf",
        "originator": "unspecified"
      },
      {
        "subject": "spark:DC_Large_ALS_run_2_item_recommendations",
        "object": "app:DC_Large",
        "linkType": "inContextOf",
        "originator": "unspecified"
      },
      {
        "subject": "spark:DC_Large_ALS_user_item_preferences_aggregation",
        "object": "app:DC_Large",
        "linkType": "inContextOf",
        "originator": "unspecified"
      },
      {
        "subject": "spark:DC_Large_QR_HEAD_TAIL",
        "object": "app:DC_Large",
        "linkType": "inContextOf",
        "originator": "unspecified"
      },
      {
        "subject": "spark:DC_Large_QR_MISSPELLING_DETECTION",
        "object": "app:DC_Large",
        "linkType": "inContextOf",
        "originator": "unspecified"
      },
      {
        "subject": "spark:DC_Large_QR_PHRASE_DETECTION",
        "object": "app:DC_Large",
        "linkType": "inContextOf",
        "originator": "unspecified"
      },
      {
        "subject": "spark:DC_Large_QR_SYNONYM_DETECTION",
        "object": "app:DC_Large",
        "linkType": "inContextOf",
        "originator": "unspecified"
      },
      {
        "subject": "spark:DC_Large_QR_SYNONYM_DETECTION",
        "object": "blob:ecom_keywords.csv",
        "linkType": "dependsOn",
        "originator": "com.lucidworks.apollo.component.LinkExtractingUpdateStrategy"
      },
      {
        "subject": "spark:DC_Large_TYPEAHEAD_clicks_load_v4",
        "object": "app:DC_Large",
        "linkType": "inContextOf",
        "originator": "unspecified"
      },
      {
        "subject": "spark:DC_Large_TYPEAHEAD_entity_load_v4",
        "object": "app:DC_Large",
        "linkType": "inContextOf",
        "originator": "unspecified"
      },
      {
        "subject": "spark:DC_Large_TYPEAHEAD_v4_click_signals_aggregation",
        "object": "app:DC_Large",
        "linkType": "inContextOf",
        "originator": "unspecified"
      },
      {
        "subject": "spark:DC_Large_TYPEAHEAD_v4_head_tail",
        "object": "app:DC_Large",
        "linkType": "inContextOf",
        "originator": "unspecified"
      },
      {
        "subject": "spark:DC_Large_TYPEAHEAD_v4_session_rollup",
        "object": "app:DC_Large",
        "linkType": "inContextOf",
        "originator": "unspecified"
      },
      {
        "subject": "spark:DC_Large_phrase_extraction",
        "object": "app:DC_Large",
        "linkType": "inContextOf",
        "originator": "unspecified"
      },
      {
        "subject": "spark:DC_Large_spell_correction",
        "object": "app:DC_Large",
        "linkType": "inContextOf",
        "originator": "unspecified"
      },
      {
        "subject": "spark:DC_Large_synonym_detection",
        "object": "app:DC_Large",
        "linkType": "inContextOf",
        "originator": "unspecified"
      },
      {
        "subject": "spark:DC_Large_synonym_detection",
        "object": "blob:custom_synonyms.txt",
        "linkType": "dependsOn",
        "originator": "com.lucidworks.apollo.component.LinkExtractingUpdateStrategy"
      },
      {
        "subject": "spark:DW_Large_click_signals_aggregation",
        "object": "app:DC_Large",
        "linkType": "inContextOf",
        "originator": "unspecified"
      },
      {
        "subject": "spark:DW_Large_head_tail",
        "object": "app:DC_Large",
        "linkType": "inContextOf",
        "originator": "unspecified"
      },
      {
        "subject": "spark:DW_Large_session_rollup",
        "object": "app:DC_Large",
        "linkType": "inContextOf",
        "originator": "unspecified"
      },
      {
        "subject": "spark:DW_Large_user_item_preferences_aggregation",
        "object": "app:DC_Large",
        "linkType": "inContextOf",
        "originator": "unspecified"
      },
      {
        "subject": "spark:DW_Large_user_query_history_aggregation",
        "object": "app:DC_Large",
        "linkType": "inContextOf",
        "originator": "unspecified"
      },
      {
        "subject": "spark:GCS_PBL_V2",
        "object": "app:DC_Large",
        "linkType": "inContextOf",
        "originator": "unspecified"
      },
      {
        "subject": "spark:RESPONSE_TA_Extract_Typeahead",
        "object": "app:DC_Large",
        "linkType": "inContextOf",
        "originator": "unspecified"
      },
      {
        "subject": "spark:RESPONSE_TA_Extract_clicked",
        "object": "app:DC_Large",
        "linkType": "inContextOf",
        "originator": "unspecified"
      },
      {
        "subject": "spark:auto_deny_or_approve_rewrite_detections",
        "object": "app:DC_Large",
        "linkType": "inContextOf",
        "originator": "unspecified"
      },
      {
        "subject": "task:DC_Large_QR_DELETE_LOW_CONFIDENCE_MISSPELLINGS",
        "object": "app:DC_Large",
        "linkType": "inContextOf",
        "originator": "unspecified"
      },
      {
        "subject": "task:DC_Large_QR_DELETE_LOW_CONFIDENCE_MISSPELLINGS",
        "object": "spark:DC_Large_spell_correction",
        "linkType": "dependsOn",
        "originator": "unspecified"
      },
      {
        "subject": "task:DC_Large_QR_DELETE_LOW_CONFIDENCE_PHRASES",
        "object": "app:DC_Large",
        "linkType": "inContextOf",
        "originator": "unspecified"
      },
      {
        "subject": "task:DC_Large_QR_DELETE_LOW_CONFIDENCE_PHRASES",
        "object": "spark:DC_Large_phrase_extraction",
        "linkType": "dependsOn",
        "originator": "unspecified"
      },
      {
        "subject": "task:DC_Large_QR_DELETE_LOW_CONFIDENCE_SYNONYMS",
        "object": "app:DC_Large",
        "linkType": "inContextOf",
        "originator": "unspecified"
      },
      {
        "subject": "task:DC_Large_QR_DELETE_LOW_CONFIDENCE_SYNONYMS",
        "object": "spark:DC_Large_synonym_detection",
        "linkType": "dependsOn",
        "originator": "unspecified"
      },
      {
        "subject": "task:DC_Large_QR_DELETE_MISSPELLINGS",
        "object": "app:DC_Large",
        "linkType": "inContextOf",
        "originator": "unspecified"
      },
      {
        "subject": "task:DC_Large_QR_DELETE_PHRASES",
        "object": "app:DC_Large",
        "linkType": "inContextOf",
        "originator": "unspecified"
      },
      {
        "subject": "task:DC_Large_QR_DELETE_SYNONYMS",
        "object": "app:DC_Large",
        "linkType": "inContextOf",
        "originator": "unspecified"
      },
      {
        "subject": "task:DC_Large_QR_DELETE_TAILS",
        "object": "app:DC_Large",
        "linkType": "inContextOf",
        "originator": "unspecified"
      },
      {
        "subject": "task:DC_Large_QR_HEAD_TAIL_CLEANUP",
        "object": "app:DC_Large",
        "linkType": "inContextOf",
        "originator": "unspecified"
      },
      {
        "subject": "task:DC_Large_TYPEAHEAD_clicks_cull_v4",
        "object": "app:DC_Large",
        "linkType": "inContextOf",
        "originator": "unspecified"
      },
      {
        "subject": "task:RESPONSE_TA_purge_unwanted_terms",
        "object": "app:DC_Large",
        "linkType": "inContextOf",
        "originator": "unspecified"
      },
      {
        "subject": "template:31c75f72-7717-44a3-b041-38522654cf88",
        "object": "app:DC_Large",
        "linkType": "isPartOf",
        "originator": "com.lucidworks.apollo.component.LinkExtractingUpdateStrategy"
      },
      {
        "subject": "template:31c75f72-7717-44a3-b041-38522654cf88",
        "object": "zone:4722cbc2-7b8e-47c4-87b8-5a5218d12316",
        "linkType": "hasPart",
        "originator": "com.lucidworks.apollo.component.LinkExtractingUpdateStrategy"
      },
      {
        "subject": "template:31c75f72-7717-44a3-b041-38522654cf88",
        "object": "zone:d7d98745-2a56-47f3-88c0-2312ddf558db",
        "linkType": "hasPart",
        "originator": "com.lucidworks.apollo.component.LinkExtractingUpdateStrategy"
      },
      {
        "subject": "template:c2a7c469-b0ff-43ae-a3d9-e44c0c2b35b2",
        "object": "app:DC_Large",
        "linkType": "isPartOf",
        "originator": "com.lucidworks.apollo.component.LinkExtractingUpdateStrategy"
      },
      {
        "subject": "template:c2a7c469-b0ff-43ae-a3d9-e44c0c2b35b2",
        "object": "zone:66fbb647-31ff-4c7e-be47-00484df7e9ee",
        "linkType": "hasPart",
        "originator": "com.lucidworks.apollo.component.LinkExtractingUpdateStrategy"
      },
      {
        "subject": "template:d44b451d-6d4e-42aa-aa09-03da102c5447",
        "object": "app:DC_Large",
        "linkType": "isPartOf",
        "originator": "com.lucidworks.apollo.component.LinkExtractingUpdateStrategy"
      },
      {
        "subject": "template:d44b451d-6d4e-42aa-aa09-03da102c5447",
        "object": "zone:079566b9-c38b-4c24-8715-d0f5ead8e34f",
        "linkType": "hasPart",
        "originator": "com.lucidworks.apollo.component.LinkExtractingUpdateStrategy"
      },
      {
        "subject": "template:pub-31c75f72-7717-44a3-b041-38522654cf88",
        "object": "app:DC_Large",
        "linkType": "isPartOf",
        "originator": "com.lucidworks.apollo.component.LinkExtractingUpdateStrategy"
      },
      {
        "subject": "template:pub-31c75f72-7717-44a3-b041-38522654cf88",
        "object": "zone:pub-4722cbc2-7b8e-47c4-87b8-5a5218d12316",
        "linkType": "hasPart",
        "originator": "com.lucidworks.apollo.component.LinkExtractingUpdateStrategy"
      },
      {
        "subject": "template:pub-31c75f72-7717-44a3-b041-38522654cf88",
        "object": "zone:pub-d7d98745-2a56-47f3-88c0-2312ddf558db",
        "linkType": "hasPart",
        "originator": "com.lucidworks.apollo.component.LinkExtractingUpdateStrategy"
      }
    ],
    "tasks": [
      {
        "type": "rest-call",
        "id": "DC_Large_QR_DELETE_LOW_CONFIDENCE_MISSPELLINGS",
        "callParams": {
          "uri": "solr://DC_Large_query_rewrite_staging/update",
          "method": "post",
          "queryParams": {
            "wt": "json"
          },
          "headers": {},
          "entity": "<root><delete><query>type:spell AND confidence:[0 TO 0.5]</query></delete><commit/></root>"
        },
        "type": "rest-call",
        "type": "rest-call",
        "updates": [
          {
            "userId": "ashumway",
            "timestamp": "2022-02-08T18:38:16.879Z"
          },
          {
            "userId": "ashumway",
            "timestamp": "2022-02-08T18:38:16.886Z"
          }
        ]
      },
      {
        "type": "rest-call",
        "id": "DC_Large_QR_DELETE_LOW_CONFIDENCE_PHRASES",
        "callParams": {
          "uri": "solr://DC_Large_query_rewrite_staging/update",
          "method": "post",
          "queryParams": {
            "wt": "json"
          },
          "headers": {},
          "entity": " <root><delete><query>type:phrase AND confidence:[0 TO <INSERT VALUE HERE>]</query></delete><commit/></root>"
        },
        "type": "rest-call",
        "type": "rest-call",
        "updates": [
          {
            "userId": "ashumway",
            "timestamp": "2022-02-08T18:38:15.094Z"
          },
          {
            "userId": "ashumway",
            "timestamp": "2022-02-08T18:38:15.102Z"
          }
        ]
      },
      {
        "type": "rest-call",
        "id": "DC_Large_QR_DELETE_LOW_CONFIDENCE_SYNONYMS",
        "callParams": {
          "uri": "solr://DC_Large_query_rewrite_staging/update",
          "method": "post",
          "queryParams": {
            "wt": "json"
          },
          "headers": {},
          "entity": "<root><delete><query>type:synonym AND confidence:[0 TO 0.0005]</query></delete><commit/></root>"
        },
        "type": "rest-call",
        "type": "rest-call",
        "updates": [
          {
            "userId": "ashumway",
            "timestamp": "2022-02-08T18:38:12.087Z"
          },
          {
            "userId": "ashumway",
            "timestamp": "2022-02-08T18:38:12.093Z"
          }
        ]
      },
      {
        "type": "rest-call",
        "id": "DC_Large_QR_DELETE_MISSPELLINGS",
        "callParams": {
          "uri": "solr://DC_Large_query_rewrite_staging/update",
          "method": "post",
          "queryParams": {
            "wt": "json"
          },
          "headers": {},
          "entity": "<root><delete><query>type:spell</query></delete><commit/></root>"
        },
        "type": "rest-call",
        "type": "rest-call",
        "updates": [
          {
            "userId": "ashumway",
            "timestamp": "2022-02-08T18:38:12.672Z"
          },
          {
            "userId": "ashumway",
            "timestamp": "2022-02-08T18:38:12.680Z"
          }
        ]
      },
      {
        "type": "rest-call",
        "id": "DC_Large_QR_DELETE_PHRASES",
        "callParams": {
          "uri": "solr://DC_Large_query_rewrite_staging/update",
          "method": "post",
          "queryParams": {
            "wt": "json"
          },
          "headers": {},
          "entity": " <root><delete><query>type:phrase</query></delete><commit/></root>"
        },
        "type": "rest-call",
        "type": "rest-call",
        "updates": [
          {
            "userId": "ashumway",
            "timestamp": "2022-02-08T18:38:16.317Z"
          },
          {
            "userId": "ashumway",
            "timestamp": "2022-02-08T18:38:16.323Z"
          }
        ]
      },
      {
        "type": "rest-call",
        "id": "DC_Large_QR_DELETE_SYNONYMS",
        "callParams": {
          "uri": "solr://DC_Large_query_rewrite_staging/update",
          "method": "post",
          "queryParams": {
            "wt": "json"
          },
          "headers": {},
          "entity": "<root><delete><query>type:synonym</query></delete><commit/></root>"
        },
        "type": "rest-call",
        "type": "rest-call",
        "updates": [
          {
            "userId": "ashumway",
            "timestamp": "2022-02-08T18:38:15.716Z"
          },
          {
            "userId": "ashumway",
            "timestamp": "2022-02-08T18:38:15.723Z"
          }
        ]
      },
      {
        "type": "rest-call",
        "id": "DC_Large_QR_DELETE_TAILS",
        "callParams": {
          "uri": "solr://DC_Large_query_rewrite_staging/update",
          "method": "post",
          "queryParams": {
            "wt": "json"
          },
          "headers": {},
          "entity": "<root><delete><query>type:tail</query></delete><commit/></root>"
        },
        "type": "rest-call",
        "type": "rest-call",
        "updates": [
          {
            "userId": "ashumway",
            "timestamp": "2022-02-08T18:38:13.776Z"
          },
          {
            "userId": "ashumway",
            "timestamp": "2022-02-08T18:38:13.783Z"
          }
        ]
      },
      {
        "type": "rest-call",
        "id": "DC_Large_QR_HEAD_TAIL_CLEANUP",
        "callParams": {
          "uri": "solr://DC_Large_query_rewrite_staging/update",
          "method": "post",
          "queryParams": {
            "wt": "json"
          },
          "headers": {},
          "entity": "<root><delete>\n<query>reason_code_s:(\"number\" \"number spelling\" \"number rare-term\" \"question number other-specific\" \"number others\" \"number other-specific\" \"number other-extra\" \"product number other-specific\" \"product number other-extra\" \"product number spelling\" \"product number others\" \"product number rare-term\" \"product question number\" \"product number re-wording\" \"question number other-extra\" \"number re-wording\")</query>\n</delete><commit/></root>"
        },
        "type": "rest-call",
        "type": "rest-call",
        "updates": [
          {
            "userId": "admin",
            "timestamp": "2021-04-20T14:37:43.349Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-04-20T14:37:43.372Z"
          },
          {
            "userId": "ashumway",
            "timestamp": "2022-02-08T18:38:17.521Z"
          },
          {
            "userId": "ashumway",
            "timestamp": "2022-02-08T18:38:17.528Z"
          }
        ]
      },
      {
        "type": "rest-call",
        "id": "DC_Large_TYPEAHEAD_clicks_cull_v4",
        "callParams": {
          "uri": "solr://DC_Large_TYPEAHEAD_v4/update",
          "method": "post",
          "queryParams": {},
          "headers": {},
          "entity": "<root><delete><query>ta_type:history AND (last_updated_tdt:[* TO NOW-10MINUTES] OR (*:* AND -last_updated_tdt:[* TO *]))</query></delete><commit/></root>"
        },
        "type": "rest-call",
        "type": "rest-call",
        "updates": [
          {
            "userId": "admin",
            "timestamp": "2021-03-31T03:08:37.117Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-03-31T03:14:26.960Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-03-31T03:14:26.966Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-03-31T03:14:58.952Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-03-31T03:14:58.957Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-03-31T16:13:01.630Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-03-31T16:13:01.656Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-03-31T17:49:40.064Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-03-31T17:49:40.068Z"
          },
          {
            "userId": "ashumway",
            "timestamp": "2022-02-08T18:38:14.373Z"
          },
          {
            "userId": "ashumway",
            "timestamp": "2022-02-08T18:38:14.380Z"
          }
        ]
      },
      {
        "type": "rest-call",
        "id": "RESPONSE_TA_purge_unwanted_terms",
        "callParams": {
          "uri": "extservice://indexing/api/v1/index-pipelines/RESPONSE_TA_purge_unwanted_terms_JOB/collections/RESPONSE_TA/index?foo=bar&smoo=far",
          "method": "post",
          "queryParams": {
            "blob_id": "RESPONSE_TA/full-list-of-bad-words_csv-file_2018_07_30.csv"
          },
          "headers": {
            "content_type": "application/json"
          },
          "entity": "{}"
        },
        "type": "rest-call",
        "type": "rest-call",
        "updates": [
          {
            "userId": "admin",
            "timestamp": "2020-12-16T16:20:45.163Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-01-04T17:40:05.030Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-01-04T17:40:05.036Z"
          },
          {
            "userId": "ashumway",
            "timestamp": "2022-02-08T18:38:13.199Z"
          },
          {
            "userId": "ashumway",
            "timestamp": "2022-02-08T18:38:13.206Z"
          }
        ]
      }
    ],
    "jobs": [
      {
        "resource": "spark:DC_Large_QR_HEAD_TAIL",
        "enabled": true,
        "triggers": [
          {
            "type": "interval",
            "enabled": true,
            "interval": 1,
            "timeUnit": "week",
            "startTime": "2021-12-09T07:15:00.000Z",
            "type": "interval"
          }
        ],
        "default": false
      },
      {
        "resource": "spark:DC_Large_phrase_extraction",
        "enabled": true,
        "triggers": [
          {
            "type": "interval",
            "enabled": true,
            "interval": 1,
            "timeUnit": "day",
            "type": "interval"
          }
        ],
        "default": false
      },
      {
        "resource": "task:DC_Large_QR_DELETE_LOW_CONFIDENCE_MISSPELLINGS",
        "enabled": true,
        "triggers": [
          {
            "type": "job_completion",
            "enabled": true,
            "triggerType": "on_success",
            "otherJob": "spark:DC_Large_spell_correction",
            "type": "job_completion"
          }
        ],
        "default": false
      },
      {
        "resource": "task:DC_Large_QR_DELETE_LOW_CONFIDENCE_PHRASES",
        "enabled": true,
        "triggers": [
          {
            "type": "job_completion",
            "enabled": true,
            "triggerType": "on_success_or_failure",
            "otherJob": "spark:DC_Large_phrase_extraction",
            "type": "job_completion"
          }
        ],
        "default": false
      },
      {
        "resource": "task:DC_Large_QR_DELETE_LOW_CONFIDENCE_SYNONYMS",
        "enabled": true,
        "triggers": [
          {
            "type": "job_completion",
            "enabled": true,
            "triggerType": "on_success",
            "otherJob": "spark:DC_Large_synonym_detection",
            "type": "job_completion"
          }
        ],
        "default": false
      }
    ],
    "sparkJobs": [
      {
        "id": "DC_Large_ALS_grid_item_recommendations",
        "trainingDataFilterQuery": "*:*",
        "modelId": "DC_Large_ALS_grid_recommender",
        "popularItemMin": 1,
        "itemIdField": "item_id_s",
        "implicitRatings": true,
        "type": "als_recommender",
        "updates": [
          {
            "userId": "admin",
            "timestamp": "2022-02-08T18:38:23.380Z"
          },
          {
            "userId": "admin",
            "timestamp": "2022-02-08T18:38:23.385Z"
          }
        ],
        "outputCollection": "DC_Large_ALS_grid_items_for_user_recommendations",
        "initialLambda": 0.001,
        "sparkConfig": [],
        "alwaysTrain": true,
        "maxTrainingIterations": 10,
        "initialRank": 100,
        "saveModel": false,
        "outputUserRecsCollection": "",
        "initialAlpha": 25.0,
        "numSims": 20,
        "itemMetadataFields": [],
        "weightField": "weight_d",
        "initialBlocks": -1,
        "writeOptions": [],
        "itemMetadataJoinField": "item_id_s",
        "trainingDataFrameConfigOptions": {},
        "gridSearchWidth": 1,
        "dataFormat": "solr",
        "deleteOldRecs": true,
        "randomSeed": 13,
        "numRecs": 20,
        "userIdField": "user_id_s",
        "trainingCollection": "DC_Large_user_prefs",
        "numUserRecsPerItem": 10,
        "trainingSampleFraction": 1.0,
        "outputItemSimCollection": "DC_Large_ALS_grid_items_for_item_recommendations"
      },
      {
        "id": "DC_Large_ALS_item_recommendations",
        "trainingDataFilterQuery": "*:*",
        "modelId": "DC_Large_ALS_recommender",
        "popularItemMin": 10,
        "itemIdField": "item_id_s",
        "implicitRatings": true,
        "type": "als_recommender",
        "updates": [
          {
            "userId": "David.Im@lucidworks.com",
            "timestamp": "2022-02-08T18:38:22.120Z"
          },
          {
            "userId": "David.Im@lucidworks.com",
            "timestamp": "2022-02-08T18:38:22.128Z"
          }
        ],
        "outputCollection": "DC_Large_ALS_items_for_user_recommendations",
        "initialLambda": 0.01,
        "sparkConfig": [],
        "alwaysTrain": true,
        "maxTrainingIterations": 10,
        "initialRank": 100,
        "saveModel": false,
        "initialAlpha": 50.0,
        "numSims": 20,
        "itemMetadataFields": [],
        "weightField": "weight_d",
        "initialBlocks": -1,
        "writeOptions": [],
        "itemMetadataJoinField": "item_id_s",
        "trainingDataFrameConfigOptions": {},
        "gridSearchWidth": 0,
        "dataFormat": "solr",
        "deleteOldRecs": true,
        "randomSeed": 13,
        "numRecs": 20,
        "userIdField": "user_id_s",
        "trainingCollection": "DC_Large_user_prefs",
        "numUserRecsPerItem": 10,
        "trainingSampleFraction": 1.0,
        "outputItemSimCollection": "DC_Large_ALS_items_for_item_recommendations"
      },
      {
        "id": "DC_Large_ALS_run_1_item_recommendations",
        "trainingDataFilterQuery": "*:*",
        "modelId": "DC_Large_ALS_run_1_recommender",
        "popularItemMin": 5,
        "itemIdField": "item_id_s",
        "implicitRatings": true,
        "type": "als_recommender",
        "updates": [
          {
            "userId": "David.Im@lucidworks.com",
            "timestamp": "2022-02-08T18:38:23.981Z"
          },
          {
            "userId": "David.Im@lucidworks.com",
            "timestamp": "2022-02-08T18:38:23.987Z"
          }
        ],
        "outputCollection": "DC_Large_ALS_run_1_items_for_user_recommendations",
        "initialLambda": 0.01,
        "sparkConfig": [],
        "alwaysTrain": true,
        "maxTrainingIterations": 10,
        "initialRank": 100,
        "saveModel": false,
        "initialAlpha": 50.0,
        "numSims": 20,
        "itemMetadataFields": [],
        "weightField": "weight_d",
        "initialBlocks": -1,
        "writeOptions": [],
        "itemMetadataJoinField": "item_id_s",
        "trainingDataFrameConfigOptions": {},
        "gridSearchWidth": 0,
        "dataFormat": "solr",
        "deleteOldRecs": true,
        "randomSeed": 13,
        "numRecs": 20,
        "userIdField": "user_id_s",
        "trainingCollection": "DC_Large_user_prefs",
        "numUserRecsPerItem": 10,
        "trainingSampleFraction": 1.0,
        "outputItemSimCollection": "DC_Large_ALS_run_1_items_for_item_recommendations"
      },
      {
        "id": "DC_Large_ALS_run_2_item_recommendations",
        "trainingDataFilterQuery": "*:*",
        "modelId": "DC_Large_ALS_run_2_recommender",
        "popularItemMin": 10,
        "itemIdField": "item_id_s",
        "implicitRatings": true,
        "type": "als_recommender",
        "updates": [
          {
            "userId": "admin",
            "timestamp": "2022-02-08T18:38:26.963Z"
          },
          {
            "userId": "admin",
            "timestamp": "2022-02-08T18:38:26.969Z"
          }
        ],
        "outputCollection": "DC_Large_ALS_run_2_items_for_user_recommendations",
        "initialLambda": 0.01,
        "sparkConfig": [],
        "alwaysTrain": true,
        "maxTrainingIterations": 10,
        "initialRank": 100,
        "saveModel": false,
        "initialAlpha": 50.0,
        "numSims": 20,
        "itemMetadataFields": [],
        "weightField": "weight_d",
        "initialBlocks": -1,
        "writeOptions": [],
        "itemMetadataJoinField": "item_id_s",
        "trainingDataFrameConfigOptions": {},
        "gridSearchWidth": 0,
        "dataFormat": "solr",
        "deleteOldRecs": true,
        "randomSeed": 13,
        "numRecs": 20,
        "userIdField": "user_id_s",
        "trainingCollection": "DC_Large_user_prefs",
        "numUserRecsPerItem": 10,
        "trainingSampleFraction": 1.0,
        "outputItemSimCollection": "DC_Large_ALS_run_2_items_for_item_recommendations"
      },
      {
        "id": "DC_Large_ALS_user_item_preferences_aggregation",
        "hiddenParameters": [
          {
            "key": "signalTypes",
            "value": "_regex/signalTypeWeights/([\\w\\-\\.]*):([\\d\\.\\-]*)(,|$)/'$1'$3/g"
          }
        ],
        "notes": "Computes an aggregated weight for each user / item combination found in the signals collection. The weight for each group is computed using an exponential time-decay on signal count (30 day half-life) and a weighted sum based on the signal type. Use the 'signalTypeWeights' parameter to set the correct signal types and weights for your dataset. The results of this job can be used as input to the ALS recommendation job.",
        "sourceRemove": false,
        "dataFormat": "solr",
        "optimizeSegments": 0,
        "type": "sql_template",
        "updates": [
          {
            "userId": "admin",
            "timestamp": "2022-02-08T18:38:28.772Z"
          },
          {
            "userId": "admin",
            "timestamp": "2022-02-08T18:38:28.779Z"
          }
        ],
        "outputCollection": "DC_Large_signals_aggr",
        "sparkPartitions": 200,
        "sparkSQL": "SELECT * from spark_input",
        "sql": "WITH signal_type_groups AS (\n    SELECT SUM(count_i) AS typed_aggr_count_i,\n           doc_id,\n           user_id,\n           type,\n           time_decay(count_i, timestamp_tdt, \"90 days\", ref_time, weight_d) AS typed_weight_d\n      FROM ${inputCollection}\n     WHERE type IN (${signalTypes})\n  GROUP BY user_id, doc_id, type\n ) SELECT SUM(typed_aggr_count_i) AS aggr_count_i,\n          doc_id AS doc_id_s,\n          user_id AS user_id_s,\n          weighted_sum(typed_weight_d, type, '${signalTypeWeights}') AS weight_d\n     FROM signal_type_groups\n GROUP BY doc_id, user_id",
        "useNaturalKey": true,
        "sourceCatchup": false,
        "skipCheckEnabled": true,
        "parameters": [
          {
            "key": "signalTypeWeights",
            "value": "click:1.0,cart:10.0,purchase:25.0"
          }
        ],
        "selectQuery": "timestamp_tdt:[NOW-90DAYS TO NOW]",
        "inputCollection": "DC_Large_signals"
      },
      {
        "id": "DC_Large_QR_HEAD_TAIL",
        "trainingDataSamplingFraction": 1.0,
        "trainingDataFilterQuery": "type:click",
        "headQueryCntBoost": 1.0,
        "minCountFilter": 20,
        "countField": "count_i",
        "enableAutoPublish": false,
        "type": "headTailAnalysis",
        "updates": [
          {
            "userId": "admin",
            "timestamp": "2022-02-08T18:38:19.489Z"
          },
          {
            "userId": "admin",
            "timestamp": "2022-02-08T18:38:19.497Z"
          }
        ],
        "outputCollection": "DC_Large_job_reports",
        "fieldToVectorize": "query",
        "userHead": -1.0,
        "stopwordsList": [
          "stopwords_only.txt"
        ],
        "tailRewriteCollection": "DC_Large_query_rewrite_staging",
        "signalTypeField": "type",
        "userTail": -1.0,
        "dataFormat": "solr",
        "analyzerConfigQuery": "{ \"analyzers\": [ { \"name\": \"StdTokLowerStem\",\n\"charFilters\": [ { \"type\": \"htmlstrip\" } ],\n\"tokenizer\": { \"type\": \"standard\" },\n\"filters\": [{ \"type\": \"lowercase\" },\n{ \"type\": \"fusionstop\", \"ignoreCase\": \"true\", \"format\": \"snowball\", \"words\": \"stopwords_only.txt\" },\n{ \"type\": \"englishminimalstem\" }] }],\n\"fields\": [{ \"regex\": \".+\", \"analyzer\": \"StdTokLowerStem\" } ]}",
        "topQ": [
          100.0,
          0.01
        ],
        "mainType": "click",
        "sparkPartitions": 200,
        "overlapThreshold": 4,
        "sparkSQL": "SELECT * from spark_input",
        "randomSeed": 1234,
        "dataOutputFormat": "solr",
        "overlapNumBoost": 10.0,
        "trainingCollection": "DC_Large_signals",
        "minCountMain": 1,
        "lastTraffic": [
          0.01
        ],
        "trafficCount": [
          5.0
        ],
        "filterType": "response",
        "queryLenThreshold": 2,
        "lenScale": 6,
        "tailRewrite": true,
        "overwriteOutput": true,
        "trafficPerc": [
          0.25,
          0.5,
          0.75
        ]
      },
      {
        "id": "DC_Large_QR_MISSPELLING_DETECTION",
        "corMisRatio": 3.0,
        "trainingDataSamplingFraction": 1.0,
        "trainingDataFilterQuery": "type:click",
        "correctCntBoost": 2.0,
        "misspellingThreshold": 0.8,
        "minCountFilter": 10,
        "countField": "count_i",
        "enableAutoPublish": false,
        "type": "tokenPhraseSpellCorrection",
        "updates": [
          {
            "userId": "David.Im@lucidworks.com",
            "timestamp": "2022-02-08T18:38:30.561Z"
          },
          {
            "userId": "David.Im@lucidworks.com",
            "timestamp": "2022-02-08T18:38:30.567Z"
          }
        ],
        "outputCollection": "DC_Large_query_rewrite_staging",
        "fieldToVectorize": "query",
        "signalDataIndicator": true,
        "analyzerConfigDictionary": "{ \"analyzers\": [ { \"name\": \"LetterTokLowerStem\",\"charFilters\": [ { \"type\": \"htmlstrip\" } ],\"tokenizer\": { \"type\": \"letter\" },\"filters\": [{ \"type\": \"lowercase\" },{ \"type\": \"KStem\" }] }],\"fields\": [{ \"regex\": \".+\", \"analyzer\": \"LetterTokLowerStem\" } ]}",
        "editDistBoost": 2.0,
        "minPrefix": 1,
        "soundMatchBoost": 3.0,
        "signalTypeField": "type",
        "dataFormat": "solr",
        "lastCharMatchBoost": 1.0,
        "analyzerConfigQuery": "{ \"analyzers\": [ { \"name\": \"LetterTokLowerStem\",\"charFilters\": [ { \"type\": \"htmlstrip\" } ],\"tokenizer\": { \"type\": \"letter\" },\"filters\": [{ \"type\": \"lowercase\" },{ \"type\": \"KStem\" }] }],\"fields\": [{ \"regex\": \".+\", \"analyzer\": \"LetterTokLowerStem\" } ]}",
        "maxDistance": 2,
        "mainType": "click",
        "sparkPartitions": 200,
        "dictionaryDataFilterQuery": "*:*",
        "sparkSQL": "SELECT * from spark_input",
        "randomSeed": 1234,
        "correctionThreshold": 0.8,
        "dataOutputFormat": "solr",
        "trainingCollection": "DC_Large_signals",
        "minCountMain": 1,
        "minMispellingLen": 5,
        "lenScale": 5,
        "filterType": "response",
        "overwriteOutput": true
      },
      {
        "id": "DC_Large_QR_PHRASE_DETECTION",
        "sourceFields": "query",
        "trainingDataSamplingFraction": 1.0,
        "minmatch": 100,
        "trainingDataFilterQuery": "*:*",
        "dataFormat": "solr",
        "enableAutoPublish": false,
        "type": "sip",
        "updates": [
          {
            "userId": "David.Im@lucidworks.com",
            "timestamp": "2022-02-08T18:38:29.380Z"
          },
          {
            "userId": "David.Im@lucidworks.com",
            "timestamp": "2022-02-08T18:38:29.387Z"
          }
        ],
        "outputCollection": "DC_Large_query_rewrite_staging",
        "sparkPartitions": 200,
        "sparkSQL": "SELECT * from spark_input",
        "randomSeed": 8180,
        "fieldToVectorize": "query",
        "dataOutputFormat": "solr",
        "ngramSize": 3,
        "trainingCollection": "DC_Large_signals",
        "attachPhrases": false,
        "analyzerConfig": "{ \"analyzers\": [{ \"name\": \"StdTokLowerStop\",\"charFilters\": [ { \"type\": \"htmlstrip\" } ],\"tokenizer\": { \"type\": \"standard\" },\"filters\": [{ \"type\": \"lowercase\" }] }],\"fields\": [{ \"regex\": \".+\", \"analyzer\": \"StdTokLowerStop\" } ]}",
        "overwriteOutput": true
      },
      {
        "id": "DC_Large_QR_SYNONYM_DETECTION",
        "docIdField": "doc_id",
        "trainingDataSamplingFraction": 1.0,
        "trainingDataFilterQuery": "*:*",
        "similarityThreshold": 1.0E-5,
        "countField": "count_i",
        "enableAutoPublish": false,
        "type": "synonymDetection",
        "updates": [
          {
            "userId": "admin",
            "timestamp": "2022-02-08T18:38:34.192Z"
          },
          {
            "userId": "admin",
            "timestamp": "2022-02-08T18:38:34.196Z"
          }
        ],
        "outputCollection": "DC_Large_query_rewrite_staging",
        "fieldToVectorize": "query",
        "misspellingsFilterQuery": "type:spell",
        "synonymBlobName": "ecom_keywords.csv",
        "misspellingSQL": "SELECT surface_form AS misspelling_s, output AS correction_s FROM spell_input WHERE doc_type  = 'query_rewrite' AND type = 'spell' AND review IN ('approved' OR 'auto')",
        "dataFormat": "solr",
        "analyzerConfigQuery": "{ \"analyzers\": [ { \"name\": \"LetterTokLowerStem\",\"charFilters\": [ { \"type\": \"htmlstrip\" } ],\"tokenizer\": { \"type\": \"letter\" },\"filters\": [{ \"type\": \"lowercase\" },{ \"type\": \"length\", \"min\": \"2\", \"max\": \"32767\" },{ \"type\": \"KStem\" }] }],\"fields\": [{ \"regex\": \".+\", \"analyzer\": \"LetterTokLowerStem\" } ]}",
        "keyPhraseFilterQuery": "type:phrase",
        "sparkPartitions": 200,
        "overlapThreshold": 1.0E-4,
        "sparkSQL": "SELECT * from spark_input",
        "phraseSQL": "SELECT surface_form AS phrases_s, coalesce(confidence, lit(1d)) AS likelihood_d, coalesce(word_count, lit(1d)) AS word_num_i FROM phrase_input WHERE doc_type  = 'query_rewrite' AND type = 'phrase' AND review IN ('approved' OR 'auto')",
        "phraseSQLDataFormat": "solr",
        "randomSeed": 1234,
        "dataOutputFormat": "solr",
        "minQueryCount": 3,
        "misspellingSQLDataFormat": "solr",
        "trainingCollection": "DC_Large_signals",
        "keyPhraseCollection": "DC_Large_query_rewrite_staging",
        "misspellingCollection": "DC_Large_query_rewrite_staging",
        "overwriteOutput": true
      },
      {
        "id": "DC_Large_TYPEAHEAD_clicks_load_v4",
        "cacheAfterRead": false,
        "continueAfterFailure": false,
        "defineFieldsUsingInputSchema": true,
        "atomicUpdates": false,
        "format": "solr",
        "transformSql": "SELECT query_s AS value_s,\n  SUM(aggr_count_i) AS signal_count_i,\n  current_timestamp() AS last_updated_tdt,\n  AVG(weight_d) AS popularity_d\nFROM _input\nGROUP BY value_s",
        "readOptions": [
          {
            "key": "collection",
            "value": "DC_Large_signals_aggr"
          },
          {
            "key": "zkHost",
            "value": "ps-foundry-zookeeper-headless:2181"
          }
        ],
        "clearDatasource": false,
        "outputIndexPipeline": "DC_Large_TYPEAHEAD_IPL_v4",
        "type": "parallel-bulk-loader",
        "updates": [
          {
            "userId": "admin",
            "timestamp": "2022-02-08T18:38:18.589Z"
          },
          {
            "userId": "admin",
            "timestamp": "2022-02-08T18:38:18.383Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-07-14T21:32:44.793Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-06-07T22:46:51.767Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-04-13T21:11:04.455Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-04-13T17:55:03.087Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-04-01T15:35:38.837Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-03-31T17:49:37.361Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-03-31T17:49:37.357Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-03-31T03:22:03.200Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-03-31T03:22:03.177Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-03-31T03:05:30.019Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-03-31T03:05:30.003Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-03-31T02:53:02.677Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-03-31T02:53:02.666Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-03-31T02:40:51.940Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-03-31T02:40:51.913Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-03-31T01:58:39.211Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-03-31T01:58:39.207Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-03-31T01:49:24.130Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-03-31T01:49:24.126Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-03-31T01:35:56.894Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-03-31T01:35:56.890Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-03-31T01:34:00.316Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-03-31T01:34:00.312Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-03-31T01:00:03.599Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-03-31T01:00:03.595Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-03-31T00:36:32.225Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-03-31T00:36:32.221Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-03-30T23:48:32.295Z"
          }
        ],
        "outputCollection": "DC_Large_TYPEAHEAD_v4"
      },
      {
        "id": "DC_Large_TYPEAHEAD_entity_load_v4",
        "cacheAfterRead": false,
        "atomicUpdates": false,
        "format": "solr",
        "outputIndexPipeline": "DC_Large_TYPEAHEAD_IPL_v4",
        "type": "parallel-bulk-loader",
        "updates": [
          {
            "userId": "admin",
            "timestamp": "2022-02-08T18:38:20.866Z"
          },
          {
            "userId": "admin",
            "timestamp": "2022-02-08T18:38:20.859Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-07-14T22:05:54.358Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-07-14T22:05:54.353Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-07-14T21:36:44.386Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-07-14T21:36:44.382Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-07-14T21:32:45.043Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-06-07T22:46:51.986Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-06-07T22:01:58.867Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-06-07T22:01:58.863Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-06-07T20:54:38.051Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-06-07T20:54:38.047Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-06-07T20:38:27.990Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-06-07T20:38:27.986Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-06-07T20:25:17.287Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-06-07T20:25:17.283Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-06-07T20:14:36.989Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-06-07T20:14:36.984Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-06-07T17:22:42.027Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-06-07T17:22:42.023Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-06-07T17:09:26.582Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-06-07T17:09:26.578Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-06-07T15:41:01.671Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-06-07T15:41:01.666Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-06-03T21:05:15.928Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-06-03T21:05:15.925Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-06-02T22:59:11.554Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-06-02T22:59:11.551Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-06-02T22:10:19.078Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-06-02T22:10:19.054Z"
          }
        ],
        "outputCollection": "DC_Large_TYPEAHEAD_v4",
        "transformScala": "import com.lucidworks.spark.util.SolrSupport\nimport java.time.LocalDateTime\nimport java.time.format.DateTimeFormatter\nimport java.time.ZoneOffset\nimport org.apache.spark.sql.types.{\n    StructType, StructField, StringType}\nimport org.apache.spark.sql.Row\nimport scala.util.control._\n\n\n// main PBL transform\ndef transform(inputDF: Dataset[Row]) : Dataset[Row] = {\n    println(\"---BEGIN TYPE-BASED DOCUMENT LOAD---\")\n\n    var outputDF = spark.emptyDataFrame\n\n    var counter = 1\n    var currentTypeField =  \"\"\n    val loop = new Breaks;\n    // Loop through spark settings for the Type fields which should be in spark.typeField_* format\n    loop.breakable {\n        do {\n            var boolCheck = false\n            try\n            {\n                currentTypeField = sc.getConf.get(\"spark.typeField_\" + counter)\n                counter += 1\n            }\n            catch\n            { \n                case x: NoSuchElementException => \n                { \n                    println(\"End of type field arguments.\")\n                    boolCheck = true\n                }\n            }\n            if(boolCheck){ loop.break }\n\n            println(\"CURRENT TYPE: \" + currentTypeField)\n            //Type fields should be in format: {type name}, {value field}, {img url field (optional, if not used then null)}, {document url field (optional, if not used then null)}\n            val typeFieldArray = currentTypeField.split(\",\").map(_.trim)\n\n            //Field names wrapped in ` to escape characters like .\n            var typeName = typeFieldArray(0)\n            var valueField = \"`\" + typeFieldArray(1) + \"`\"\n            var imgField = \"`\" + typeFieldArray(2) + \"`\"\n            var docField = \"`\" + typeFieldArray(3) + \"`\"\n            \n            //Define columns\n            var idCol = regexp_replace(concat(lit(typeName + \"_\"),col(valueField)),\"\\\\s+\",\"\").as(\"id\")\n            var valueCol = col(valueField).as(\"value_s\")\n            var typeCol = lit(typeName).as(\"type\")\n\n            //Handle optional fields and build documents for the current type name\n            var currentDF = spark.emptyDataFrame\n            if(imgField.equalsIgnoreCase(\"`null`\") && docField.equalsIgnoreCase(\"`null`\"))\n            {\n                currentDF = inputDF.select(idCol, valueCol, typeCol).distinct()\n            }\n\n            else if(docField.equalsIgnoreCase(\"`null`\"))\n            {\n                var imageCol = col(imgField).as(\"image_url\")\n                currentDF = inputDF.select(idCol, valueCol, typeCol, imageCol).distinct()\n            }\n            else if(imgField.equalsIgnoreCase(\"`null`\"))\n            {\n                var docCol = col(docField).as(\"document_url\")\n                currentDF = inputDF.select(idCol, valueCol, typeCol, docCol).distinct()\n            }\n            else\n            {\n                var imageCol = col(imgField).as(\"image_url\")\n                var docCol = col(docField).as(\"document_url\")\n                currentDF = inputDF.select(idCol, valueCol, typeCol, imageCol, docCol).distinct()\n            }\n\n            //combine the current type dataframe with the final output dataframe\n            val cols1 = outputDF.columns.toSet\n            val cols2 = currentDF.columns.toSet\n            val total = cols1 ++ cols2 // union\n\n            def expr(myCols: Set[String], allCols: Set[String]) = {\n                allCols.toList.map(x => x match {\n                    case x if myCols.contains(x) => col(x)\n                    case _ => lit(null).as(x)\n                })\n            }\n\n            outputDF = outputDF.select(expr(cols1, total):_*).union(currentDF.select(expr(cols2, total):_*))\n            println(outputDF.head())\n        }\n        while(currentTypeField != null)\n    }\n\n    println(\"---END TYPE-BASED DOCUMENT LOAD---\")\n    println(outputDF.count() + \" DOCUMENTS WRITTEN\")\n\n    outputDF.withColumn(\"indexed_date\", lit(LocalDateTime.now(ZoneOffset.UTC)+\"Z\"))\n    .withColumn(\"ta_type\", lit(\"entity\"))\n}",
        "sparkConfig": [
          {
            "key": "spark.typeField_1",
            "value": "product, name_s, images_ss, productID_s"
          },
          {
            "key": "spark.sql.caseSensitive",
            "value": "true"
          }
        ],
        "continueAfterFailure": false,
        "defineFieldsUsingInputSchema": true,
        "readOptions": [
          {
            "key": "collection",
            "value": "DC_Large"
          },
          {
            "key": "zkHost",
            "value": "ps-foundry-zookeeper-headless:2181"
          }
        ],
        "clearDatasource": true
      },
      {
        "id": "DC_Large_TYPEAHEAD_v4_click_signals_aggregation",
        "hiddenParameters": [
          {
            "key": "signalTypes",
            "value": "_regex/signalTypeWeights/([\\w\\-\\.]*):([\\d\\.\\-]*)(,|$)/'$1'$3/g"
          }
        ],
        "notes": "Computes an aggregated weight for each query / item combination found in the signals collection. The weight for each group is computed using an exponential time-decay on signal count (30 day half-life) and a weighted sum based on the signal type. Use the 'signalTypeWeights' parameter to set the correct signal types and weights for your dataset. The results of this job can be used to boost documents at query time using the boosting stage.",
        "sourceRemove": false,
        "dataFormat": "solr",
        "optimizeSegments": 0,
        "type": "sql_template",
        "updates": [
          {
            "userId": "admin",
            "timestamp": "2021-07-14T21:33:09.432Z"
          },
          {
            "userId": "admin",
            "timestamp": "2022-02-08T18:38:31.170Z"
          },
          {
            "userId": "admin",
            "timestamp": "2022-02-08T18:38:31.175Z"
          }
        ],
        "outputCollection": "DC_Large_TYPEAHEAD_v4_signals_aggr",
        "sparkPartitions": 200,
        "sparkSQL": "SELECT * from spark_input",
        "sql": "WITH sigs_with_filters AS (\n   SELECT c.query as query,\n          c.doc_id,\n          q.filters_s as filters,\n          c.type,\n          c.ref_time,\n          coalesce(c.count_i,1) as count_i,\n          c.timestamp_tdt,\n          greatest(coalesce(c.weight_d,0.1),0.0) as weight_d\n     FROM ${inputCollection} c\n LEFT JOIN (SELECT id, filters_s FROM ${inputCollection} WHERE type='response') q ON q.id = c.fusion_query_id\n    WHERE c.type IN (${signalTypes}) AND c.timestamp_tdt >= c.catchup_timestamp_tdt\n ), signal_type_groups AS (\n     SELECT SUM(count_i) AS typed_aggr_count_i,\n            query,\n            doc_id,\n            type,\n            filters,\n            time_decay(count_i, timestamp_tdt, \"30 days\", ref_time, weight_d) AS typed_weight_d\n       FROM sigs_with_filters\n   GROUP BY doc_id, query, filters, type\n ) SELECT concat_ws('|', query, doc_id, filters) as id,\n          SUM(typed_aggr_count_i) AS aggr_count_i,\n          query AS query_s,\n          query AS query_t,\n          doc_id AS doc_id_s,\n          filters AS filters_s,\n          SPLIT(filters, ' \\\\$ ') AS filters_ss,\n          weighted_sum(typed_weight_d, type, '${signalTypeWeights}') AS weight_d\n     FROM signal_type_groups\n GROUP BY query, doc_id, filters",
        "useNaturalKey": true,
        "sourceCatchup": true,
        "rollupSql": "SELECT concat_ws('|', query_s, doc_id_s, filters_s) as id,\n  query_s,\n  query_s as query_t,\n  doc_id_s,\n  filters_s,\n  first(aggr_type_s) AS aggr_type_s,\n  SPLIT(filters_s, ' \\\\$ ') AS filters_ss,\n  SUM(weight_d) AS weight_d,\n  SUM(aggr_count_i) AS aggr_count_i\n  FROM DC_Large_TYPEAHEAD_v4_signals_aggr\n  GROUP BY query_s, doc_id_s, filters_s",
        "skipCheckEnabled": true,
        "parameters": [
          {
            "key": "signalTypeWeights",
            "value": "click:1.0,cart:10.0,purchase:25.0"
          }
        ],
        "selectQuery": "*:*",
        "inputCollection": "DC_Large_TYPEAHEAD_v4_signals"
      },
      {
        "id": "DC_Large_TYPEAHEAD_v4_head_tail",
        "trainingDataSamplingFraction": 1.0,
        "trainingDataFilterQuery": "*:*",
        "headQueryCntBoost": 1.0,
        "minCountFilter": 20,
        "countField": "count_i",
        "enableAutoPublish": false,
        "type": "headTailAnalysis",
        "updates": [
          {
            "userId": "admin",
            "timestamp": "2021-07-14T21:33:09.725Z"
          },
          {
            "userId": "admin",
            "timestamp": "2022-02-08T18:38:33.572Z"
          },
          {
            "userId": "admin",
            "timestamp": "2022-02-08T18:38:33.579Z"
          }
        ],
        "outputCollection": "DC_Large_TYPEAHEAD_v4_job_reports",
        "fieldToVectorize": "query",
        "userHead": -1.0,
        "tailRewriteCollection": "DC_Large_TYPEAHEAD_v4_query_rewrite_staging",
        "signalTypeField": "type",
        "userTail": -1.0,
        "dataFormat": "solr",
        "analyzerConfigQuery": "{ \"analyzers\": [ { \"name\": \"StdTokLowerStem\",\"charFilters\": [ { \"type\": \"htmlstrip\" } ],\"tokenizer\": { \"type\": \"standard\" },\"filters\": [{ \"type\": \"lowercase\" },{ \"type\": \"englishminimalstem\" }] }],\"fields\": [{ \"regex\": \".+\", \"analyzer\": \"StdTokLowerStem\" } ]}",
        "topQ": [
          100.0,
          0.01
        ],
        "mainType": "click",
        "sparkPartitions": 200,
        "overlapThreshold": 4,
        "sparkSQL": "SELECT * from spark_input",
        "randomSeed": 1234,
        "dataOutputFormat": "solr",
        "overlapNumBoost": 10.0,
        "trainingCollection": "DC_Large_TYPEAHEAD_v4_signals",
        "minCountMain": 1,
        "lastTraffic": [
          0.01
        ],
        "trafficCount": [
          5.0
        ],
        "filterType": "response",
        "queryLenThreshold": 2,
        "lenScale": 6,
        "tailRewrite": true,
        "overwriteOutput": true,
        "trafficPerc": [
          0.25,
          0.5,
          0.75
        ]
      },
      {
        "id": "DC_Large_TYPEAHEAD_v4_session_rollup",
        "hiddenParameters": [
          {
            "key": "outputProjectedFieldsOnly",
            "value": "true"
          }
        ],
        "notes": "Aggregate related user activity into a session signal containing activity count, duration, and keywords (based on user search terms). This job is used by the Fusion Insights application to show reports about user sessions. Use the 'elapsedSecsSinceLastActivity' and 'elapsedSecsSinceSessionStart' parameters to determine when a user session is considered to be complete.",
        "sourceRemove": false,
        "dataFormat": "solr",
        "optimizeSegments": 0,
        "type": "sql_template",
        "updates": [
          {
            "userId": "admin",
            "timestamp": "2021-07-14T21:33:09.561Z"
          },
          {
            "userId": "David.Im@lucidworks.com",
            "timestamp": "2022-02-08T18:38:32.976Z"
          },
          {
            "userId": "David.Im@lucidworks.com",
            "timestamp": "2022-02-08T18:38:32.981Z"
          }
        ],
        "outputCollection": "DC_Large_TYPEAHEAD_v4_signals",
        "sparkPartitions": 200,
        "sparkSQL": "SELECT * FROM spark_input",
        "sql": "WITH session_agg AS (\n     SELECT COUNT(1) AS activity_count,\n            MIN(timestamp_tdt) AS start,\n            MAX(timestamp_tdt) AS end,\n            timediff(MAX(timestamp_tdt), MIN(timestamp_tdt), \"MINUTES\") AS duration,\n            'session' AS type,\n            first(user_id) AS user,\n            session_keywords(query) AS keywords,\n            session\n       FROM ${inputCollection}\n      WHERE timestamp_tdt IS NOT NULL\n        AND type != 'session'\n        AND session IS NOT NULL\n        AND session NOT IN (SELECT session FROM ${inputCollection} WHERE type = 'session' AND session IS NOT NULL)\n   GROUP BY session\n     HAVING timediff(current_timestamp(), MAX(timestamp_tdt), \"SECONDS\") >= ${elapsedSecsSinceLastActivity} OR timediff(current_timestamp(), MIN(timestamp_tdt), \"SECONDS\") >= ${elapsedSecsSinceSessionStart})\n SELECT activity_count, start, end, duration, type, user, keywords, session FROM session_agg",
        "useNaturalKey": true,
        "sourceCatchup": false,
        "skipCheckEnabled": false,
        "parameters": [
          {
            "key": "elapsedSecsSinceLastActivity",
            "value": "360"
          },
          {
            "key": "elapsedSecsSinceSessionStart",
            "value": "3600"
          }
        ],
        "selectQuery": "*:*",
        "inputCollection": "DC_Large_TYPEAHEAD_v4_signals"
      },
      {
        "id": "DC_Large_phrase_extraction",
        "sourceFields": "query",
        "trainingDataSamplingFraction": 1.0,
        "minmatch": 100,
        "trainingDataFilterQuery": "*:*",
        "dataFormat": "solr",
        "enableAutoPublish": false,
        "type": "sip",
        "updates": [
          {
            "userId": "admin",
            "timestamp": "2022-02-08T18:38:29.906Z"
          },
          {
            "userId": "admin",
            "timestamp": "2022-02-08T18:38:29.914Z"
          }
        ],
        "outputCollection": "DC_Large_query_rewrite_staging",
        "sparkPartitions": 200,
        "sparkSQL": "SELECT * from spark_input",
        "randomSeed": 8180,
        "fieldToVectorize": "query",
        "dataOutputFormat": "solr",
        "ngramSize": 3,
        "trainingCollection": "DC_Large_signals",
        "attachPhrases": false,
        "analyzerConfig": "{ \"analyzers\": [{ \"name\": \"StdTokLowerStop\",\"charFilters\": [ { \"type\": \"htmlstrip\" } ],\"tokenizer\": { \"type\": \"standard\" },\"filters\": [{ \"type\": \"lowercase\" }] }],\"fields\": [{ \"regex\": \".+\", \"analyzer\": \"StdTokLowerStop\" } ]}",
        "overwriteOutput": true
      },
      {
        "id": "DC_Large_spell_correction",
        "corMisRatio": 3.0,
        "trainingDataSamplingFraction": 1.0,
        "trainingDataFilterQuery": "type:click OR type:response",
        "correctCntBoost": 2.0,
        "misspellingThreshold": 0.8,
        "minCountFilter": 10,
        "countField": "count_i",
        "enableAutoPublish": false,
        "type": "tokenPhraseSpellCorrection",
        "updates": [
          {
            "userId": "David.Im@lucidworks.com",
            "timestamp": "2022-02-08T18:38:32.371Z"
          },
          {
            "userId": "David.Im@lucidworks.com",
            "timestamp": "2022-02-08T18:38:32.378Z"
          }
        ],
        "outputCollection": "DC_Large_query_rewrite_staging",
        "fieldToVectorize": "query",
        "signalDataIndicator": true,
        "analyzerConfigDictionary": "{ \"analyzers\": [ { \"name\": \"LetterTokLowerStem\",\"charFilters\": [ { \"type\": \"htmlstrip\" } ],\"tokenizer\": { \"type\": \"letter\" },\"filters\": [{ \"type\": \"lowercase\" },{ \"type\": \"KStem\" }] }],\"fields\": [{ \"regex\": \".+\", \"analyzer\": \"LetterTokLowerStem\" } ]}",
        "editDistBoost": 2.0,
        "minPrefix": 1,
        "soundMatchBoost": 3.0,
        "signalTypeField": "type",
        "dataFormat": "solr",
        "lastCharMatchBoost": 1.0,
        "analyzerConfigQuery": "{ \"analyzers\": [ { \"name\": \"LetterTokLowerStem\",\"charFilters\": [ { \"type\": \"htmlstrip\" } ],\"tokenizer\": { \"type\": \"letter\" },\"filters\": [{ \"type\": \"lowercase\" },{ \"type\": \"KStem\" }] }],\"fields\": [{ \"regex\": \".+\", \"analyzer\": \"LetterTokLowerStem\" } ]}",
        "maxDistance": 2,
        "mainType": "click",
        "sparkPartitions": 200,
        "dictionaryDataFilterQuery": "*:*",
        "sparkSQL": "SELECT * from spark_input",
        "randomSeed": 1234,
        "correctionThreshold": 0.8,
        "dataOutputFormat": "solr",
        "trainingCollection": "DC_Large_signals",
        "minCountMain": 1,
        "minMispellingLen": 5,
        "lenScale": 5,
        "filterType": "response",
        "overwriteOutput": true
      },
      {
        "id": "DC_Large_synonym_detection",
        "docIdField": "doc_id_s",
        "trainingDataSamplingFraction": 1.0,
        "trainingDataFilterQuery": "*:*",
        "similarityThreshold": 0.01,
        "countField": "aggr_count_i",
        "enableAutoPublish": false,
        "type": "synonymDetection",
        "updates": [
          {
            "userId": "admin",
            "timestamp": "2021-04-13T02:58:58.282Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-04-13T02:58:58.299Z"
          },
          {
            "userId": "admin",
            "timestamp": "2022-02-08T18:38:24.686Z"
          },
          {
            "userId": "admin",
            "timestamp": "2022-02-08T18:38:24.692Z"
          }
        ],
        "outputCollection": "DC_Large_query_rewrite_staging",
        "fieldToVectorize": "query_s",
        "misspellingsFilterQuery": "type:spell",
        "synonymBlobName": "custom_synonyms.txt",
        "misspellingSQL": "SELECT surface_form AS misspelling_s, output AS correction_s FROM spell_input WHERE doc_type  = 'query_rewrite' AND type = 'spell' AND review IN ('approved' OR 'auto')",
        "dataFormat": "solr",
        "analyzerConfigQuery": "{ \"analyzers\": [ { \"name\": \"LetterTokLowerStem\",\"charFilters\": [ { \"type\": \"htmlstrip\" } ],\"tokenizer\": { \"type\": \"letter\" },\"filters\": [{ \"type\": \"lowercase\" },{ \"type\": \"KStem\" }] }],\"fields\": [{ \"regex\": \".+\", \"analyzer\": \"LetterTokLowerStem\" } ]}",
        "keyPhraseFilterQuery": "type:phrase",
        "sparkPartitions": 200,
        "overlapThreshold": 0.5,
        "sparkSQL": "SELECT * from spark_input",
        "phraseSQL": "SELECT surface_form AS phrases_s, coalesce(confidence, lit(1d)) AS likelihood_d, coalesce(word_count, lit(1d)) AS word_num_i FROM phrase_input WHERE doc_type  = 'query_rewrite' AND type = 'phrase' AND review IN ('approved' OR 'auto')",
        "phraseSQLDataFormat": "solr",
        "randomSeed": 1234,
        "dataOutputFormat": "solr",
        "minQueryCount": 5,
        "misspellingSQLDataFormat": "solr",
        "trainingCollection": "DC_Large_signals_aggr",
        "keyPhraseCollection": "DC_Large_query_rewrite_staging",
        "misspellingCollection": "DC_Large_query_rewrite_staging",
        "overwriteOutput": true
      },
      {
        "id": "DW_Large_click_signals_aggregation",
        "hiddenParameters": [
          {
            "key": "signalTypes",
            "value": "_regex/signalTypeWeights/([\\w\\-\\.]*):([\\d\\.\\-]*)(,|$)/'$1'$3/g"
          },
          {
            "key": "optimizeOutput",
            "value": "4"
          }
        ],
        "notes": "Computes an aggregated weight for each query / item combination found in the signals collection. The weight for each group is computed using an exponential time-decay on signal count (30 day half-life) and a weighted sum based on the signal type. Use the 'signalTypeWeights' parameter to set the correct signal types and weights for your dataset. The results of this job can be used to boost documents at query time using the boosting stage.",
        "sourceRemove": false,
        "dataFormat": "solr",
        "optimizeSegments": 0,
        "type": "sql_template",
        "updates": [
          {
            "userId": "admin",
            "timestamp": "2021-05-25T23:11:15.183Z"
          },
          {
            "userId": "admin",
            "timestamp": "2022-02-08T18:38:25.796Z"
          },
          {
            "userId": "admin",
            "timestamp": "2022-02-08T18:38:25.802Z"
          }
        ],
        "outputCollection": "DW_Large_signals_aggr",
        "sparkPartitions": 200,
        "sparkSQL": "SELECT * from spark_input",
        "sql": "WITH sigs_with_filters AS (\n   SELECT c.query as query,\n          c.doc_id,\n          q.filters_s as filters,\n          c.type,\n          c.ref_time,\n          coalesce(c.count_i,1) as count_i,\n          c.timestamp_tdt,\n          coalesce(c.weight_d,0.1) as weight_d\n     FROM ${inputCollection} c\n LEFT JOIN (SELECT id, filters_s FROM ${inputCollection} WHERE type='response') q ON q.id = c.fusion_query_id\n    WHERE c.type IN (${signalTypes}) AND c.timestamp_tdt >= c.catchup_timestamp_tdt\n ), signal_type_groups AS (\n     SELECT SUM(count_i) AS typed_aggr_count_i,\n            query,\n            doc_id,\n            type,\n            filters,\n            time_decay(count_i, timestamp_tdt, \"30 days\", ref_time, weight_d) AS typed_weight_d\n       FROM sigs_with_filters\n   GROUP BY doc_id, query, filters, type\n ) SELECT concat_ws('|', query, doc_id, filters) as id,\n          SUM(typed_aggr_count_i) AS aggr_count_i,\n          query AS query_s,\n          query AS query_t,\n          doc_id AS doc_id_s,\n          filters AS filters_s,\n          SPLIT(filters, ' \\\\$ ') AS filters_ss,\n          weighted_sum(typed_weight_d, type, '${signalTypeWeights}') AS weight_d\n     FROM signal_type_groups\n GROUP BY query, doc_id, filters",
        "useNaturalKey": true,
        "sourceCatchup": true,
        "rollupSql": "SELECT concat_ws('|', query_s, doc_id_s, filters_s) as id,\n  query_s,\n  query_s as query_t,\n  doc_id_s,\n  filters_s,\n  first(aggr_type_s) AS aggr_type_s,\n  SPLIT(filters_s, ' \\\\$ ') AS filters_ss,\n  SUM(weight_d) AS weight_d,\n  SUM(aggr_count_i) AS aggr_count_i\n  FROM DW_Large_signals_aggr\n  GROUP BY query_s, doc_id_s, filters_s",
        "skipCheckEnabled": true,
        "parameters": [
          {
            "key": "signalTypeWeights",
            "value": "click:1.0,cart:10.0,purchase:25.0"
          }
        ],
        "selectQuery": "*:*",
        "inputCollection": "DW_Large_signals"
      },
      {
        "id": "DW_Large_head_tail",
        "trainingDataSamplingFraction": 1.0,
        "trainingDataFilterQuery": "type:click OR type:response",
        "headQueryCntBoost": 1.0,
        "minCountFilter": 20,
        "countField": "count_i",
        "enableAutoPublish": false,
        "type": "headTailAnalysis",
        "updates": [
          {
            "userId": "admin",
            "timestamp": "2021-05-25T23:11:15.291Z"
          },
          {
            "userId": "admin",
            "timestamp": "2022-02-08T18:38:28.184Z"
          },
          {
            "userId": "admin",
            "timestamp": "2022-02-08T18:38:28.191Z"
          }
        ],
        "outputCollection": "DW_Large_job_reports",
        "fieldToVectorize": "query",
        "userHead": -1.0,
        "tailRewriteCollection": "DW_Large_query_rewrite_staging",
        "signalTypeField": "type",
        "userTail": -1.0,
        "dataFormat": "solr",
        "analyzerConfigQuery": "{ \"analyzers\": [ { \"name\": \"StdTokLowerStem\",\"charFilters\": [ { \"type\": \"htmlstrip\" } ],\"tokenizer\": { \"type\": \"standard\" },\"filters\": [{ \"type\": \"lowercase\" },{ \"type\": \"englishminimalstem\" }] }],\"fields\": [{ \"regex\": \".+\", \"analyzer\": \"StdTokLowerStem\" } ]}",
        "topQ": [
          100.0,
          0.01
        ],
        "mainType": "click",
        "sparkPartitions": 200,
        "overlapThreshold": 4,
        "sparkSQL": "SELECT * from spark_input",
        "randomSeed": 1234,
        "dataOutputFormat": "solr",
        "overlapNumBoost": 10.0,
        "trainingCollection": "DW_Large_signals",
        "minCountMain": 1,
        "lastTraffic": [
          0.01
        ],
        "trafficCount": [
          5.0
        ],
        "filterType": "response",
        "queryLenThreshold": 2,
        "lenScale": 6,
        "tailRewrite": true,
        "overwriteOutput": true,
        "trafficPerc": [
          0.25,
          0.5,
          0.75
        ]
      },
      {
        "id": "DW_Large_session_rollup",
        "hiddenParameters": [
          {
            "key": "outputProjectedFieldsOnly",
            "value": "true"
          }
        ],
        "notes": "Aggregate related user activity into a session signal containing activity count, duration, and keywords (based on user search terms). This job is used by the Fusion Insights application to show reports about user sessions. Use the 'elapsedSecsSinceLastActivity' and 'elapsedSecsSinceSessionStart' parameters to determine when a user session is considered to be complete.",
        "sourceRemove": false,
        "dataFormat": "solr",
        "optimizeSegments": 0,
        "type": "sql_template",
        "updates": [
          {
            "userId": "admin",
            "timestamp": "2021-05-25T23:11:15.504Z"
          },
          {
            "userId": "David.Im@lucidworks.com",
            "timestamp": "2022-02-08T18:38:26.358Z"
          },
          {
            "userId": "David.Im@lucidworks.com",
            "timestamp": "2022-02-08T18:38:26.364Z"
          }
        ],
        "outputCollection": "DW_Large_signals",
        "sparkPartitions": 200,
        "sparkSQL": "SELECT * from spark_input",
        "sql": "WITH session_agg AS (\n     SELECT COUNT(1) AS activity_count,\n            MIN(timestamp_tdt) AS start,\n            MAX(timestamp_tdt) AS end,\n            timediff(MAX(timestamp_tdt), MIN(timestamp_tdt), \"MINUTES\") AS duration,\n            'session' AS type,\n            first(user_id) AS user,\n            session_keywords(query) AS keywords,\n            session\n       FROM ${inputCollection}\n      WHERE timestamp_tdt IS NOT NULL\n        AND type != 'session'\n        AND session IS NOT NULL\n        AND session NOT IN (SELECT session FROM ${inputCollection} WHERE type = 'session' AND session IS NOT NULL)\n   GROUP BY session\n     HAVING timediff(current_timestamp(), MAX(timestamp_tdt), \"SECONDS\") >= ${elapsedSecsSinceLastActivity} OR timediff(current_timestamp(), MIN(timestamp_tdt), \"SECONDS\") >= ${elapsedSecsSinceSessionStart})\n SELECT activity_count, start, end, duration, type, user, keywords, session FROM session_agg",
        "useNaturalKey": true,
        "sourceCatchup": false,
        "skipCheckEnabled": false,
        "parameters": [
          {
            "key": "elapsedSecsSinceLastActivity",
            "value": "360"
          },
          {
            "key": "elapsedSecsSinceSessionStart",
            "value": "3600"
          }
        ],
        "selectQuery": "*:*",
        "inputCollection": "DW_Large_signals"
      },
      {
        "id": "DW_Large_user_item_preferences_aggregation",
        "hiddenParameters": [
          {
            "key": "signalTypes",
            "value": "_regex/signalTypeWeights/([\\w\\-\\.]*):([\\d\\.\\-]*)(,|$)/'$1'$3/g"
          }
        ],
        "notes": "Computes an aggregated weight for each user / item combination found in the signals collection. The weight for each group is computed using an exponential time-decay on signal count (30 day half-life) and a weighted sum based on the signal type. Use the 'signalTypeWeights' parameter to set the correct signal types and weights for your dataset. The results of this job can be used as input to the ALS recommendation job.",
        "sourceRemove": false,
        "dataFormat": "solr",
        "optimizeSegments": 0,
        "type": "sql_template",
        "updates": [
          {
            "userId": "admin",
            "timestamp": "2021-05-25T23:11:15.845Z"
          },
          {
            "userId": "admin",
            "timestamp": "2022-02-08T18:38:25.286Z"
          },
          {
            "userId": "admin",
            "timestamp": "2022-02-08T18:38:25.293Z"
          }
        ],
        "outputCollection": "DW_Large_signals_aggr",
        "sparkPartitions": 200,
        "sparkSQL": "SELECT * from spark_input",
        "sql": "WITH signal_type_groups AS (\n    SELECT SUM(count_i) AS typed_aggr_count_i,\n           doc_id,\n           user_id,\n           type,\n           time_decay(count_i, timestamp_tdt, \"90 days\", ref_time, weight_d) AS typed_weight_d\n      FROM ${inputCollection}\n     WHERE type IN (${signalTypes})\n  GROUP BY user_id, doc_id, type\n ) SELECT SUM(typed_aggr_count_i) AS aggr_count_i,\n          doc_id AS doc_id_s,\n          user_id AS user_id_s,\n          weighted_sum(typed_weight_d, type, '${signalTypeWeights}') AS weight_d\n     FROM signal_type_groups\n GROUP BY doc_id, user_id",
        "useNaturalKey": true,
        "sourceCatchup": false,
        "skipCheckEnabled": true,
        "parameters": [
          {
            "key": "signalTypeWeights",
            "value": "click:1.0,cart:10.0,purchase:25.0"
          }
        ],
        "selectQuery": "timestamp_tdt:[NOW-90DAYS TO NOW]",
        "inputCollection": "DW_Large_signals"
      },
      {
        "id": "DW_Large_user_query_history_aggregation",
        "hiddenParameters": [
          {
            "key": "signalTypes",
            "value": "_regex/signalTypeWeights/([\\w\\-\\.]*):([\\d\\.\\-]*)(,|$)/'$1'$3/g"
          }
        ],
        "notes": "Computes an aggregated weight for each user / query combination found in the signals collection. The weight for each group is computed using an exponential time-decay on signal count (30 day half-life) and a weighted sum based on the signal type. Use the 'signalTypeWeights' parameter to set the correct signal types and weights for your dataset. The results of this job can be used to boost queries for a user based on their past queries.",
        "sourceRemove": false,
        "dataFormat": "solr",
        "optimizeSegments": 0,
        "type": "sql_template",
        "updates": [
          {
            "userId": "admin",
            "timestamp": "2021-05-25T23:11:15.989Z"
          },
          {
            "userId": "admin",
            "timestamp": "2022-02-08T18:38:31.781Z"
          },
          {
            "userId": "admin",
            "timestamp": "2022-02-08T18:38:31.787Z"
          }
        ],
        "outputCollection": "DW_Large_signals_aggr",
        "sparkPartitions": 200,
        "sparkSQL": "SELECT * from spark_input",
        "sql": "WITH signal_type_groups AS (\n    SELECT SUM(count_i) AS typed_aggr_count_i,\n           user_id,\n           query,\n           type,\n           time_decay(count_i, timestamp_tdt, \"30 days\", ref_time, weight_d) AS typed_weight_d\n      FROM ${inputCollection}\n     WHERE type IN (${signalTypes})\n  GROUP BY query, user_id, type\n ) SELECT SUM(typed_aggr_count_i) AS aggr_count_i,\n          user_id AS user_id_s,\n          query AS query_s,\n          weighted_sum(typed_weight_d, type, '${signalTypeWeights}') AS weight_d\n     FROM signal_type_groups\n GROUP BY user_id, query",
        "useNaturalKey": true,
        "sourceCatchup": true,
        "skipCheckEnabled": true,
        "parameters": [
          {
            "key": "signalTypeWeights",
            "value": "request:1.0,click:5.0,cart:10.0,purchase:25.0"
          }
        ],
        "selectQuery": "*:*",
        "inputCollection": "DW_Large_signals"
      },
      {
        "id": "GCS_PBL_V2",
        "cacheAfterRead": false,
        "atomicUpdates": false,
        "format": "json",
        "outputIndexPipeline": "DW_Large",
        "type": "parallel-bulk-loader",
        "updates": [
          {
            "userId": "ashumway",
            "timestamp": "2022-06-30T22:02:23.342Z"
          },
          {
            "userId": "ashumway",
            "timestamp": "2022-06-30T22:02:23.346Z"
          }
        ],
        "outputCollection": "DW_Large",
        "sparkConfig": [
          {
            "key": "spark.kubernetes.driver.secrets.proserve-53a45a9bbf25",
            "value": "/mnt/gcp-secrets"
          },
          {
            "key": "spark.kubernetes.executor.secrets.proserve-53a45a9bbf25",
            "value": "/mnt/gcp-secrets"
          },
          {
            "key": "spark.kubernetes.driverEnv.GOOGLE_APPLICATION_CREDENTIALS",
            "value": "/mnt/gcp-secrets/proserve-53a45a9bbf25.json"
          },
          {
            "key": "spark.executorEnv.GOOGLE_APPLICATION_CREDENTIALS",
            "value": "/mnt/gcp-secrets/proserve-53a45a9bbf25.json"
          },
          {
            "key": "spark.hadoop.google.cloud.auth.service.account.json.keyfile",
            "value": "/mnt/gcp-secrets/proserve-53a45a9bbf25.json"
          }
        ],
        "path": "gs://ps-foundry/stuller-data/full_feed",
        "continueAfterFailure": false,
        "defineFieldsUsingInputSchema": false,
        "readOptions": [
          {
            "key": "max_rows",
            "value": "10"
          }
        ],
        "clearDatasource": false
      },
      {
        "id": "RESPONSE_TA_Extract_Typeahead",
        "sourceRemove": false,
        "dataFormat": "solr",
        "optimizeSegments": 0,
        "rows": 10000,
        "type": "aggregation",
        "updates": [
          {
            "userId": "admin",
            "timestamp": "2020-12-15T18:29:06.456Z"
          },
          {
            "userId": "admin",
            "timestamp": "2020-12-15T18:38:27.717Z"
          },
          {
            "userId": "admin",
            "timestamp": "2020-12-15T18:38:27.721Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-01-05T20:53:13.689Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-01-05T20:53:13.694Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-01-05T21:18:42.846Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-01-05T21:18:42.850Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-05-25T23:11:16.303Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-05-25T23:11:16.306Z"
          },
          {
            "userId": "admin",
            "timestamp": "2022-02-08T18:38:21.474Z"
          },
          {
            "userId": "admin",
            "timestamp": "2022-02-08T18:38:21.482Z"
          }
        ],
        "outputCollection": "RESPONSE_TA",
        "sparkPartitions": 200,
        "sparkSQL": "SELECT * from spark_input",
        "sql": "/* \nUse this against an  signals collection to extract queries and include a count\nIn a DW environment where high click dcount may be a better indicator of valuable type-ahead, use the RESPONSE_TA_Extract_clicked job instead\n*/\nWITH signal_type_groups AS (\n        SELECT query,\n               count(*) AS signalCount_i,\n               type,\n               first(timestamp_tdt) AS timestamp_tdt\n        FROM `${inputCollection}`\n        WHERE type = 'response' AND query <> '*:*'\n        GROUP BY query, type\n) SELECT MD5(query) AS id,\n    query AS query_s,\n    query AS query_t,\n      query AS name,\n    signalCount_i,\n      time_decay(signalCount_i, timestamp_tdt, \"30 days\", \"NOW\", 0.1) AS popularity_d\n     FROM signal_type_groups\nGROUP BY query, MD5(query), signalCount_i",
        "useNaturalKey": true,
        "sourceCatchup": false,
        "skipJobIfSignalsEmpty": false,
        "skipCheckEnabled": false,
        "selectQuery": "*:*",
        "inputCollection": "Components_signals"
      },
      {
        "id": "RESPONSE_TA_Extract_clicked",
        "sourceRemove": false,
        "dataFormat": "solr",
        "optimizeSegments": 0,
        "rows": 10000,
        "type": "aggregation",
        "updates": [
          {
            "userId": "admin",
            "timestamp": "2021-01-05T21:00:15.898Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-01-05T21:17:13.161Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-01-05T21:17:13.184Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-01-05T21:19:38.971Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-01-05T21:19:38.974Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-05-25T23:11:16.413Z"
          },
          {
            "userId": "admin",
            "timestamp": "2021-05-25T23:11:16.417Z"
          },
          {
            "userId": "admin",
            "timestamp": "2022-02-08T18:38:22.763Z"
          },
          {
            "userId": "admin",
            "timestamp": "2022-02-08T18:38:22.770Z"
          }
        ],
        "outputCollection": "RESPONSE_TA",
        "sparkPartitions": 200,
        "sparkSQL": "SELECT * from spark_input",
        "sql": "/* \nUse this against an aggregated signals collection to extract queries which have been clicked\nIn a DW environment where high click does not correlate with valuable type-ahead, use the\nRESPONSE_TA_Extract_Typeahead job instead\n*/\nWITH signal_type_groups AS (\n        SELECT query_s AS query,\n               sum(aggr_count_i) AS clickCount_i,\n               aggr_type_s AS type,\n               first(timestamp_tdt) AS timestamp_tdt\n        FROM `${inputCollection}`\n        WHERE query_s <> '*:*' \n        GROUP BY query_s, aggr_type_s\n) SELECT MD5(query) AS id,\n    query AS query_s,\n    query AS query_t,\n      query AS name,\n    clickCount_i,\n      time_decay(clickCount_i, timestamp_tdt, \"30 days\", \"NOW\", 0.1) AS popularity_d\n     FROM signal_type_groups\nGROUP BY query, MD5(query), clickCount_i",
        "useNaturalKey": true,
        "sourceCatchup": false,
        "skipJobIfSignalsEmpty": false,
        "skipCheckEnabled": false,
        "selectQuery": "*:*",
        "inputCollection": "Components_signals_aggr"
      },
      {
        "id": "auto_deny_or_approve_rewrite_detections",
        "type": "script",
        "updates": [
          {
            "userId": "ashumway",
            "timestamp": "2022-06-30T22:02:31.618Z"
          },
          {
            "userId": "ashumway",
            "timestamp": "2022-06-30T22:02:31.622Z"
          }
        ],
        "script": "import com.lucidworks.spark.util.SolrSupport\nimport com.lucidworks.dc.spark.util.DatasetLoader\nimport org.apache.solr.client.solrj.SolrQuery\nimport org.apache.solr.client.solrj.response.QueryResponse\nimport scala.collection.mutable.ListBuffer\nimport org.slf4j.LoggerFactory\n\nval logger = LoggerFactory.getLogger(\"AutoDenyOrApproveRewriteDetections\")\n\nobject AutoDenyOrApproveRewriteDetections {\n\n  def main(args:Array[String]) : Unit = {\n    val zkHost = System.getProperty(\"solr.zkhost\")\n    val qwsCollection = \"DW_Large_query_rewrite_staging\"\n    val productsCollection = \"DW_Large\"\n\n    denyApproveOrKeepSuggestions(zkHost, qwsCollection, productsCollection, \"type:(spell OR phrase OR tail) AND (source:DW_Large_spell_correction OR DW_Large_phrase_extraction OR DW_Large_head_tail) AND deployed:false\", true, true)\n  }\n\n  /**\n    * Iterate through the query rewrites staging collection for rules matching the filter (should be undeployed) and\n    * validate original term vs suggested term performance. Each query rewrite will either be denied if it \n    * doesn't meet the keep critera, approved if it leads to more results, or nothing will be done to the rule\n    * so that the business users can evaluate manually.\n    */\n  def denyApproveOrKeepSuggestions(zkHost:String, qwsCollection:String, productsCollection: String, filter:String, performDeny:Boolean, performApprove:Boolean) = {\n    val solrQuery = new SolrQuery(\"*:*\")\n    solrQuery.set(\"spellcheck\", \"false\")\n    solrQuery.addFilterQuery(filter)\n    solrQuery.setFields(\"id surface_form output type\")\n    solrQuery.setRows(100000)\n\n    val qr: QueryResponse = SolrSupport.getCachedCloudClient(zkHost).query(qwsCollection, solrQuery)\n    val resultsDocs = qr.getResults().listIterator()\n    val rewritesToDeny = new ListBuffer[String]()\n    val rewritesToApprove = new ListBuffer[String]()\n    if (resultsDocs != null) {\n      while (resultsDocs.hasNext) {\n        val doc = resultsDocs.next()\n        val rewriteType = doc.getFirstValue(\"type\").toString\n\n        val resultsFromOrigTerm = getNumResultsFromMainCollection(zkHost, productsCollection, doc.getFirstValue(\"surface_form\").toString)\n\n        var suggestedTerm = \"\"\n        var resultsFromSuggestedTerm = 0L\n        if (rewriteType == \"phrase\") {\n          suggestedTerm =  \"\\\"\" + doc.getFirstValue(\"surface_form\").toString + \"\\\"\"\n          resultsFromSuggestedTerm = getNumResultsFromMainCollection(zkHost, productsCollection, suggestedTerm)\n        } else {\n          suggestedTerm = doc.getFirstValue(\"output\").toString\n          resultsFromSuggestedTerm = getNumResultsFromMainCollection(zkHost, productsCollection, suggestedTerm)\n        }\n\n        // LESS TO MORE SCENARIOS\n        // If we go from zero to greater than zero results - keep this suggestion\n        // If we go from less to more at a significant percentage difference - keep this suggestion\n        // Consider - less to more but under a threshold (ie from 0-2) may not be worthy\n        // MORE TO LESS SCENARIOS\n        // If we go from any number to zero - deny or remove this suggestion\n        // If we go from more to less at a significant percentage difference - flag this suggestion\n        // SAME RECALL SCENARIOS\n        // If we go from less to more/more to less at an insignificant percentage difference - flag this suggestion\n\n        val action = actionToTake(resultsFromOrigTerm, resultsFromSuggestedTerm)\n        if (action == \"deny\") {\n          rewritesToDeny += doc.getFirstValue(\"id\").toString\n        } else if (action == \"keep\") {\n          rewritesToApprove += doc.getFirstValue(\"id\").toString\n        }\n        println(action.toUpperCase + \"::\" + rewriteType + \"::\" + doc.getFirstValue(\"id\") + \"::\" + doc.getFirstValue(\"surface_form\") + \"::\" + resultsFromOrigTerm + \"::\" + suggestedTerm + \"::\" + resultsFromSuggestedTerm)\n      }\n\n      if (peformDeny) {\n        for (id <- rewritesToDeny) {\n// Uncomment this to perform an actual delete         SolrSupport.getCachedCloudClient(zkHost).deleteByQuery(qwsCollection, query, 1000).getStatus\n          updateRewriteStatus(zkHost, qwsCollection, id, \"denied\")\n        }\n      }\n\n      if (performApprove) {\n        for (id <- rewritesToApprove) {\n          updateRewriteStatus(zkHost, qwsCollection, id, \"approved\")\n        }\n      }\n    }\n  }\n\n  /**\n    * Create a dataframe in order to update a rewrite to either denied or approved.\n    */\n  def updateRewriteStatus(zkHost:String, qwsCollection:String, id:String, newStatus:String) = {\n    val updateQuery = \"id:\" + id\n    val opts = Map(\"zkHost\" -> zkHost, \"flatten_multivalued\" -> \"false\", \"fields\" -> \"id, deployed\", \"collection\" -> qwsCollection, \"query\" -> updateQuery, \"maxRows\" -> \"1\")\n    var rewriteDF = spark.read.format(\"solr\").options(opts).load\n    rewriteDF = rewriteDF.withColumn(\"review\", lit(newStatus))\n    //rewriteDF.show()\n    val atomicAdds = DatasetLoader.sendAtomicAddsToSolr(rewriteDF, qwsCollection, \"id\", zkHost)        \n  }\n\n  /**\n    * Implements the \"action to take\" logic based in results before/after\n    */\n  def actionToTake(numBefore: Long, numAfter: Long) = if (numBefore == 0 && numAfter > 0) \"keep\" else if (numBefore >= 0 && numAfter > numBefore) \"keep\" else if (numAfter == 0) \"deny\" else if (numBefore == numAfter) \"deny\" else \"flag\"  \n\n  /**\n    * Duplicates the customer specific filtering logic to run a query as from customer application to determine number of results.\n    * Returns the number of results from for the query terms in the product collection.  \n    * CUSTOMIZATION TODO: Replace the filters with the implementation specific filters applied by the client/pipeline\n    */\n  def getNumResultsFromMainCollection(zkHost:String, productsCollection:String, queryTerms:String): Long = {\n    val solrQuery = new SolrQuery(\"spells:\" + queryTerms)\n    solrQuery.addFilterQuery(\"field1:foo\")\n    solrQuery.addFilterQuery(\"field2:bar\")\n    solrQuery.setFields(\"id\")\n    solrQuery.setRows(0)\n    val qr: QueryResponse = SolrSupport.getCachedCloudClient(zkHost).query(productsCollection, solrQuery)\n    qr.getResults().getNumFound()\n  }\n}\n\nAutoDenyOrApproveRewriteDetections.main(Array())"
      }
    ],
    "blobs": [
      {
        "id": "CAT_ID_MAPPING_cats_full.txt",
        "path": "/CAT_ID_MAPPING_cats_full.txt",
        "dir": "/",
        "filename": "CAT_ID_MAPPING_cats_full.txt",
        "contentType": "text/plain",
        "size": 120611,
        "modifiedTime": "2022-06-30T21:22:38.390Z",
        "version": 1737096333509001216,
        "md5": "3326333856b345c602e771ec00450b44",
        "metadata": {
          "resourceType": "file"
        }
      },
      {
        "id": "RESPONSE_TA/full-list-of-bad-words_csv-file_2018_07_30.csv",
        "path": "/RESPONSE_TA/full-list-of-bad-words_csv-file_2018_07_30.csv",
        "dir": "/RESPONSE_TA",
        "filename": "full-list-of-bad-words_csv-file_2018_07_30.csv",
        "contentType": "text/csv",
        "size": 26846,
        "modifiedTime": "2022-02-08T18:37:43.380Z",
        "version": 1724221188611244032,
        "md5": "58592b144f5584625942a1f617d2761f",
        "metadata": {
          "resourceType": "file"
        }
      },
      {
        "id": "TYPEAHEAD/Typeahead_inclusion_list.csv",
        "path": "/TYPEAHEAD/Typeahead_inclusion_list.csv",
        "dir": "/TYPEAHEAD",
        "filename": "Typeahead_inclusion_list.csv",
        "contentType": "text/csv",
        "size": 110,
        "modifiedTime": "2022-02-08T18:37:25.457Z",
        "version": 1724221169816567808,
        "md5": "49e87771204fca511c26852fb229b6e5",
        "metadata": {
          "resourceType": "file"
        }
      },
      {
        "id": "TYPEAHEAD/full-list-of-bad-words_csv-file_2018_07_30.csv",
        "path": "/TYPEAHEAD/full-list-of-bad-words_csv-file_2018_07_30.csv",
        "dir": "/TYPEAHEAD",
        "filename": "full-list-of-bad-words_csv-file_2018_07_30.csv",
        "contentType": "text/csv",
        "size": 26846,
        "modifiedTime": "2022-02-08T18:37:00.565Z",
        "version": 1724221143715414016,
        "md5": "58592b144f5584625942a1f617d2761f",
        "metadata": {
          "resourceType": "file"
        }
      },
      {
        "id": "custom_synonyms.txt",
        "path": "/custom_synonyms.txt",
        "dir": "/",
        "filename": "custom_synonyms.txt",
        "contentType": "text/plain",
        "size": 26348,
        "modifiedTime": "2022-06-30T21:22:29.626Z",
        "version": 1737096324320329728,
        "md5": "dfd62f18c1ddad02e9ad702d647563f9",
        "metadata": {
          "resourceType": "file"
        }
      },
      {
        "id": "ecom_keywords.csv",
        "path": "/ecom_keywords.csv",
        "dir": "/",
        "filename": "ecom_keywords.csv",
        "contentType": "text/csv",
        "size": 4317,
        "modifiedTime": "2022-02-08T18:37:18.964Z",
        "version": 1724221163008163840,
        "md5": "d397619903b731e8f19f8fd6dd6653dc",
        "metadata": {
          "resourceType": "file"
        }
      },
      {
        "id": "lib/index/ConfigMgr.js",
        "path": "/lib/index/ConfigMgr.js",
        "dir": "/lib/index",
        "filename": "ConfigMgr.js",
        "contentType": "text/javascript",
        "size": 18183,
        "modifiedTime": "2022-07-08T20:08:05.745Z",
        "version": 1737816419331997696,
        "md5": "aa78d6f226e9987cd7e6d42bf6972e19",
        "metadata": {
          "resourceType": "file:js-index"
        }
      },
      {
        "id": "lib/index/FusionServiceLib.js",
        "path": "/lib/index/FusionServiceLib.js",
        "dir": "/lib/index",
        "filename": "FusionServiceLib.js",
        "contentType": "text/javascript",
        "size": 12029,
        "modifiedTime": "2022-07-08T20:08:07.475Z",
        "version": 1737816421146034176,
        "md5": "068211db6f41e1e996499c6a30a7c83a",
        "metadata": {
          "resourceType": "file:js-index"
        }
      },
      {
        "id": "lib/index/HttpLib.js",
        "path": "/lib/index/HttpLib.js",
        "dir": "/lib/index",
        "filename": "HttpLib.js",
        "contentType": "text/javascript",
        "size": 9926,
        "modifiedTime": "2022-07-08T20:08:08.733Z",
        "version": 1737816422465142784,
        "md5": "83c4843e2d68f8a61493034628928d4d",
        "metadata": {
          "resourceType": "file:js-index"
        }
      },
      {
        "id": "lib/index/IndexLib.js",
        "path": "/lib/index/IndexLib.js",
        "dir": "/lib/index",
        "filename": "IndexLib.js",
        "contentType": "text/javascript",
        "size": 11511,
        "modifiedTime": "2022-07-08T20:06:37.833Z",
        "version": 1737816327149584384,
        "md5": "2a8fb755ba2d4c60bb1b97129e1a87d0",
        "metadata": {
          "resourceType": "file:js-index"
        }
      },
      {
        "id": "lib/index/JobHistoryLib.js",
        "path": "/lib/index/JobHistoryLib.js",
        "dir": "/lib/index",
        "filename": "JobHistoryLib.js",
        "contentType": "text/javascript",
        "size": 5350,
        "modifiedTime": "2022-07-08T20:06:39.538Z",
        "version": 1737816328937406464,
        "md5": "31c6704c7d79ad77f548c75a6f1454c9",
        "metadata": {
          "resourceType": "file:js-index"
        }
      },
      {
        "id": "lib/index/MinimalTemplateLib.js",
        "path": "/lib/index/MinimalTemplateLib.js",
        "dir": "/lib/index",
        "filename": "MinimalTemplateLib.js",
        "contentType": "text/javascript",
        "size": 2270,
        "modifiedTime": "2022-07-08T20:06:41.348Z",
        "version": 1737816330836377600,
        "md5": "55917992787c28d5426de65d8cd7d4db",
        "metadata": {
          "resourceType": "file:js-index"
        }
      },
      {
        "id": "lib/index/QPLib.js",
        "path": "/lib/index/QPLib.js",
        "dir": "/lib/index",
        "filename": "QPLib.js",
        "contentType": "text/javascript",
        "size": 5346,
        "modifiedTime": "2022-02-08T18:37:44.139Z",
        "version": 1724221189407113216,
        "md5": "c305e6e9f32d18396a4ef4f5f1e62e5d",
        "metadata": {
          "resourceType": "file:js-index"
        }
      },
      {
        "id": "lib/index/SlackHelperLib.js",
        "path": "/lib/index/SlackHelperLib.js",
        "dir": "/lib/index",
        "filename": "SlackHelperLib.js",
        "contentType": "text/javascript",
        "size": 6320,
        "modifiedTime": "2022-02-08T18:37:34.891Z",
        "version": 1724221179708833792,
        "md5": "5c2e6b9eab40706c3d3d36332a8d049e",
        "metadata": {
          "resourceType": "file:js-index"
        }
      },
      {
        "id": "lib/index/SolrJHelperLib.js",
        "path": "/lib/index/SolrJHelperLib.js",
        "dir": "/lib/index",
        "filename": "SolrJHelperLib.js",
        "contentType": "text/javascript",
        "size": 8869,
        "modifiedTime": "2022-07-08T20:06:43.116Z",
        "version": 1737816332689211392,
        "md5": "7d6c3b2733d6462c944e53e30060a1ce",
        "metadata": {
          "resourceType": "file:js-index"
        }
      },
      {
        "id": "lib/index/TaggerLib.js",
        "path": "/lib/index/TaggerLib.js",
        "dir": "/lib/index",
        "filename": "TaggerLib.js",
        "contentType": "text/javascript",
        "size": 8315,
        "modifiedTime": "2022-07-08T20:06:45.089Z",
        "version": 1737816334759100416,
        "md5": "70320eea2aeb3d32b5e4d46828d3b925",
        "metadata": {
          "resourceType": "file:js-index"
        }
      },
      {
        "id": "lib/index/TaggerLib.v5.js",
        "path": "/lib/index/TaggerLib.v5.js",
        "dir": "/lib/index",
        "filename": "TaggerLib.v5.js",
        "contentType": "text/javascript",
        "size": 10599,
        "modifiedTime": "2022-07-08T20:06:46.937Z",
        "version": 1737816336696868864,
        "md5": "fccc93ed3385a7fca667435a212c5617",
        "metadata": {
          "resourceType": "file:js-index"
        }
      },
      {
        "id": "lib/index/TestLib.js",
        "path": "/lib/index/TestLib.js",
        "dir": "/lib/index",
        "filename": "TestLib.js",
        "contentType": "text/javascript",
        "size": 6421,
        "modifiedTime": "2022-07-08T20:06:48.568Z",
        "version": 1737816338406047744,
        "md5": "2fb41007ddfe60b63317dc8b20cc6ebe",
        "metadata": {
          "resourceType": "file:js-index"
        }
      },
      {
        "id": "lib/index/UtilLib.js",
        "path": "/lib/index/UtilLib.js",
        "dir": "/lib/index",
        "filename": "UtilLib.js",
        "contentType": "text/javascript",
        "size": 25567,
        "modifiedTime": "2022-07-08T20:06:51.161Z",
        "version": 1737816341125005312,
        "md5": "5996f6ecd2dcc7c19e26d9aa524c2f29",
        "metadata": {
          "resourceType": "file:js-index"
        }
      },
      {
        "id": "lib/query/ConfigMgr.js",
        "path": "/lib/query/ConfigMgr.js",
        "dir": "/lib/query",
        "filename": "ConfigMgr.js",
        "contentType": "text/javascript",
        "size": 18871,
        "modifiedTime": "2022-07-12T22:17:33.353Z",
        "version": 1738186952124923904,
        "md5": "b382c8d35caeea02d2ea6c3df10ffc0a",
        "metadata": {
          "resourceType": "file:js-query"
        }
      },
      {
        "id": "lib/query/FusionServiceLib.js",
        "path": "/lib/query/FusionServiceLib.js",
        "dir": "/lib/query",
        "filename": "FusionServiceLib.js",
        "contentType": "text/javascript",
        "size": 12029,
        "modifiedTime": "2022-07-08T20:18:26.119Z",
        "version": 1737817069842333696,
        "md5": "068211db6f41e1e996499c6a30a7c83a",
        "metadata": {
          "resourceType": "file:js-query"
        }
      },
      {
        "id": "lib/query/HttpLib.js",
        "path": "/lib/query/HttpLib.js",
        "dir": "/lib/query",
        "filename": "HttpLib.js",
        "contentType": "text/javascript",
        "size": 9926,
        "modifiedTime": "2022-07-08T20:18:27.060Z",
        "version": 1737817070827995136,
        "md5": "83c4843e2d68f8a61493034628928d4d",
        "metadata": {
          "resourceType": "file:js-query"
        }
      },
      {
        "id": "lib/query/IndexLib.js",
        "path": "/lib/query/IndexLib.js",
        "dir": "/lib/query",
        "filename": "IndexLib.js",
        "contentType": "text/javascript",
        "size": 11511,
        "modifiedTime": "2022-07-08T20:18:28.243Z",
        "version": 1737817072068460544,
        "md5": "2a8fb755ba2d4c60bb1b97129e1a87d0",
        "metadata": {
          "resourceType": "file:js-query"
        }
      },
      {
        "id": "lib/query/JobHistoryLib.js",
        "path": "/lib/query/JobHistoryLib.js",
        "dir": "/lib/query",
        "filename": "JobHistoryLib.js",
        "contentType": "text/javascript",
        "size": 5350,
        "modifiedTime": "2022-07-08T20:18:29.204Z",
        "version": 1737817073076142080,
        "md5": "31c6704c7d79ad77f548c75a6f1454c9",
        "metadata": {
          "resourceType": "file:js-query"
        }
      },
      {
        "id": "lib/query/MinimalTemplateLib.js",
        "path": "/lib/query/MinimalTemplateLib.js",
        "dir": "/lib/query",
        "filename": "MinimalTemplateLib.js",
        "contentType": "text/javascript",
        "size": 2270,
        "modifiedTime": "2022-07-08T20:18:30.241Z",
        "version": 1737817074163515392,
        "md5": "55917992787c28d5426de65d8cd7d4db",
        "metadata": {
          "resourceType": "file:js-query"
        }
      },
      {
        "id": "lib/query/QPLib.js",
        "path": "/lib/query/QPLib.js",
        "dir": "/lib/query",
        "filename": "QPLib.js",
        "contentType": "text/javascript",
        "size": 5346,
        "modifiedTime": "2022-06-30T21:22:27.987Z",
        "version": 1737096322600665088,
        "md5": "c305e6e9f32d18396a4ef4f5f1e62e5d",
        "metadata": {
          "resourceType": "file:js-query"
        }
      },
      {
        "id": "lib/query/SlackHelperLib.js",
        "path": "/lib/query/SlackHelperLib.js",
        "dir": "/lib/query",
        "filename": "SlackHelperLib.js",
        "contentType": "text/javascript",
        "size": 6320,
        "modifiedTime": "2022-06-30T21:22:31.805Z",
        "version": 1737096326605176832,
        "md5": "5c2e6b9eab40706c3d3d36332a8d049e",
        "metadata": {
          "resourceType": "file:js-query"
        }
      },
      {
        "id": "lib/query/SolrJHelperLib.js",
        "path": "/lib/query/SolrJHelperLib.js",
        "dir": "/lib/query",
        "filename": "SolrJHelperLib.js",
        "contentType": "text/javascript",
        "size": 8869,
        "modifiedTime": "2022-07-08T20:18:31.406Z",
        "version": 1737817075386155008,
        "md5": "7d6c3b2733d6462c944e53e30060a1ce",
        "metadata": {
          "resourceType": "file:js-query"
        }
      },
      {
        "id": "lib/query/TaggerLib.js",
        "path": "/lib/query/TaggerLib.js",
        "dir": "/lib/query",
        "filename": "TaggerLib.js",
        "contentType": "text/javascript",
        "size": 8315,
        "modifiedTime": "2022-07-08T20:18:32.239Z",
        "version": 1737817076259618816,
        "md5": "70320eea2aeb3d32b5e4d46828d3b925",
        "metadata": {
          "resourceType": "file:js-query"
        }
      },
      {
        "id": "lib/query/TaggerLib.v5.js",
        "path": "/lib/query/TaggerLib.v5.js",
        "dir": "/lib/query",
        "filename": "TaggerLib.v5.js",
        "contentType": "text/javascript",
        "size": 10599,
        "modifiedTime": "2022-07-08T20:18:33.192Z",
        "version": 1737817077257863168,
        "md5": "fccc93ed3385a7fca667435a212c5617",
        "metadata": {
          "resourceType": "file:js-query"
        }
      },
      {
        "id": "lib/query/TestLib.js",
        "path": "/lib/query/TestLib.js",
        "dir": "/lib/query",
        "filename": "TestLib.js",
        "contentType": "text/javascript",
        "size": 6421,
        "modifiedTime": "2022-07-08T20:18:34.186Z",
        "version": 1737817078301196288,
        "md5": "2fb41007ddfe60b63317dc8b20cc6ebe",
        "metadata": {
          "resourceType": "file:js-query"
        }
      },
      {
        "id": "lib/query/TimerLib.js",
        "path": "/lib/query/TimerLib.js",
        "dir": "/lib/query",
        "filename": "TimerLib.js",
        "contentType": "text/javascript",
        "size": 7044,
        "modifiedTime": "2022-07-08T20:18:35.264Z",
        "version": 1737817079430512640,
        "md5": "ba58a544c59e14456eb304f1f6af4b57",
        "metadata": {
          "resourceType": "file:js-query"
        }
      },
      {
        "id": "lib/query/UtilLib.js",
        "path": "/lib/query/UtilLib.js",
        "dir": "/lib/query",
        "filename": "UtilLib.js",
        "contentType": "text/javascript",
        "size": 25567,
        "modifiedTime": "2022-07-08T20:18:36.107Z",
        "version": 1737817080315510784,
        "md5": "5996f6ecd2dcc7c19e26d9aa524c2f29",
        "metadata": {
          "resourceType": "file:js-query"
        }
      },
      {
        "id": "prefs-DC_Large.DC_Large",
        "path": "/prefs-DC_Large.DC_Large",
        "dir": "/",
        "filename": "prefs-DC_Large.DC_Large",
        "contentType": "text/plain;charset=UTF-8",
        "size": 87,
        "modifiedTime": "2022-07-13T04:43:37.698Z",
        "version": 1738211241702195200,
        "md5": "4d4af473b66edbd8c58d73c22e0c497e",
        "metadata": {
          "resourceType": "unspecified"
        }
      },
      {
        "id": "prefs-DC_Large.DC_Large-question-answering",
        "path": "/prefs-DC_Large.DC_Large-question-answering",
        "dir": "/",
        "filename": "prefs-DC_Large.DC_Large-question-answering",
        "contentType": "text/plain;charset=UTF-8",
        "size": 125,
        "modifiedTime": "2022-02-08T18:37:14.284Z",
        "version": 1724221158101876736,
        "md5": "33b3dcb8ee2f0092095582171223d435",
        "metadata": {
          "resourceType": "unspecified"
        }
      },
      {
        "id": "prefs-DC_Large.DC_Large_TYPEAHEAD_QPL_v4",
        "path": "/prefs-DC_Large.DC_Large_TYPEAHEAD_QPL_v4",
        "dir": "/",
        "filename": "prefs-DC_Large.DC_Large_TYPEAHEAD_QPL_v4",
        "contentType": "text/plain;charset=UTF-8",
        "size": 121,
        "modifiedTime": "2022-02-08T18:37:47.843Z",
        "version": 1724221193291038720,
        "md5": "26f27ea22784d45f1d34e3f99e8c67f0",
        "metadata": {
          "resourceType": "unspecified"
        }
      },
      {
        "id": "prefs-DC_Large.DC_Large_Test",
        "path": "/prefs-DC_Large.DC_Large_Test",
        "dir": "/",
        "filename": "prefs-DC_Large.DC_Large_Test",
        "contentType": "text/plain;charset=UTF-8",
        "size": 110,
        "modifiedTime": "2022-02-08T18:37:42.660Z",
        "version": 1724221187855220736,
        "md5": "3cb13ead9e0a3e161c2ed388f8d20778",
        "metadata": {
          "resourceType": "unspecified"
        }
      },
      {
        "id": "prefs-DC_Large.JSON_Facets_Rules_DC",
        "path": "/prefs-DC_Large.JSON_Facets_Rules_DC",
        "dir": "/",
        "filename": "prefs-DC_Large.JSON_Facets_Rules_DC",
        "contentType": "text/plain;charset=UTF-8",
        "size": 111,
        "modifiedTime": "2022-02-08T18:37:50.964Z",
        "version": 1724221196562595840,
        "md5": "2a1dd545785128fcd11c000eb7fc5f7e",
        "metadata": {
          "resourceType": "unspecified"
        }
      },
      {
        "id": "prefs-DC_Large.SOLR_SPELL_zeroCheck",
        "path": "/prefs-DC_Large.SOLR_SPELL_zeroCheck",
        "dir": "/",
        "filename": "prefs-DC_Large.SOLR_SPELL_zeroCheck",
        "contentType": "text/plain;charset=UTF-8",
        "size": 111,
        "modifiedTime": "2022-05-20T18:04:51.333Z",
        "version": 1733369414376488960,
        "md5": "b4a7cdb061f37e593266df307ad1c7ad",
        "metadata": {
          "resourceType": "unspecified"
        }
      },
      {
        "id": "prefs-DC_Large.TAXO_QPL",
        "path": "/prefs-DC_Large.TAXO_QPL",
        "dir": "/",
        "filename": "prefs-DC_Large.TAXO_QPL",
        "contentType": "text/plain;charset=UTF-8",
        "size": 87,
        "modifiedTime": "2022-02-08T18:37:29.647Z",
        "version": 1724221174210101248,
        "md5": "9294037fd8470b757b25261470ead347",
        "metadata": {
          "resourceType": "unspecified"
        }
      },
      {
        "id": "prefs-DC_Large._lw_tmp_1591973111",
        "path": "/prefs-DC_Large._lw_tmp_1591973111",
        "dir": "/",
        "filename": "prefs-DC_Large._lw_tmp_1591973111",
        "contentType": "text/plain;charset=UTF-8",
        "size": 120,
        "modifiedTime": "2022-02-08T18:36:39.869Z",
        "version": 1724221122014085120,
        "md5": "73ca37e1a7a7d356e70b57c0c3b4f1bb",
        "metadata": {
          "resourceType": "unspecified"
        }
      },
      {
        "id": "prefs-DC_Large._lw_tmp_1598459790",
        "path": "/prefs-DC_Large._lw_tmp_1598459790",
        "dir": "/",
        "filename": "prefs-DC_Large._lw_tmp_1598459790",
        "contentType": "text/plain;charset=UTF-8",
        "size": 107,
        "modifiedTime": "2022-02-08T18:37:24.748Z",
        "version": 1724221169073127424,
        "md5": "e50741e904e6b608d30a66ebfc81f1e9",
        "metadata": {
          "resourceType": "unspecified"
        }
      },
      {
        "id": "prefs-DC_Large._lw_tmp_1601481983",
        "path": "/prefs-DC_Large._lw_tmp_1601481983",
        "dir": "/",
        "filename": "prefs-DC_Large._lw_tmp_1601481983",
        "contentType": "text/plain;charset=UTF-8",
        "size": 225,
        "modifiedTime": "2022-02-08T18:36:56.088Z",
        "version": 1724221139021987840,
        "md5": "bd7a1b2d8fd20d1f4d4f1dbf7af9eb04",
        "metadata": {
          "resourceType": "unspecified"
        }
      },
      {
        "id": "prefs-DC_Large._lw_tmp_1609952627",
        "path": "/prefs-DC_Large._lw_tmp_1609952627",
        "dir": "/",
        "filename": "prefs-DC_Large._lw_tmp_1609952627",
        "contentType": "text/plain;charset=UTF-8",
        "size": 120,
        "modifiedTime": "2022-02-08T18:36:42.857Z",
        "version": 1724221125148278784,
        "md5": "330a68acc416bd5408389e81b9bfc080",
        "metadata": {
          "resourceType": "unspecified"
        }
      },
      {
        "id": "prefs-DC_Large._lw_tmp_1615223423",
        "path": "/prefs-DC_Large._lw_tmp_1615223423",
        "dir": "/",
        "filename": "prefs-DC_Large._lw_tmp_1615223423",
        "contentType": "text/plain;charset=UTF-8",
        "size": 120,
        "modifiedTime": "2022-02-08T18:37:38.342Z",
        "version": 1724221183327469568,
        "md5": "838c99470c29b6ee46506735ace8bde1",
        "metadata": {
          "resourceType": "unspecified"
        }
      },
      {
        "id": "prefs-DC_Large._lw_tmp_1617083507",
        "path": "/prefs-DC_Large._lw_tmp_1617083507",
        "dir": "/",
        "filename": "prefs-DC_Large._lw_tmp_1617083507",
        "contentType": "text/plain;charset=UTF-8",
        "size": 43523,
        "modifiedTime": "2022-02-08T18:36:54.746Z",
        "version": 1724221137614798848,
        "md5": "86755de267f35632ac26c90ab89060be",
        "metadata": {
          "resourceType": "unspecified"
        }
      },
      {
        "id": "prefs-DC_Large._lw_tmp_1620209764",
        "path": "/prefs-DC_Large._lw_tmp_1620209764",
        "dir": "/",
        "filename": "prefs-DC_Large._lw_tmp_1620209764",
        "contentType": "text/plain;charset=UTF-8",
        "size": 43523,
        "modifiedTime": "2022-02-08T18:37:37.662Z",
        "version": 1724221182615486464,
        "md5": "6b2fd50c9851c57adebc83a3c6282a69",
        "metadata": {
          "resourceType": "unspecified"
        }
      },
      {
        "id": "prefs-DC_Large._lw_tmp_1622674194",
        "path": "/prefs-DC_Large._lw_tmp_1622674194",
        "dir": "/",
        "filename": "prefs-DC_Large._lw_tmp_1622674194",
        "contentType": "text/plain;charset=UTF-8",
        "size": 43523,
        "modifiedTime": "2022-02-08T18:36:38.374Z",
        "version": 1724221120446464000,
        "md5": "136aeffd8f55cd05b7d4898ab658fea4",
        "metadata": {
          "resourceType": "unspecified"
        }
      },
      {
        "id": "prefs-DC_Large._lw_tmp_1624481627",
        "path": "/prefs-DC_Large._lw_tmp_1624481627",
        "dir": "/",
        "filename": "prefs-DC_Large._lw_tmp_1624481627",
        "contentType": "text/plain;charset=UTF-8",
        "size": 43523,
        "modifiedTime": "2022-02-08T18:37:26.849Z",
        "version": 1724221171277234176,
        "md5": "ce234f5604093757105dc2743b05ef20",
        "metadata": {
          "resourceType": "unspecified"
        }
      },
      {
        "id": "prefs-DC_Large._lw_tmp_1624644730",
        "path": "/prefs-DC_Large._lw_tmp_1624644730",
        "dir": "/",
        "filename": "prefs-DC_Large._lw_tmp_1624644730",
        "contentType": "text/plain;charset=UTF-8",
        "size": 43523,
        "modifiedTime": "2022-02-08T18:37:53.050Z",
        "version": 1724221198749925376,
        "md5": "b22f88d1411ba1e8767c1fbe3fc40561",
        "metadata": {
          "resourceType": "unspecified"
        }
      },
      {
        "id": "prefs-DC_Large._lw_tmp_1625114553",
        "path": "/prefs-DC_Large._lw_tmp_1625114553",
        "dir": "/",
        "filename": "prefs-DC_Large._lw_tmp_1625114553",
        "contentType": "text/plain;charset=UTF-8",
        "size": 107,
        "modifiedTime": "2022-02-08T18:37:29.032Z",
        "version": 1724221173565227008,
        "md5": "a064bc5ea8b89c9733d234350dd84d23",
        "metadata": {
          "resourceType": "unspecified"
        }
      },
      {
        "id": "prefs-DC_Large._lw_tmp_1625681806",
        "path": "/prefs-DC_Large._lw_tmp_1625681806",
        "dir": "/",
        "filename": "prefs-DC_Large._lw_tmp_1625681806",
        "contentType": "text/plain;charset=UTF-8",
        "size": 43523,
        "modifiedTime": "2022-02-08T18:36:55.442Z",
        "version": 1724221138343559168,
        "md5": "25cb4d44a8f2fdcedd04da5c979a3c21",
        "metadata": {
          "resourceType": "unspecified"
        }
      },
      {
        "id": "prefs-DC_Large._lw_tmp_1629701262",
        "path": "/prefs-DC_Large._lw_tmp_1629701262",
        "dir": "/",
        "filename": "prefs-DC_Large._lw_tmp_1629701262",
        "contentType": "text/plain;charset=UTF-8",
        "size": 43523,
        "modifiedTime": "2022-02-08T18:37:07.800Z",
        "version": 1724221151301861376,
        "md5": "f57dd45e01ef05503e01338456d85a08",
        "metadata": {
          "resourceType": "unspecified"
        }
      },
      {
        "id": "prefs-DC_Large._lw_tmp_1637069684",
        "path": "/prefs-DC_Large._lw_tmp_1637069684",
        "dir": "/",
        "filename": "prefs-DC_Large._lw_tmp_1637069684",
        "contentType": "text/plain;charset=UTF-8",
        "size": 120,
        "modifiedTime": "2022-02-08T18:36:54.040Z",
        "version": 1724221136873455616,
        "md5": "8c028b7b666ef1112d5e5b491b903b32",
        "metadata": {
          "resourceType": "unspecified"
        }
      },
      {
        "id": "prefs-DC_Large._lw_tmp_1639365574",
        "path": "/prefs-DC_Large._lw_tmp_1639365574",
        "dir": "/",
        "filename": "prefs-DC_Large._lw_tmp_1639365574",
        "contentType": "text/plain;charset=UTF-8",
        "size": 107,
        "modifiedTime": "2022-07-13T04:43:30.377Z",
        "version": 1738211234025570304,
        "md5": "bfa406d9ef8a69699059ae7208ef7c77",
        "metadata": {
          "resourceType": "unspecified"
        }
      },
      {
        "id": "prefs-DC_Large._lw_tmp_1644295034",
        "path": "/prefs-DC_Large._lw_tmp_1644295034",
        "dir": "/",
        "filename": "prefs-DC_Large._lw_tmp_1644295034",
        "contentType": "text/plain;charset=UTF-8",
        "size": 120,
        "modifiedTime": "2022-02-08T04:37:17.981Z",
        "version": 1724168313748062208,
        "md5": "e442d222e6488f93b3789e3ce8b11b84",
        "metadata": {
          "resourceType": "unspecified"
        }
      },
      {
        "id": "prefs-DC_Large._lw_tmp_1650556828",
        "path": "/prefs-DC_Large._lw_tmp_1650556828",
        "dir": "/",
        "filename": "prefs-DC_Large._lw_tmp_1650556828",
        "contentType": "text/plain;charset=UTF-8",
        "size": 120,
        "modifiedTime": "2022-04-21T16:58:59.803Z",
        "version": 1730737958871367680,
        "md5": "1b7a3fcaa353c5c7daccb882e552a5f6",
        "metadata": {
          "resourceType": "unspecified"
        }
      },
      {
        "id": "prefs-DC_Large._lw_tmp_1653069127",
        "path": "/prefs-DC_Large._lw_tmp_1653069127",
        "dir": "/",
        "filename": "prefs-DC_Large._lw_tmp_1653069127",
        "contentType": "text/plain;charset=UTF-8",
        "size": 43736,
        "modifiedTime": "2022-05-27T19:39:05.119Z",
        "version": 1734009521565597696,
        "md5": "9f78c3f306a65e587acc24b68571bdd9",
        "metadata": {
          "resourceType": "unspecified"
        }
      },
      {
        "id": "prefs-DC_Large._lw_tmp_1657046193",
        "path": "/prefs-DC_Large._lw_tmp_1657046193",
        "dir": "/",
        "filename": "prefs-DC_Large._lw_tmp_1657046193",
        "contentType": "text/plain;charset=UTF-8",
        "size": 107,
        "modifiedTime": "2022-07-05T18:36:36.844Z",
        "version": 1737538872902942720,
        "md5": "f1d1315db6e57f28ba5e661c7d504a30",
        "metadata": {
          "resourceType": "unspecified"
        }
      },
      {
        "id": "prefs-DC_Large._lw_tmp_1657319500",
        "path": "/prefs-DC_Large._lw_tmp_1657319500",
        "dir": "/",
        "filename": "prefs-DC_Large._lw_tmp_1657319500",
        "contentType": "text/plain;charset=UTF-8",
        "size": 120,
        "modifiedTime": "2022-07-08T22:31:44.383Z",
        "version": 1737825456630005760,
        "md5": "1ba1a542f81ab65085c2ea985166b42d",
        "metadata": {
          "resourceType": "unspecified"
        }
      },
      {
        "id": "prefs-DC_Large._lw_tmp_1657644879",
        "path": "/prefs-DC_Large._lw_tmp_1657644879",
        "dir": "/",
        "filename": "prefs-DC_Large._lw_tmp_1657644879",
        "contentType": "text/plain;charset=UTF-8",
        "size": 120,
        "modifiedTime": "2022-07-12T16:54:43.940Z",
        "version": 1738166641823318016,
        "md5": "92fdf4cdb19fb51415f07ee27a8330bb",
        "metadata": {
          "resourceType": "unspecified"
        }
      },
      {
        "id": "prefs-DC_Large._lw_tmp_1657748875",
        "path": "/prefs-DC_Large._lw_tmp_1657748875",
        "dir": "/",
        "filename": "prefs-DC_Large._lw_tmp_1657748875",
        "contentType": "text/plain;charset=UTF-8",
        "size": 120,
        "modifiedTime": "2022-07-13T21:47:58.672Z",
        "version": 1738275688203419648,
        "md5": "d9818deff3964b2b7848286018b86562",
        "metadata": {
          "resourceType": "unspecified"
        }
      },
      {
        "id": "prefs-DC_Large._system",
        "path": "/prefs-DC_Large._system",
        "dir": "/",
        "filename": "prefs-DC_Large._system",
        "contentType": "text/plain;charset=UTF-8",
        "size": 85,
        "modifiedTime": "2022-02-08T18:36:52.557Z",
        "version": 1724221135319465984,
        "md5": "6e92a78d0909bcd89b1b50e006d18c7f",
        "metadata": {
          "resourceType": "unspecified"
        }
      },
      {
        "id": "prefs-DC_Large_TYPEAHEAD_v3.DC_Large",
        "path": "/prefs-DC_Large_TYPEAHEAD_v3.DC_Large",
        "dir": "/",
        "filename": "prefs-DC_Large_TYPEAHEAD_v3.DC_Large",
        "contentType": "text/plain;charset=UTF-8",
        "size": 113,
        "modifiedTime": "2022-02-08T18:37:04.753Z",
        "version": 1724221148106850304,
        "md5": "550bbf2a17053f3cd63b9c55fe302c3c",
        "metadata": {
          "resourceType": "unspecified"
        }
      },
      {
        "id": "prefs-DC_Large_TYPEAHEAD_v3.DC_Large_TYPEAHEAD_QPL_v3",
        "path": "/prefs-DC_Large_TYPEAHEAD_v3.DC_Large_TYPEAHEAD_QPL_v3",
        "dir": "/",
        "filename": "prefs-DC_Large_TYPEAHEAD_v3.DC_Large_TYPEAHEAD_QPL_v3",
        "contentType": "text/plain;charset=UTF-8",
        "size": 147,
        "modifiedTime": "2022-02-08T18:37:30.295Z",
        "version": 1724221174889578496,
        "md5": "31b0a22e9773e359942e637fac53c771",
        "metadata": {
          "resourceType": "unspecified"
        }
      },
      {
        "id": "prefs-DC_Large_TYPEAHEAD_v3.DC_Large_TYPEAHEAD_catalog_QPL_v3",
        "path": "/prefs-DC_Large_TYPEAHEAD_v3.DC_Large_TYPEAHEAD_catalog_QPL_v3",
        "dir": "/",
        "filename": "prefs-DC_Large_TYPEAHEAD_v3.DC_Large_TYPEAHEAD_catalog_QPL_v3",
        "contentType": "text/plain;charset=UTF-8",
        "size": 163,
        "modifiedTime": "2022-02-08T18:37:09.248Z",
        "version": 1724221152820199424,
        "md5": "f2d9cc87ecaadd41063014e99db9dcb1",
        "metadata": {
          "resourceType": "unspecified"
        }
      },
      {
        "id": "prefs-DC_Large_TYPEAHEAD_v3._lw_tmp_1617738504",
        "path": "/prefs-DC_Large_TYPEAHEAD_v3._lw_tmp_1617738504",
        "dir": "/",
        "filename": "prefs-DC_Large_TYPEAHEAD_v3._lw_tmp_1617738504",
        "contentType": "text/plain;charset=UTF-8",
        "size": 133,
        "modifiedTime": "2022-02-08T18:37:08.548Z",
        "version": 1724221152086196224,
        "md5": "a7a69a5617dfbaef72fa1fe2c3b57eea",
        "metadata": {
          "resourceType": "unspecified"
        }
      },
      {
        "id": "prefs-DC_Large_TYPEAHEAD_v3._lw_tmp_1617866573",
        "path": "/prefs-DC_Large_TYPEAHEAD_v3._lw_tmp_1617866573",
        "dir": "/",
        "filename": "prefs-DC_Large_TYPEAHEAD_v3._lw_tmp_1617866573",
        "contentType": "text/plain;charset=UTF-8",
        "size": 251,
        "modifiedTime": "2022-02-08T18:37:44.904Z",
        "version": 1724221190208225280,
        "md5": "53a2b7112cdfdb2d183b5fa3084fac66",
        "metadata": {
          "resourceType": "unspecified"
        }
      },
      {
        "id": "prefs-DC_Large_TYPEAHEAD_v4.DC_Large",
        "path": "/prefs-DC_Large_TYPEAHEAD_v4.DC_Large",
        "dir": "/",
        "filename": "prefs-DC_Large_TYPEAHEAD_v4.DC_Large",
        "contentType": "text/plain;charset=UTF-8",
        "size": 113,
        "modifiedTime": "2022-02-08T18:37:47.156Z",
        "version": 1724221192570667008,
        "md5": "1659a09705c24edf8690ff283450e808",
        "metadata": {
          "resourceType": "unspecified"
        }
      },
      {
        "id": "prefs-DC_Large_TYPEAHEAD_v4.DC_Large_TYPEAHEAD_QPL_v4",
        "path": "/prefs-DC_Large_TYPEAHEAD_v4.DC_Large_TYPEAHEAD_QPL_v4",
        "dir": "/",
        "filename": "prefs-DC_Large_TYPEAHEAD_v4.DC_Large_TYPEAHEAD_QPL_v4",
        "contentType": "text/plain;charset=UTF-8",
        "size": 147,
        "modifiedTime": "2022-04-21T22:22:13.438Z",
        "version": 1730758294570532864,
        "md5": "7c7ce71d0545c4cb659b6472610fa21b",
        "metadata": {
          "resourceType": "unspecified"
        }
      },
      {
        "id": "prefs-DC_Large_TYPEAHEAD_v4._lw_tmp_1650561014",
        "path": "/prefs-DC_Large_TYPEAHEAD_v4._lw_tmp_1650561014",
        "dir": "/",
        "filename": "prefs-DC_Large_TYPEAHEAD_v4._lw_tmp_1650561014",
        "contentType": "text/plain;charset=UTF-8",
        "size": 146,
        "modifiedTime": "2022-04-21T17:10:27.311Z",
        "version": 1730738679774707712,
        "md5": "73deb6141b715b72a1ab5ffdca509a14",
        "metadata": {
          "resourceType": "unspecified"
        }
      },
      {
        "id": "prefs-DC_Large_TYPEAHEAD_v4._lw_tmp_1650563739",
        "path": "/prefs-DC_Large_TYPEAHEAD_v4._lw_tmp_1650563739",
        "dir": "/",
        "filename": "prefs-DC_Large_TYPEAHEAD_v4._lw_tmp_1650563739",
        "contentType": "text/plain;charset=UTF-8",
        "size": 133,
        "modifiedTime": "2022-04-21T22:22:11.674Z",
        "version": 1730758292720844800,
        "md5": "444dd5757b71aec344f21934b7ba08af",
        "metadata": {
          "resourceType": "unspecified"
        }
      },
      {
        "id": "prefs-DC_Large_TYPEAHEAD_v4._system",
        "path": "/prefs-DC_Large_TYPEAHEAD_v4._system",
        "dir": "/",
        "filename": "prefs-DC_Large_TYPEAHEAD_v4._system",
        "contentType": "text/plain;charset=UTF-8",
        "size": 111,
        "modifiedTime": "2022-02-08T18:36:51.063Z",
        "version": 1724221133751844864,
        "md5": "3fe239460e150c96161c66cd8d3ec7cd",
        "metadata": {
          "resourceType": "unspecified"
        }
      },
      {
        "id": "prefs-DC_Large_query_rewrite.DC_Large",
        "path": "/prefs-DC_Large_query_rewrite.DC_Large",
        "dir": "/",
        "filename": "prefs-DC_Large_query_rewrite.DC_Large",
        "contentType": "text/plain;charset=UTF-8",
        "size": 115,
        "modifiedTime": "2022-02-08T18:37:48.655Z",
        "version": 1724221194141433856,
        "md5": "d8a5c2a0fa25c528d107a60c5c57fe78",
        "metadata": {
          "resourceType": "unspecified"
        }
      },
      {
        "id": "prefs-DC_Large_query_rewrite._lw_tmp_1624574795",
        "path": "/prefs-DC_Large_query_rewrite._lw_tmp_1624574795",
        "dir": "/",
        "filename": "prefs-DC_Large_query_rewrite._lw_tmp_1624574795",
        "contentType": "text/plain;charset=UTF-8",
        "size": 135,
        "modifiedTime": "2022-02-08T18:36:44.213Z",
        "version": 1724221126569099264,
        "md5": "1f0e343ee1e8979b8b80937722446468",
        "metadata": {
          "resourceType": "unspecified"
        }
      },
      {
        "id": "prefs-DC_Large_signals.DC_Large",
        "path": "/prefs-DC_Large_signals.DC_Large",
        "dir": "/",
        "filename": "prefs-DC_Large_signals.DC_Large",
        "contentType": "text/plain;charset=UTF-8",
        "size": 103,
        "modifiedTime": "2022-02-08T18:36:41.311Z",
        "version": 1724221123526131712,
        "md5": "074d91b9bc22fc4f318e16683b77b6ba",
        "metadata": {
          "resourceType": "unspecified"
        }
      },
      {
        "id": "prefs-DC_Large_signals._lw_tmp_1617209016",
        "path": "/prefs-DC_Large_signals._lw_tmp_1617209016",
        "dir": "/",
        "filename": "prefs-DC_Large_signals._lw_tmp_1617209016",
        "contentType": "text/plain;charset=UTF-8",
        "size": 6911,
        "modifiedTime": "2022-02-08T18:36:45.055Z",
        "version": 1724221127453048832,
        "md5": "787868b504706e09c84432db2fbd9454",
        "metadata": {
          "resourceType": "unspecified"
        }
      },
      {
        "id": "prefs-DC_Large_signals._lw_tmp_1639365532",
        "path": "/prefs-DC_Large_signals._lw_tmp_1639365532",
        "dir": "/",
        "filename": "prefs-DC_Large_signals._lw_tmp_1639365532",
        "contentType": "text/plain;charset=UTF-8",
        "size": 136,
        "modifiedTime": "2022-02-08T18:37:21.857Z",
        "version": 1724221166042742784,
        "md5": "74e376a6addd134f1d5bcd0b03ee0f1e",
        "metadata": {
          "resourceType": "unspecified"
        }
      },
      {
        "id": "prefs-DC_Large_signals._system",
        "path": "/prefs-DC_Large_signals._system",
        "dir": "/",
        "filename": "prefs-DC_Large_signals._system",
        "contentType": "text/plain;charset=UTF-8",
        "size": 101,
        "modifiedTime": "2022-02-08T18:37:53.858Z",
        "version": 1724221199597174784,
        "md5": "f9ddf4e9754e4cc741a8be1c2bed0fcc",
        "metadata": {
          "resourceType": "unspecified"
        }
      },
      {
        "id": "prefs-DC_Large_signals_aggr.DC_Large",
        "path": "/prefs-DC_Large_signals_aggr.DC_Large",
        "dir": "/",
        "filename": "prefs-DC_Large_signals_aggr.DC_Large",
        "contentType": "text/plain;charset=UTF-8",
        "size": 113,
        "modifiedTime": "2022-02-08T18:36:59.803Z",
        "version": 1724221142916399104,
        "md5": "58e8554d123919b026dc21bd34aafe92",
        "metadata": {
          "resourceType": "unspecified"
        }
      },
      {
        "id": "prefs-DC_Large_signals_aggr.DC_Large_TYPEAHEAD_QPL_v3",
        "path": "/prefs-DC_Large_signals_aggr.DC_Large_TYPEAHEAD_QPL_v3",
        "dir": "/",
        "filename": "prefs-DC_Large_signals_aggr.DC_Large_TYPEAHEAD_QPL_v3",
        "contentType": "text/plain;charset=UTF-8",
        "size": 147,
        "modifiedTime": "2022-02-08T18:36:45.878Z",
        "version": 1724221128320221184,
        "md5": "dffda729c060928d8ee7be839c916714",
        "metadata": {
          "resourceType": "unspecified"
        }
      },
      {
        "id": "prefs-DC_Large_signals_aggr.TAXO_QPL",
        "path": "/prefs-DC_Large_signals_aggr.TAXO_QPL",
        "dir": "/",
        "filename": "prefs-DC_Large_signals_aggr.TAXO_QPL",
        "contentType": "text/plain;charset=UTF-8",
        "size": 113,
        "modifiedTime": "2022-02-08T18:36:47.343Z",
        "version": 1724221129851142144,
        "md5": "153fd2b40242d87b129c8bb8adff5fea",
        "metadata": {
          "resourceType": "unspecified"
        }
      },
      {
        "id": "prefs-DC_Large_signals_aggr._lw_tmp_1617895338",
        "path": "/prefs-DC_Large_signals_aggr._lw_tmp_1617895338",
        "dir": "/",
        "filename": "prefs-DC_Large_signals_aggr._lw_tmp_1617895338",
        "contentType": "text/plain;charset=UTF-8",
        "size": 251,
        "modifiedTime": "2022-02-08T18:36:56.776Z",
        "version": 1724221139742359552,
        "md5": "f797833996b952f9cfb60fa9ed1ca5fd",
        "metadata": {
          "resourceType": "unspecified"
        }
      },
      {
        "id": "prefs-RESPONSE_TA.DC_Large",
        "path": "/prefs-RESPONSE_TA.DC_Large",
        "dir": "/",
        "filename": "prefs-RESPONSE_TA.DC_Large",
        "contentType": "text/plain;charset=UTF-8",
        "size": 93,
        "modifiedTime": "2022-02-08T18:37:09.908Z",
        "version": 1724221153512259584,
        "md5": "17445aab8669131f89cfb1c4ec1f6819",
        "metadata": {
          "resourceType": "unspecified"
        }
      },
      {
        "id": "prefs-RESPONSE_TA._lw_tmp_1617663084",
        "path": "/prefs-RESPONSE_TA._lw_tmp_1617663084",
        "dir": "/",
        "filename": "prefs-RESPONSE_TA._lw_tmp_1617663084",
        "contentType": "text/plain;charset=UTF-8",
        "size": 113,
        "modifiedTime": "2022-02-08T18:37:49.456Z",
        "version": 1724221194981343232,
        "md5": "631a63cba286f491b794181f3383ce6d",
        "metadata": {
          "resourceType": "unspecified"
        }
      },
      {
        "id": "prefs-pm-7d08eff5-b320-41ba-8b9a-6c8166500fb1-DC_Large.json",
        "path": "/prefs-pm-7d08eff5-b320-41ba-8b9a-6c8166500fb1-DC_Large.json",
        "dir": "/",
        "filename": "prefs-pm-7d08eff5-b320-41ba-8b9a-6c8166500fb1-DC_Large.json",
        "contentType": "application/json",
        "size": 3392,
        "modifiedTime": "2022-07-13T04:47:48.705Z",
        "version": 1738211504901062656,
        "md5": "216218ab3ff461fd12239a91364f5081",
        "metadata": {
          "resourceType": "file"
        }
      },
      {
        "id": "prefs-pm-DC_Large.json",
        "path": "/prefs-pm-DC_Large.json",
        "dir": "/",
        "filename": "prefs-pm-DC_Large.json",
        "contentType": "application/json",
        "size": 146,
        "modifiedTime": "2022-07-13T04:46:22.209Z",
        "version": 1738211414204481536,
        "md5": "c7b8aeb1aa37da2da6da8a1e6b22e549",
        "metadata": {
          "resourceType": "file"
        }
      },
      {
        "id": "prefs-system_jobs_history.DC_Large",
        "path": "/prefs-system_jobs_history.DC_Large",
        "dir": "/",
        "filename": "prefs-system_jobs_history.DC_Large",
        "contentType": "text/plain;charset=UTF-8",
        "size": 109,
        "modifiedTime": "2022-02-08T18:37:23.305Z",
        "version": 1724221167561080832,
        "md5": "643d7527e59f5919ba06714d13580e08",
        "metadata": {
          "resourceType": "unspecified"
        }
      },
      {
        "id": "prefs-system_jobs_history._lw_tmp_1636397075",
        "path": "/prefs-system_jobs_history._lw_tmp_1636397075",
        "dir": "/",
        "filename": "prefs-system_jobs_history._lw_tmp_1636397075",
        "contentType": "text/plain;charset=UTF-8",
        "size": 247,
        "modifiedTime": "2022-02-08T18:37:03.343Z",
        "version": 1724221146629406720,
        "md5": "57b835dbda8724460c8ef389d3ed6ada",
        "metadata": {
          "resourceType": "unspecified"
        }
      },
      {
        "id": "prefs-system_jobs_history._system",
        "path": "/prefs-system_jobs_history._system",
        "dir": "/",
        "filename": "prefs-system_jobs_history._system",
        "contentType": "text/plain;charset=UTF-8",
        "size": 107,
        "modifiedTime": "2022-02-08T18:37:10.610Z",
        "version": 1724221154248359936,
        "md5": "8ffd68f13d6bdd2ddc87e9bbd0292d45",
        "metadata": {
          "resourceType": "unspecified"
        }
      },
      {
        "id": "query-rewrites/QR_HEAD_TAIL/stopwords_only.txt",
        "path": "/query-rewrites/QR_HEAD_TAIL/stopwords_only.txt",
        "dir": "/query-rewrites/QR_HEAD_TAIL",
        "filename": "stopwords_only.txt",
        "contentType": "text/plain",
        "size": 2107,
        "modifiedTime": "2022-06-30T21:22:37.468Z",
        "version": 1737096332542214144,
        "md5": "d58606eda82ba9d0cc5804fe89bc34bc",
        "metadata": {
          "resourceType": "file"
        }
      },
      {
        "id": "query-rewrites/QR_SYNONYM_DETECTION/ecom_keywords.csv",
        "path": "/query-rewrites/QR_SYNONYM_DETECTION/ecom_keywords.csv",
        "dir": "/query-rewrites/QR_SYNONYM_DETECTION",
        "filename": "ecom_keywords.csv",
        "contentType": "text/csv",
        "size": 4317,
        "modifiedTime": "2022-06-30T21:22:34.578Z",
        "version": 1737096329511829504,
        "md5": "d397619903b731e8f19f8fd6dd6653dc",
        "metadata": {
          "resourceType": "file"
        }
      }
    ],
    "fusionApps": [
      {
        "id": "DC_Large",
        "name": "DC_Large",
        "description": "Foundry core: Example App for Digital Commerce - Large Package",
        "dataUri": "App-Tile-07-460x160.png",
        "updates": [
          {
            "userId": "phil.ryan@lucidworks.com",
            "timestamp": "2022-07-12T05:09:05.485Z"
          },
          {
            "userId": "phil.ryan@lucidworks.com",
            "timestamp": "2022-07-12T05:09:05.481Z"
          },
          {
            "userId": "jonathan.ramaswamy@lucidworks.com",
            "timestamp": "2022-07-11T22:02:30.292Z"
          },
          {
            "userId": "jonathan.ramaswamy@lucidworks.com",
            "timestamp": "2022-07-11T22:02:30.288Z"
          },
          {
            "userId": "egor.shchaev@lucidworks.com",
            "timestamp": "2022-06-14T15:08:36.558Z"
          },
          {
            "userId": "egor.shchaev@lucidworks.com",
            "timestamp": "2022-06-14T15:08:36.555Z"
          },
          {
            "userId": "lynda.gathercoal@lucidworks.com",
            "timestamp": "2022-05-03T19:11:50.520Z"
          },
          {
            "userId": "lynda.gathercoal@lucidworks.com",
            "timestamp": "2022-05-03T19:11:50.514Z"
          },
          {
            "userId": "scott.shearer@lucidworks.com",
            "timestamp": "2022-04-21T17:10:04.586Z"
          },
          {
            "userId": "scott.shearer@lucidworks.com",
            "timestamp": "2022-04-21T17:10:04.574Z"
          },
          {
            "userId": "omar.mckenzie@lucidworks.com",
            "timestamp": "2022-03-14T05:01:58.105Z"
          },
          {
            "userId": "omar.mckenzie@lucidworks.com",
            "timestamp": "2022-03-14T05:01:58.102Z"
          },
          {
            "userId": "lynda.gathercoal@lucidworks.com",
            "timestamp": "2022-03-11T02:55:10.634Z"
          },
          {
            "userId": "lynda.gathercoal@lucidworks.com",
            "timestamp": "2022-03-11T02:55:10.630Z"
          },
          {
            "userId": "egor.shchaev@lucidworks.com",
            "timestamp": "2022-02-28T14:53:06.409Z"
          },
          {
            "userId": "egor.shchaev@lucidworks.com",
            "timestamp": "2022-02-28T14:53:06.396Z"
          },
          {
            "userId": "admin",
            "timestamp": "2022-02-24T18:43:02.233Z"
          },
          {
            "userId": "admin",
            "timestamp": "2022-02-24T18:43:02.228Z"
          },
          {
            "userId": "lynda.gathercoal@lucidworks.com",
            "timestamp": "2022-02-14T15:54:04.829Z"
          },
          {
            "userId": "lynda.gathercoal@lucidworks.com",
            "timestamp": "2022-02-14T15:54:04.825Z"
          },
          {
            "userId": "lynda.gathercoal@lucidworks.com",
            "timestamp": "2022-02-09T23:10:06.779Z"
          },
          {
            "userId": "lynda.gathercoal@lucidworks.com",
            "timestamp": "2022-02-09T23:10:06.775Z"
          },
          {
            "userId": "steven.mierop@lucidworks.com",
            "timestamp": "2022-02-07T23:59:01.604Z"
          },
          {
            "userId": "steven.mierop@lucidworks.com",
            "timestamp": "2022-02-07T23:59:01.598Z"
          },
          {
            "userId": "ashumway",
            "timestamp": "2022-02-04T23:16:59.181Z"
          },
          {
            "userId": "ashumway",
            "timestamp": "2022-02-04T23:16:59.178Z"
          },
          {
            "userId": "garfield.coke@lucidworks.com",
            "timestamp": "2022-01-18T10:23:25.572Z"
          },
          {
            "userId": "garfield.coke@lucidworks.com",
            "timestamp": "2022-01-18T10:23:25.560Z"
          },
          {
            "userId": "admin",
            "timestamp": "2022-01-13T23:24:56.896Z"
          },
          {
            "userId": "admin",
            "timestamp": "2022-01-13T23:24:56.892Z"
          }
        ],
        "properties": {
          "headerImageName": "headerImage7",
          "previousCollectionId": "DC_Large",
          "tileColor": "apps-yellow"
        }
      }
    ],
    "templates": [
      {
        "id": "31c75f72-7717-44a3-b041-38522654cf88",
        "app": "DC_Large",
        "all": true,
        "dirty": false,
        "metadata": {
          "type": "home"
        },
        "neverPublished": false,
        "published": false,
        "priority": 0,
        "markedForDeletion": false,
        "type": "home",
        "zoneIds": [
          "d7d98745-2a56-47f3-88c0-2312ddf558db",
          "4722cbc2-7b8e-47c4-87b8-5a5218d12316"
        ],
        "name": "Home",
        "templateDirty": false,
        "staging": true
      },
      {
        "id": "c2a7c469-b0ff-43ae-a3d9-e44c0c2b35b2",
        "app": "DC_Large",
        "all": true,
        "dirty": true,
        "metadata": {
          "type": "landing"
        },
        "neverPublished": true,
        "published": false,
        "priority": 0,
        "markedForDeletion": false,
        "type": "landing",
        "zoneIds": [
          "66fbb647-31ff-4c7e-be47-00484df7e9ee"
        ],
        "dirtyZoneIds": [
          "66fbb647-31ff-4c7e-be47-00484df7e9ee"
        ],
        "name": "Search Results",
        "templateDirty": true,
        "staging": true
      },
      {
        "id": "d44b451d-6d4e-42aa-aa09-03da102c5447",
        "app": "DC_Large",
        "all": false,
        "dirty": true,
        "metadata": {
          "type": "typeahead"
        },
        "neverPublished": true,
        "published": false,
        "priority": 0,
        "markedForDeletion": false,
        "type": "typeahead",
        "zoneIds": [
          "079566b9-c38b-4c24-8715-d0f5ead8e34f"
        ],
        "dirtyZoneIds": [
          "079566b9-c38b-4c24-8715-d0f5ead8e34f"
        ],
        "name": "Typeahead",
        "templateDirty": true,
        "staging": true
      },
      {
        "id": "pub-31c75f72-7717-44a3-b041-38522654cf88",
        "app": "DC_Large",
        "all": true,
        "dirty": false,
        "metadata": {
          "type": "home"
        },
        "neverPublished": false,
        "published": true,
        "priority": 0,
        "markedForDeletion": false,
        "type": "home",
        "zoneIds": [
          "pub-d7d98745-2a56-47f3-88c0-2312ddf558db",
          "pub-4722cbc2-7b8e-47c4-87b8-5a5218d12316"
        ],
        "name": "Home",
        "templateDirty": false,
        "staging": false
      }
    ],
    "zones": [
      {
        "id": "079566b9-c38b-4c24-8715-d0f5ead8e34f",
        "dirty": true,
        "metadata": {
          "title": "name_s",
          "image": "images_ss",
          "behavior": "query",
          "groupTitle": "List"
        },
        "omitFilters": false,
        "uiTreatment": "typeahead-list",
        "neverPublished": true,
        "name": "Typeahead",
        "inTemplates": [
          "d44b451d-6d4e-42aa-aa09-03da102c5447"
        ],
        "queryProfile": "DC_Large",
        "published": false,
        "type": "typeahead-list",
        "staging": true
      },
      {
        "id": "4722cbc2-7b8e-47c4-87b8-5a5218d12316",
        "dirty": false,
        "layout": "grid",
        "metadata": {
          "layout": "grid"
        },
        "omitFilters": false,
        "uiTreatment": "facet-list",
        "neverPublished": false,
        "name": "Facets",
        "inTemplates": [
          "31c75f72-7717-44a3-b041-38522654cf88"
        ],
        "queryProfile": "DC_Large",
        "published": false,
        "type": "facet",
        "staging": true
      },
      {
        "id": "66fbb647-31ff-4c7e-be47-00484df7e9ee",
        "dirty": true,
        "metadata": {
          "primary": "name_s",
          "secondary": "SkuDescription_s",
          "image": "images_ss"
        },
        "omitFilters": false,
        "neverPublished": true,
        "name": "Results List",
        "inTemplates": [
          "c2a7c469-b0ff-43ae-a3d9-e44c0c2b35b2"
        ],
        "queryProfile": "DC_Large",
        "published": false,
        "type": "result-list",
        "staging": true
      },
      {
        "id": "d7d98745-2a56-47f3-88c0-2312ddf558db",
        "dirty": false,
        "metadata": {
          "dataModelConfigMap": {
            "generic": {
              "queryProfile": "DC_Large",
              "primary": "name_s",
              "secondary": "SkuDescription_s",
              "image": "images_ss"
            },
            "person": {
              "image": "image_s",
              "title": "title_t",
              "email": "email_s",
              "name": "full_name_t"
            },
            "page": {
              "image": "image_s",
              "primary": "title_t",
              "secondary": "body_t",
              "url": "url_s"
            },
            "file": {
              "primary": "title_t",
              "secondary": "name_t",
              "url": "url_s"
            },
            "dc_datamodel": {
              "queryProfile": "DC_Large",
              "primary": "name_s",
              "secondary": "recentDate_dt",
              "image": "images_ss"
            }
          }
        },
        "omitFilters": false,
        "uiTreatment": "result-list",
        "neverPublished": false,
        "name": "Results",
        "inTemplates": [
          "31c75f72-7717-44a3-b041-38522654cf88"
        ],
        "queryProfile": "DC_Large",
        "published": false,
        "type": "main-result-list",
        "staging": true
      },
      {
        "id": "pub-4722cbc2-7b8e-47c4-87b8-5a5218d12316",
        "dirty": false,
        "layout": "grid",
        "metadata": {
          "layout": "grid"
        },
        "omitFilters": false,
        "uiTreatment": "facet-list",
        "neverPublished": false,
        "name": "Facets",
        "inTemplates": [
          "pub-31c75f72-7717-44a3-b041-38522654cf88"
        ],
        "queryProfile": "DC_Large",
        "published": true,
        "type": "facet",
        "staging": false
      },
      {
        "id": "pub-d7d98745-2a56-47f3-88c0-2312ddf558db",
        "dirty": false,
        "metadata": {
          "dataModelConfigMap": {
            "generic": {
              "queryProfile": "DC_Large",
              "primary": "name_s",
              "secondary": "SkuDescription_s",
              "image": "images_ss"
            },
            "person": {
              "image": "image_s",
              "title": "title_t",
              "email": "email_s",
              "name": "full_name_t"
            },
            "page": {
              "image": "image_s",
              "primary": "title_t",
              "secondary": "body_t",
              "url": "url_s"
            },
            "file": {
              "primary": "title_t",
              "secondary": "name_t",
              "url": "url_s"
            },
            "dc_datamodel": {
              "queryProfile": "DC_Large",
              "primary": "name_s",
              "secondary": "recentDate_dt",
              "image": "images_ss"
            }
          }
        },
        "omitFilters": false,
        "uiTreatment": "result-list",
        "neverPublished": false,
        "name": "Results",
        "inTemplates": [
          "pub-31c75f72-7717-44a3-b041-38522654cf88"
        ],
        "queryProfile": "DC_Large",
        "published": true,
        "type": "main-result-list",
        "staging": false
      }
    ],
    "dataModels": [
      {
        "id": "dc_datamodel",
        "name": "DC data model",
        "indexPipeline": "coppel",
        "queryPipeline": "coppel",
        "fields": [
          {
            "name": "productID",
            "description": "",
            "required": false,
            "mappings": [
              {
                "solrField": "productID_s",
                "queryField": false,
                "phraseMatch": false
              },
              {
                "solrField": "productID_t",
                "queryField": true,
                "phraseMatch": false,
                "boostValue": 10.0
              }
            ]
          },
          {
            "name": "skuID",
            "description": "",
            "required": false,
            "mappings": [
              {
                "solrField": "skuID_s",
                "queryField": false,
                "phraseMatch": false
              },
              {
                "solrField": "skuID_t",
                "queryField": true,
                "phraseMatch": false,
                "boostValue": 10.0
              }
            ]
          },
          {
            "name": "images",
            "description": "image urls",
            "required": false,
            "mappings": [
              {
                "solrField": "images_ss",
                "queryField": false,
                "phraseMatch": false
              }
            ]
          },
          {
            "name": "name",
            "description": "",
            "required": false,
            "mappings": [
              {
                "solrField": "name_s",
                "queryField": false,
                "phraseMatch": false
              },
              {
                "solrField": "name_t",
                "queryField": true,
                "phraseMatch": true,
                "boostValue": 10.0
              }
            ]
          },
          {
            "name": "description",
            "description": "",
            "required": false,
            "mappings": [
              {
                "solrField": "description_t",
                "queryField": true,
                "phraseMatch": true,
                "boostValue": 2.0,
                "phraseBoost": 4.0
              }
            ]
          },
          {
            "name": "category",
            "description": "",
            "required": false,
            "mappings": [
              {
                "solrField": "category_ss",
                "queryField": false,
                "phraseMatch": false
              },
              {
                "solrField": "category_txt",
                "queryField": true,
                "phraseMatch": true,
                "boostValue": 4.0
              }
            ]
          },
          {
            "name": "categoryDepth",
            "description": "level-augmented category paths",
            "required": false,
            "mappings": [
              {
                "solrField": "categoryDepth_ss",
                "queryField": false,
                "phraseMatch": false
              }
            ]
          },
          {
            "name": "categoryID",
            "description": "",
            "required": false,
            "mappings": [
              {
                "solrField": "categoryID_ss",
                "queryField": false,
                "phraseMatch": false
              }
            ]
          },
          {
            "name": "categoryIDDepth",
            "description": "level-augmented categoryID paths",
            "required": false,
            "mappings": [
              {
                "solrField": "categoryIDDepth_ss",
                "queryField": false,
                "phraseMatch": false
              }
            ]
          },
          {
            "name": "type",
            "description": "product type",
            "required": false,
            "mappings": [
              {
                "solrField": "type_ss",
                "queryField": false,
                "phraseMatch": false
              },
              {
                "solrField": "type_txt",
                "queryField": true,
                "phraseMatch": true,
                "boostValue": 6.0
              }
            ]
          },
          {
            "name": "price",
            "description": "",
            "required": false,
            "mappings": [
              {
                "solrField": "price_d",
                "queryField": false,
                "phraseMatch": false
              },
              {
                "solrField": "price_i",
                "queryField": false,
                "phraseMatch": false
              }
            ]
          },
          {
            "name": "priceBucket",
            "description": "string price grouping",
            "required": false,
            "mappings": [
              {
                "solrField": "priceBucket_s",
                "queryField": false,
                "phraseMatch": false
              }
            ]
          },
          {
            "name": "brand",
            "description": "",
            "required": false,
            "mappings": [
              {
                "solrField": "brand_s",
                "queryField": false,
                "phraseMatch": false
              },
              {
                "solrField": "brand_t",
                "queryField": true,
                "phraseMatch": true,
                "boostValue": 6.0
              }
            ]
          },
          {
            "name": "color",
            "description": "",
            "required": false,
            "mappings": [
              {
                "solrField": "color_s",
                "queryField": false,
                "phraseMatch": false
              },
              {
                "solrField": "color_t",
                "queryField": true,
                "phraseMatch": true,
                "boostValue": 6.0
              }
            ]
          },
          {
            "name": "colorFamily",
            "description": "general color discription for broader color grouping",
            "required": false,
            "mappings": [
              {
                "solrField": "colorFamily_s",
                "queryField": false,
                "phraseMatch": false
              },
              {
                "solrField": "colorFamily_t",
                "queryField": true,
                "phraseMatch": false,
                "boostValue": 5.0
              }
            ]
          },
          {
            "name": "manufacturer",
            "description": "",
            "required": false,
            "mappings": [
              {
                "solrField": "manufacturer_s",
                "queryField": false,
                "phraseMatch": false
              },
              {
                "solrField": "manufacturer_t",
                "queryField": true,
                "phraseMatch": true,
                "boostValue": 2.0
              }
            ]
          },
          {
            "name": "manufacturerID",
            "description": "",
            "required": false,
            "mappings": [
              {
                "solrField": "manufacturerID_s",
                "queryField": false,
                "phraseMatch": false
              }
            ]
          },
          {
            "name": "inStock",
            "description": "",
            "required": false,
            "mappings": [
              {
                "solrField": "inStock_b",
                "queryField": false,
                "phraseMatch": false
              }
            ]
          },
          {
            "name": "displayable",
            "description": "",
            "required": false,
            "mappings": [
              {
                "solrField": "displayable_b",
                "queryField": false,
                "phraseMatch": false
              }
            ]
          },
          {
            "name": "availability",
            "description": "",
            "required": false,
            "mappings": [
              {
                "solrField": "availability_ss",
                "queryField": false,
                "phraseMatch": false
              }
            ]
          },
          {
            "name": "salesRank",
            "description": "sales rank (lower is better)",
            "required": false,
            "mappings": [
              {
                "solrField": "salesRank_l",
                "queryField": false,
                "phraseMatch": false
              }
            ]
          },
          {
            "name": "salesVolume",
            "description": "sales volume (higher is better)",
            "required": false,
            "mappings": [
              {
                "solrField": "salesVolume_l",
                "queryField": false,
                "phraseMatch": false
              }
            ]
          },
          {
            "name": "gender",
            "description": "",
            "required": false,
            "mappings": [
              {
                "solrField": "gender_ss",
                "queryField": false,
                "phraseMatch": false
              },
              {
                "solrField": "gender_t",
                "queryField": true,
                "phraseMatch": false,
                "boostValue": 3.0
              }
            ]
          },
          {
            "name": "size",
            "description": "",
            "required": false,
            "mappings": [
              {
                "solrField": "size_s",
                "queryField": false,
                "phraseMatch": false
              },
              {
                "solrField": "size_t",
                "queryField": true,
                "phraseMatch": false,
                "boostValue": 3.0
              }
            ]
          },
          {
            "name": "material",
            "description": "",
            "required": false,
            "mappings": [
              {
                "solrField": "material_s",
                "queryField": false,
                "phraseMatch": false
              },
              {
                "solrField": "material_t",
                "queryField": true,
                "phraseMatch": false,
                "boostValue": 4.0
              }
            ]
          },
          {
            "name": "dimensions",
            "description": "",
            "required": false,
            "mappings": [
              {
                "solrField": "dimensions_s",
                "queryField": false,
                "phraseMatch": false
              },
              {
                "solrField": "dimensions_t",
                "queryField": false,
                "phraseMatch": false,
                "boostValue": 5.0
              }
            ]
          },
          {
            "name": "searchable",
            "description": "",
            "required": false,
            "mappings": [
              {
                "solrField": "searchable_txt",
                "queryField": true,
                "phraseMatch": true,
                "boostValue": 2.0,
                "phraseBoost": 4.0
              }
            ]
          },
          {
            "name": "productRelease",
            "description": "date the product was released (for recency boost)",
            "required": false,
            "mappings": [
              {
                "solrField": "productRelease_dt",
                "queryField": false,
                "phraseMatch": false
              }
            ]
          },
          {
            "name": "lastModified",
            "description": "",
            "required": false,
            "mappings": [
              {
                "solrField": "lastModified_dt",
                "queryField": false,
                "phraseMatch": false
              }
            ]
          },
          {
            "name": "created",
            "description": "",
            "required": false,
            "mappings": [
              {
                "solrField": "created_dt",
                "queryField": false,
                "phraseMatch": false
              }
            ]
          },
          {
            "name": "indexed",
            "description": "",
            "required": false,
            "mappings": [
              {
                "solrField": "indexed_dt",
                "queryField": false,
                "phraseMatch": false
              }
            ]
          }
        ]
      },
      {
        "id": "file",
        "name": "file",
        "description": "Represents a generic file, for example a pdf, text file or spreadsheet.",
        "indexPipeline": "file",
        "fields": [
          {
            "name": "title",
            "description": "Any extracted title found in the contents of this file",
            "required": false,
            "mappings": [
              {
                "solrField": "title_t",
                "queryField": true,
                "phraseMatch": true,
                "boostValue": 5.0,
                "phraseBoost": 3.0
              },
              {
                "solrField": "title_txt_en",
                "queryField": true,
                "phraseMatch": true,
                "boostValue": 3.0,
                "phraseBoost": 2.0
              }
            ]
          },
          {
            "name": "body",
            "description": "Any extracted main body contents of this file",
            "required": false,
            "mappings": [
              {
                "solrField": "body_t",
                "queryField": true,
                "phraseMatch": true,
                "boostValue": 2.0,
                "phraseBoost": 2.0
              },
              {
                "solrField": "body_txt_en",
                "queryField": true,
                "phraseMatch": true,
                "boostValue": 2.0,
                "phraseBoost": 2.0
              }
            ]
          },
          {
            "name": "name",
            "description": "The name of this file",
            "required": true,
            "mappings": [
              {
                "solrField": "name_s",
                "queryField": false,
                "phraseMatch": false
              },
              {
                "solrField": "name_t",
                "queryField": true,
                "phraseMatch": false
              }
            ]
          },
          {
            "name": "url",
            "description": "Where to find this file",
            "required": true,
            "mappings": [
              {
                "solrField": "url_s",
                "queryField": false,
                "phraseMatch": false
              }
            ]
          },
          {
            "name": "modified",
            "description": "When this file was last modified, if known",
            "required": false,
            "mappings": [
              {
                "solrField": "modified_tdt",
                "queryField": false,
                "phraseMatch": false
              }
            ]
          },
          {
            "name": "created",
            "description": "When this file was first created, if known",
            "required": false,
            "mappings": [
              {
                "solrField": "created_tdt",
                "queryField": false,
                "phraseMatch": false
              }
            ]
          },
          {
            "name": "languageCode",
            "description": "The ISO 639-1 code for language that the body of file was written in, if known. Example: \"en\" for English",
            "required": false,
            "mappings": [
              {
                "solrField": "languageCode_s",
                "queryField": false,
                "phraseMatch": false
              }
            ]
          },
          {
            "name": "extension",
            "description": "The file extension, for example pdf or txt",
            "required": false,
            "mappings": [
              {
                "solrField": "extension_s",
                "queryField": false,
                "phraseMatch": false
              }
            ]
          },
          {
            "name": "filetype",
            "description": "The file type, for example PDF, Image or Text",
            "required": false,
            "mappings": [
              {
                "solrField": "filetype_s",
                "queryField": false,
                "phraseMatch": false
              }
            ]
          },
          {
            "name": "indexed",
            "description": "When this file was last indexed",
            "required": false,
            "mappings": [
              {
                "solrField": "indexed_tdt",
                "queryField": false,
                "phraseMatch": false
              }
            ]
          },
          {
            "name": "authorName",
            "description": "The name of the author of this file, if known",
            "required": false,
            "mappings": [
              {
                "solrField": "authorName_s",
                "queryField": false,
                "phraseMatch": false
              },
              {
                "solrField": "authorName_t",
                "queryField": false,
                "phraseMatch": false
              }
            ]
          },
          {
            "name": "authorEmail",
            "required": false,
            "mappings": [
              {
                "solrField": "authorEmail_s",
                "queryField": false,
                "phraseMatch": false
              }
            ]
          },
          {
            "name": "size",
            "description": "The size of this file in bytes",
            "required": false,
            "mappings": [
              {
                "solrField": "size_l",
                "queryField": false,
                "phraseMatch": false
              }
            ]
          },
          {
            "name": "authorId",
            "description": "A unique identifier for the author of this file, if known. Often same as authorEmail",
            "required": false,
            "mappings": [
              {
                "solrField": "authorId_s",
                "queryField": false,
                "phraseMatch": false
              }
            ]
          }
        ]
      }
    ],
    "dataSources": [
      {
        "id": "DC_GCS",
        "created": "2021-04-14T06:27:58.978Z",
        "modified": "2022-02-08T18:38:35.659Z",
        "connector": "lucidworks.gcs",
        "type": "lucidworks.gcs",
        "description": "GCS Connector",
        "pipeline": "DC_Large",
        "parserId": "DC_Large",
        "properties": {
          "authenticationProperties": {
            "jsonKey": "${secret.dataSources.DC_GCS.jsonKey}"
          },
          "applicationProperties": {
            "inclusiveRegexes": [],
            "exclusiveRegexes": [],
            "regexCacheSize": 10000,
            "includedFileExtensions": [],
            "maxSizeBytes": -1,
            "buckets": [
              "gs://ps-foundry/stuller-data/full_feed"
            ],
            "excludedFileExtensions": [],
            "pageSize": 1000,
            "minSizeBytes": 1
          },
          "collection": "DC_Large"
        },
        "diagnosticLogging": true,
        "coreProperties": {
          "fetchSettings": {
            "indexingInactivityTimeout": 900,
            "indexContentFields": false,
            "pluginInactivityTimeout": 600,
            "indexingThreads": 4,
            "fetchItemQueueSize": 10000,
            "fetchResponseCompletedTimeout": 300000,
            "fetchRequestCheckInterval": 15000,
            "fetchResponseScheduledTimeout": 300000,
            "numFetchThreads": 20,
            "pluginInstances": 0,
            "indexMetadata": false
          }
        }
      },
      {
        "id": "DC_Large_Populate_Signals_DS",
        "created": "2021-04-08T00:57:24.593Z",
        "modified": "2022-02-08T18:38:38.181Z",
        "connector": "lucidworks.random-content",
        "type": "lucidworks.random-content",
        "pipeline": "_signals_ingest",
        "parserId": "DC_Large",
        "properties": {
          "getRandomContentProperties": {
            "dataModelType": "random-content",
            "totalNumDocs": 10,
            "emitDelay": 0,
            "fieldsConfig": "// Each line should define one field in the format of [name]:[datatype]\n// You can add inline configurations for certain datatypes: ex {min:20, max:35, type:sequential}\n// For certain data types you can specify a domain of comma separated values in a bracket array to use instead of random data: [a, b, c]\n// Certain data types can be language specific with @[language], if multiple languages are specified, will generate data for both \n// Current languages are @fr for french, @kr for korean, and @en for english (english is default lang). Only the words datatype supports other languages.\n\n// Valid data types are:\n// sentences: generates number of sentences between min and max {min:_, max:_}, 1 sentence is generated if min/max not given\n// word - generates random word, supports @en @fr @kr, supports domain array []\n// name - random first last name from list of famous people, supports domain array []\n// date - generates random UTC date between min and max {min_, max_} (default 75 years ago - now)\n//      - min and max is handled through java LocalDateTime.parse(), uses ISO_INSTANT format ex: 2007-12-03T10:15:43.704275Z\n//      - min:now or max:now will be current date\n//      - if type:sequential is specified, min:_ needs to be specified, will increment 1 day for each document starting at min date\n//      - if format:_ is specified, the date will be outputted in that pattern , allows for replicating customer date formats\n//      - uses DateTimeFormatter pattern definition in ofPattern(), ex: {format:MM/dd/YYYY}\n// number - int values (default random 0-1000), supports inline config {min:_, max:_, type:random} = random between range min-max\n//        - {min:_, max:_, type:sequential} means it will generate sequential numbers, restarting to min when max is reached\n//        - {min:_, type:sequential} starting from min, will increment 1 for each new document up to document_count + min\n//        - {max:_, type:sequential} starting from max, will decrement 1 for each new document down to document_count - max\n// random_char_id - random alphanumeric id string supports inline config of {length:_} (default 10)\n// uuid - random uuid\n\n// Default fields: document_number, timestamp, hostname, date_indexed, date_modified\n// '{}' '[]' '@' ',' are used in the inline config so cannot be used for field names/domain names\n\n\ncount:number {min:1, max:1000, type:random}\ncollection:word [DC_Large]\napp_id:word [random-content]\nflag_s:word [event]\nhour_of_day:number {min:0, max:23}\ntimestamp_tdt:date {min:2019-12-12T00:00:00.000000Z, max:now}\nid:uuid\nquery:word\nsession_id:random_char_id {length:20}\ntype:word [click]\nuser_id:name\nfusion_query_id:random_char_id\ndoc_id:random_char_id"
          },
          "collection": "DC_Large_signals"
        },
        "coreProperties": {}
      },
      {
        "id": "DC_Large_TYPEAHEAD_inclusion_list",
        "created": "2021-04-26T23:05:53.940Z",
        "modified": "2021-04-26T23:05:53.940Z",
        "connector": "lucid.fileupload",
        "type": "fileupload",
        "pipeline": "DC_Large_TYPEAHEAD_IPL_v4",
        "parserId": "_system",
        "properties": {
          "collection": "DC_Large_TYPEAHEAD_v4",
          "fileId": "TYPEAHEAD/Typeahead_inclusion_list.csv",
          "mediaType": "text/csv"
        }
      }
    ]
  },
  "properties": [
    {
      "id": "secret.dataSources.DC_GCS.jsonKey",
      "schema": {
        "type": "string",
        "title": "secret.dataSources.DC_GCS.jsonKey",
        "hints": [
          "secret"
        ]
      }
    }
  ],
  "metadata": {
    "formatVersion": "1",
    "exportedBy": "sean",
    "exportedDate": "2022-07-14T18:30:14.389Z",
    "fusionVersion": "5.4.0",
    "fusionGuid": "d62d4466-a46e-4948-97b4-58597712cc7e"
  }
}
