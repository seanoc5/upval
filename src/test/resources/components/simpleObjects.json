{
  "objects": {
    "collections": [
      {
        "id": "${APP}_${FEATURE_NAME}",
        "createdAt": "2021-02-11T22:10:02.772Z",
        "searchClusterId": "default",
        "commitWithin": 10000,
        "solrParams": {
          "name": "${APP}_${FEATURE_NAME}",
          "numShards": 1,
          "replicationFactor": 2,
          "maxShardsPerNode": 2
        },
        "type": "DATA",
        "metadata": {}
      }
    ],
    "indexPipelines": [
      {
        "id": "${APP}_${FEATURE_NAME}_IPL",
        "stages": [
          {
            "id": "b3736ea6-c8a8-4180-950a-1c5f47a80f49",
            "ref": "lib/index/FusionServiceLib.js",
            "type": "managed-js-index",
            "skip": false,
            "label": "MJS: load FusionServices.js",
            "secretSourceStageId": "b3736ea6-c8a8-4180-950a-1c5f47a80f49"
          },
          {
            "id": "f6724c11-2e15-4184-ae70-b762ab87ef85",
            "translationMappings": [
              {
                "source": "Suggestion",
                "target": "value_s",
                "operation": "move"
              },
              {
                "source": "Weight",
                "target": "signal_count",
                "operation": "move"
              }
            ],
            "retentionMappings": [],
            "updateMappings": [],
            "unmappedRule": {
              "keep": true,
              "delete": false,
              "fieldToMoveValuesTo": "",
              "fieldToCopyValuesTo": "",
              "valueToAddToUnmappedFields": "",
              "valueToSetOnUnmappedFields": ""
            },
            "reservedFieldsMappingAllowed": false,
            "type": "field-mapping",
            "skip": false,
            "label": "Field Mapping for Inclusion List Suggestions",
            "secretSourceStageId": "f6724c11-2e15-4184-ae70-b762ab87ef85"
          },
          {
            "id": "525fbd2f-a010-45cd-aadb-e223c994d8e4",
            "script": "(function() {\n  'use strict';\n  var FusionServiceLib;\n\n  var Pattern = java.util.regex.Pattern;\n  var Matcher = java.util.regex.Matcher;\n\n  var VALUE_FIELD = \"value_s\";\n  var TYPE_FIELD = \"ta_type\";\n  var EXCLUDE_BLOB = \"${FEATURE_NAME}/full-list-of-bad-words_csv-file_2018_07_30.csv\";\n\n  //Global to hold the NSFW words\n  var exclusionList;\n\n\n  return function (doc, ctx) {\n    if (doc.getId() == null || doc.getFirstField(TYPE_FIELD) == null) {\n      return doc;\n    }\n\n    if (!doc.getFirstField(TYPE_FIELD).getValue().toString() == \"entity\" ){\n      return doc;\n    }\n\n    var exclude = false;\n    \n    // Load in lucidworks.ps FusionService library\n    if (null == FusionServiceLib) {\n      FusionServiceLib = ctx.FusionServiceLib;\n    }\n    \n    if(doc.hasField(VALUE_FIELD))\n    {\n      if(!exclusionList)\n      {\n        var response = FusionServiceLib.getStringBlob(EXCLUDE_BLOB);\n          if(response){\n            exclusionList = response.trim().split(\"\\n\");\n          }\n      }\n\n      var field = doc.getFirstField(VALUE_FIELD);\n      var val = field.getValue().toString();\n      \n\n      for(var i = 0; i < exclusionList.length && !exclude; i++)\n      {\n        var line = exclusionList[i];\n        var offset = line.indexOf(';');\n        if(offset > 0){\n          line = line.substr(0,offset);\n        }     \n\n        //Regex: If profane word/phrase matches an individual word in value, remove\n        //Match: apple profane-word orange\n        //No match: appleprofane-wordorange\n        var pattern = Pattern.compile(\"(?<!\\\\w)\" + line + \"(?!\\\\w)\", Pattern.CASE_INSENSITIVE);\n        var matcher = pattern.matcher(val);\n\n        exclude = matcher.find();\n      }\n    }\n\n    if(exclude)\n    {\n      return;\n    }\n    else{\n      return doc;\n    }\n}\n\n\n\n\n})();\n\n\n\n",
            "type": "javascript-index",
            "skip": false,
            "label": "Exclude Docs with Unwanted Terms",
            "condition": "true\n/**\n * Loads in full-list-of-bad-words_csv located in the blob store\n * For each phrase/word in the bad word lists, see if it exists in the value_s field or if the entire word is the value_s field\n * Removes the entire document if matched\n * \n * Does not run on entity type documents\n */",
            "secretSourceStageId": "525fbd2f-a010-45cd-aadb-e223c994d8e4"
          },
          {
            "id": "2d85cbdc-f6b8-42c3-b20d-3cec7be995e9",
            "script": "var clickThreshold = 100;\n\nfunction (doc) {\n  if (doc.getFirstFieldValue('signal_count_i') >= clickThreshold) {\n    return doc;\n  }\n}",
            "type": "javascript-index",
            "skip": false,
            "label": "Frequency Threshold Filter",
            "condition": "doc.hasField('signal_count_i')\n/* Checks the number of signals generated for each term\n * from the aggregated signal data and removes those\n * below a specified threshold. The threshold is defined\n * by global var threshold\n */",
            "secretSourceStageId": "2d85cbdc-f6b8-42c3-b20d-3cec7be995e9"
          },
          {
            "id": "d19efb4f-7543-46f4-80e8-0982da546b25",
            "script": "var numericCharsThreshold = 0.75; // in percentage\n\nfunction numericCharactersFilter(doc) {\n  if (doc.hasField(\"value_s\")) {\n    var query = doc.getFirstFieldValue(\"value_s\");\n    var numericChars = query.match(/[0-9]/g);\n    if (!numericChars || (numericChars.length / query.length) < numericCharsThreshold) {\n      return doc;\n    }\n  }\n}",
            "type": "javascript-index",
            "skip": false,
            "label": "Numeric Characters Filter",
            "condition": "true\n/* Checks the percentage of numeric characters in the\n * completion term and removes those over a set\n * threshold. The threshold is defined by global var\n * threshold and is expressed as a percentage in\n * decimal form.\n */",
            "secretSourceStageId": "d19efb4f-7543-46f4-80e8-0982da546b25"
          },
          {
            "id": "ce395120-943a-4126-a526-b27dbb91815f",
            "type": "javascript-index",
            "skip": false,
            "label": "Normalize Text",
            "condition": "true\n/* Lowercases terms and trims leading and trailing\n * whitespace. Any future changes to how suggestions\n * are displayed should also go here\n */",
            "secretSourceStageId": "ce395120-943a-4126-a526-b27dbb91815f"
          },
          {
            "id": "904e1951-1b06-4621-899f-18d51003c30a",
            "script": "var maxLength = 4;\n\nfunction (doc) {\n  if (doc.getFirstFieldValue(\"value_s\").split(\" \").length <= maxLength) {\n    return doc;\n  }\n}",
            "type": "javascript-index",
            "skip": false,
            "label": "Suggestion Term Length Filter",
            "condition": "true\n/* Checks the number of words in a suggestion and\n * removes those over a specified threshold. The\n * threshold is set by global var threshold\n  */",
            "secretSourceStageId": "904e1951-1b06-4621-899f-18d51003c30a"
          },
          {
            "id": "f4efc0df-d74d-447c-81e0-090ac453c8e4",
            "script": "function (doc, ctx) {\n  doc.setField('ta_type', 'history');\n  doc.setField('id', 'history_' + doc.getFirstFieldValue(\"value_s\").replaceAll(' ', '_'));\n  return doc;\n}",
            "type": "javascript-index",
            "skip": false,
            "label": "Add ID and Type Fields",
            "condition": "doc.hasField('signal_count_i')\n/* Adds the ta_type and idfield to history documents\n */",
            "secretSourceStageId": "f4efc0df-d74d-447c-81e0-090ac453c8e4"
          },
          {
            "id": "25dcf47d-5c2a-48ad-88f2-66863e0ac678",
            "enforceSchema": true,
            "fieldsList": true,
            "dateFormats": [],
            "params": [],
            "bufferDocsForSolr": true,
            "allowBlacklistedRequestParameters": false,
            "type": "solr-index",
            "skip": false,
            "secretSourceStageId": "25dcf47d-5c2a-48ad-88f2-66863e0ac678"
          }
        ],
        "properties": {
          "secretSourcePipelineId": "${APP}_${FEATURE_NAME}_IPL"
        }
      }
    ],
    "queryPipelines": [
      {
        "id": "${APP}_${FEATURE_NAME}_QPL",
        "stages": [
          {
            "id": "ece2b7eb-2916-4aff-91f2-8664563c825b",
            "script": "function (request, response, ctx) {\n \n  var q = request.getFirstParam('q')\n  request.putSingleParam('q', \"ta_type:entity &&\" + q)\n}",
            "shareState": true,
            "type": "javascript-query",
            "skip": false,
            "label": "Only Return Entity Documents",
            "condition": "request.hasParam(\"entityOnly\") && request.getFirstParam(\"entityOnly\").equals(\"true\");\n// This stage is used to the make the results only entity documents. The ${APP}_TYPEAHEAD_DC_entity_QPF will send a entityOnly=true",
            "secretSourceStageId": "ece2b7eb-2916-4aff-91f2-8664563c825b"
          },
          {
            "id": "2e25eeaa-ac2b-4e42-8603-39dea784d9ff",
            "script": "function (request, response, ctx) {\n \n  var q = request.getFirstParam('q')\n  request.putSingleParam('q', \"ta_type:history && \" + q)\n}",
            "shareState": true,
            "type": "javascript-query",
            "skip": false,
            "label": "Only Return History Documents",
            "condition": "request.hasParam(\"historyOnly\") && request.getFirstParam(\"historyOnly\").equals(\"true\");\n// This stage is used to the make the results only history documents. The ${APP}_TYPEAHEAD_DC_history_QPF will send a parameter historyOnly=true",
            "secretSourceStageId": "2e25eeaa-ac2b-4e42-8603-39dea784d9ff"
          },
          {
            "id": "9615c4bf-bd84-4c61-9ff3-2c07c73dc582",
            "numRecommendations": 10,
            "numSignals": 100,
            "aggrType": "click@doc_id,filters,query",
            "boostId": "id",
            "boostingMethod": "query-param",
            "boostingParam": "boost",
            "queryParams": [
              {
                "key": "qf",
                "value": "query_t"
              },
              {
                "key": "pf",
                "value": "query_t^50"
              },
              {
                "key": "pf",
                "value": "query_t~3^20"
              },
              {
                "key": "pf2",
                "value": "query_t^20"
              },
              {
                "key": "pf2",
                "value": "query_t~3^10"
              },
              {
                "key": "pf3",
                "value": "query_t^10"
              },
              {
                "key": "pf3",
                "value": "query_t~3^5"
              },
              {
                "key": "boost",
                "value": "map(query({!field f=query_s v=q}),0,0,1,20)"
              },
              {
                "key": "mm",
                "value": "50%"
              },
              {
                "key": "defType",
                "value": "edismax"
              },
              {
                "key": "sort",
                "value": "score desc, weight_d desc"
              },
              {
                "key": "fq",
                "value": "weight_d:[* TO *]"
              }
            ],
            "rollupField": "doc_id_s",
            "rollupWeightField": "weight_d",
            "weightExpression": "math:log(weight_d + 1) + 10 * math:log(score+1)",
            "rollupWeightStrategy": "max",
            "queryParamToBoost": "q",
            "includeEnrichedQuery": false,
            "type": "recommendation",
            "skip": false,
            "secretSourceStageId": "9615c4bf-bd84-4c61-9ff3-2c07c73dc582"
          },
          {
            "id": "3e16eb81-b5e6-47fd-b8c4-a1ff94ed47d4",
            "fieldFacets": [
              {
                "field": "ta_type",
                "limit": 100,
                "minCount": 1,
                "missing": false
              },
              {
                "field": "type",
                "limit": 100,
                "minCount": 1,
                "missing": false
              }
            ],
            "rangeFacets": [],
            "type": "facet",
            "skip": false,
            "secretSourceStageId": "3e16eb81-b5e6-47fd-b8c4-a1ff94ed47d4",
            "properties": {
              "autoCreated": true
            }
          },
          {
            "id": "5f4e1208-afe4-4fc7-941e-15872d5642f3",
            "params": [
              {
                "key": "defType",
                "value": "edismax",
                "policy": "append"
              }
            ],
            "type": "set-params",
            "skip": false,
            "secretSourceStageId": "5f4e1208-afe4-4fc7-941e-15872d5642f3"
          },
          {
            "id": "14fb0ccb-943e-43c2-a5b2-16889cadb2eb",
            "params": [
              {
                "key": "hl",
                "value": "true",
                "policy": "append"
              },
              {
                "key": "hl.fl",
                "value": "value_t",
                "policy": "append"
              }
            ],
            "type": "set-params",
            "skip": true,
            "label": "Highlighting",
            "secretSourceStageId": "14fb0ccb-943e-43c2-a5b2-16889cadb2eb"
          },
          {
            "id": "9340b52e-11a4-4e1d-a5ef-e4c9b753de70",
            "script": "function (request, response, ctx) {\n \n  var q = request.getFirstParam('q')\n  logger.info('***Terms q=' + q)\n\n  var s = q.split(' ');\n  var prefix = s[s.length - 1];\n\n  request.putSingleParam('terms', true);\n  request.putSingleParam('terms.prefix', [prefix]);\n  request.putSingleParam('terms.fl', ['value_t']);\n\n  //Ensures that the term itself won't be suggested\n  request.putSingleParam('terms.lower', [prefix]);\n  request.putSingleParam('terms.lower.incl', false);\n\n}",
            "shareState": true,
            "type": "javascript-query",
            "skip": false,
            "label": "Add Terms to Response",
            "secretSourceStageId": "9340b52e-11a4-4e1d-a5ef-e4c9b753de70"
          },
          {
            "id": "71e7f340-2dc3-41c8-8330-d2991d87e363",
            "rows": 10,
            "start": 0,
            "sortOrder": [
              {
                "type": "field",
                "order": "desc",
                "value": "score"
              }
            ],
            "queryFields": [
              {
                "field": "value_t"
              },
              {
                "field": "value_s"
              },
              {
                "field": "value_phonetic_en"
              },
              {
                "field": "value_edge"
              },
              {
                "field": "value_en"
              }
            ],
            "returnFields": [
              "value_s",
              "type",
              "ta_type",
              "document_url",
              "image_url",
              "popularity_d",
              "signal_count",
              "indexed_date"
            ],
            "returnScore": true,
            "type": "search-fields",
            "skip": false,
            "secretSourceStageId": "71e7f340-2dc3-41c8-8330-d2991d87e363"
          },
          {
            "id": "3ea61720-eb40-4bfc-be00-e4f2db6868fd",
            "httpMethod": "POST",
            "allowFederatedSearch": false,
            "preferredReplicaType": "pull",
            "type": "solr-query",
            "skip": false,
            "responseSignalsEnabled": true,
            "secretSourceStageId": "3ea61720-eb40-4bfc-be00-e4f2db6868fd"
          },
          {
            "id": "6713beba-089c-47a8-a8c1-c3f0715eafc8",
            "script": "function(request, response, ctx){\n  // logger.info('\\n\\n***REQUEST INFO = ' + response.getInnerResponse().toString());\n\n  // var q = request.getFirstParam('q');\n  // qmsg = [];\n  // qmsg.push(q);\n  // response.initialEntity.appendStringList('myqis',qmsg);\n\n  // var fq = request.getParam(\"fq\");\n  // fqmsg = [];\n  // for each (var item in fq) {\n  //   fqmsg.push(item);\n  // }\n  // response.initialEntity.appendStringList('myfqs',fqmsg);\n  \n  var qtime = response.getInnerResponse().getQTime().orElse(\"ERROR\").toString();\n  respMsg1 = [];\n  respMsg1.push(qtime);\n  response.initialEntity.appendStringList('qtime',respMsg1);\n\n  var value = response.getInnerResponse().getResponseHeaderParams().toString();\n  // var params = value.get(\"responseHeader\").get(\"params\");\n  // logger.info('\\n\\n***REQUEST INFO = ' + params);\n\n  respMsg2 = [];\n  respMsg2.push(value);\n    response.initialEntity.appendStringList('params',respMsg2);\n}",
            "shareState": true,
            "type": "javascript-query",
            "skip": false,
            "label": "Add response details to response messages",
            "secretSourceStageId": "6713beba-089c-47a8-a8c1-c3f0715eafc8"
          }
        ],
        "properties": {
          "supportedMode": "all",
          "secretSourcePipelineId": "${APP}_${FEATURE_NAME}_QPL"
        }
      }
    ]
  }
}
